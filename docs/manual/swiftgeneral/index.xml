<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>swift project â€“ swift general (troubleshooting, concepts, adv.topics)</title><link>https://swift-project.github.io/docs/manual/swiftgeneral/</link><description>Recent content in swift general (troubleshooting, concepts, adv.topics) on swift project</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://swift-project.github.io/docs/manual/swiftgeneral/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Advanced - solving problems</title><link>https://swift-project.github.io/docs/manual/swiftgeneral/swiftadvanced/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://swift-project.github.io/docs/manual/swiftgeneral/swiftadvanced/</guid><description>
&lt;ul>
&lt;li>&lt;a href="https://swift-project.github.io/docs/manual/swiftgeneral/faq/">Questions and answers (aka FAQs)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://swift-project.github.io/docs/manual/swiftgeneral/swiftcmdargs/">swift command line arguments&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://swift-project.github.io/docs/troubleshooting/">Troubleshooting installation and 1st start&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://swift-project.github.io/docs/manual/swiftgeneral/tracinginterpolation/">Tracing interpolation&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://swift-project.github.io/docs/manual/swiftgeneral/matching/tracingmatching/">Tracing model matching&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://swift-project.github.io/docs/manual/swiftgeneral/tracingnetwork/">Tracing network packets (FSD log) and network statistics&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: Aircraft parts and gnd. flag / ground flag</title><link>https://swift-project.github.io/docs/manual/swiftgeneral/partsandgndflag/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://swift-project.github.io/docs/manual/swiftgeneral/partsandgndflag/</guid><description>
&lt;h1 id="aircraft-parts">Aircraft parts&lt;/h1>
&lt;p>Aircraft parts are used to transfer aircraft information about &amp;quot;gear&amp;quot;,
&amp;quot;spoilers&amp;quot;, &amp;quot;flaps&amp;quot;, &amp;quot;lights&amp;quot;. They also transfer a &lt;strong>GND flag&lt;/strong>
to tell if the aircraft is located on ground. VATSIM uses the parts
ground flag.&lt;/p>
&lt;h1 id="ground-flag--gnd-flag">Ground. flag / gnd. flag&lt;/h1>
&lt;p>In the FSD protocol and the related extensions there are 2 ways to
transfer a ground flag. &lt;em>swift&lt;/em> supports both:&lt;/p>
&lt;ul>
&lt;li>along with the aircraft parts (VATSIM)&lt;/li>
&lt;li>and as flag in the aircraft position&lt;/li>
&lt;/ul>
&lt;h1 id="how-should-it-be-set">How should it be set?&lt;/h1>
&lt;ul>
&lt;li>on VATSIM you will see the parts flag for clients supporting parts,
e.g. vPilot and &lt;em>swift&lt;/em>.&lt;/li>
&lt;li>on VATSIM the GND flag for PARTS is supported, the &amp;quot;other GND
flag&amp;quot; not.&lt;/li>
&lt;li>For other servers it depends on the server settings if
[GND]{.title-ref} and [PARTS]{.title-ref} are enabled&lt;/li>
&lt;li>You could even enable the GND flag for an individual aircraft.
&lt;strong>Never do this unless you know what you are doing!&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="http://img.swift-project.org/gndflag.png" alt="image">&lt;/p>
&lt;ul>
&lt;li>Leave the ground flag and fast position settings alone unless you
know what you are doing.&lt;/li>
&lt;/ul>
&lt;h1 id="model-view">Model view&lt;/h1>
&lt;p>You can check the [GND]{.title-ref} and [PARTS]{.title-ref} in the model
view.&lt;/p></description></item><item><title>Docs: Cannot connect to simulator / no simulator plugin</title><link>https://swift-project.github.io/docs/manual/swiftgeneral/cannotconnectsim/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://swift-project.github.io/docs/manual/swiftgeneral/cannotconnectsim/</guid><description>
&lt;ul>
&lt;li>If NOT selected to the simulator the simulator LED is OFF.&lt;/li>
&lt;li>Make sure the used simulator is selected (checked)&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="http://img.swift-project.org/swift_pilot_client_-_configure_simulator.png" alt="image">{height=&amp;ldquo;300px&amp;rdquo;}&lt;/p>
&lt;ul>
&lt;li>If you &lt;strong>do NOT see any simulator on that page&lt;/strong>, you did not
install the corresponding plugin (aka driver)&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="http://img.swift-project.org/Plugins.png" alt="image">&lt;/p>
&lt;ul>
&lt;li>&lt;strong>XPlane specific&lt;/strong>: Verify the settings
&lt;code>xswiftbussettings&lt;/code>{.interpreted-text role=&amp;ldquo;ref&amp;rdquo;}&lt;/li>
&lt;/ul></description></item><item><title>Docs: Connecting FS9 manually through multiplayer</title><link>https://swift-project.github.io/docs/manual/swiftgeneral/fs9mp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://swift-project.github.io/docs/manual/swiftgeneral/fs9mp/</guid><description>
&lt;p>Should auto-connect between FS9 and swift not work, you will notice that
the status-light on the right side of &lt;strong>sim&lt;/strong> is off and swift is not
able to detect the &lt;strong>aircraft model&lt;/strong> that you are currently using in
FS9&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/swift_FS9_connection_01.jpg" alt="image">&lt;/p>
&lt;p>In order to solve this problem you need to change to FS9 and open the
menu &lt;strong>Multiplayer&lt;/strong> and choose &lt;strong>Connect&lt;/strong>&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/swift_FS9_connection_02.jpg" alt="image">&lt;/p>
&lt;p>In the connect-dialogue, swift's multiplayer-session should appear
within a few seconds. Select it and then click on &lt;strong>Join&lt;/strong>&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/swift_FS9_connection_03.jpg" alt="image">&lt;/p>
&lt;p>After joining swift's multiplayer-session, change back to swift GUI and
check that the status-light next to &lt;strong>sim&lt;/strong> is lit and that swift is
able to detect your aircraft model&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/swift_FS9_connection_04.jpg" alt="image">&lt;/p></description></item><item><title>Docs: Crash reports / enable crash dumps</title><link>https://swift-project.github.io/docs/manual/swiftgeneral/crashreports/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://swift-project.github.io/docs/manual/swiftgeneral/crashreports/</guid><description>
&lt;p>swift can send crash reports to our server, so we can check what is
going wrong. However, this is also a privacy issue, as we need to send
detailed information.&lt;/p>
&lt;p>A crash report includes&lt;/p>
&lt;ul>
&lt;li>detailed information about your swift installation and runtime
environment&lt;/li>
&lt;li>your IP address&lt;/li>
&lt;li>information about your computer hardware&lt;/li>
&lt;/ul>
&lt;p>We will store the information until we have resolved the issue and then
delete it. You can help us a lot if you enable crash reports, but if you
have privacy concerns just disable it.&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/Settings_Advanced.png" alt="image">&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/Settings_crashreports.png" alt="image">&lt;/p>
&lt;p>Enable from the wizard's legal page is also possible:&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/crashrpt.png" alt="image">&lt;/p>
&lt;p>swift dump files are located here: &lt;code>findlogfiles&lt;/code>{.interpreted-text
role=&amp;ldquo;ref&amp;rdquo;}&lt;/p></description></item><item><title>Docs: Creating a Windows crash dump (swift hanging)</title><link>https://swift-project.github.io/docs/manual/swiftgeneral/createcrashdump/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://swift-project.github.io/docs/manual/swiftgeneral/createcrashdump/</guid><description>
&lt;p>::: {.important}
::: {.title}
Important
:::&lt;/p>
&lt;p>External links to 3rd party articles!
:::&lt;/p>
&lt;p>If you encounter swift hanging and NOT responding anymore you could
create a crashdump and make this available for the swift team.&lt;/p>
&lt;h1 id="crash-dump-files">Crash dump files&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>Here it is described how to do that, easy and simple: &amp;quot;look for
task manager&amp;quot;&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>see &lt;a href="https://kb.sitecore.net/articles/758511">https://kb.sitecore.net/articles/758511&lt;/a>&lt;/li>
&lt;li>or
&lt;a href="https://blogs.msdn.microsoft.com/debugger/2009/12/30/what-is-a-dump-and-how-do-i-create-one/">https://blogs.msdn.microsoft.com/debugger/2009/12/30/what-is-a-dump-and-how-do-i-create-one/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>as the dmp file is quite big please zip it (rar it, whatever) and
upload it to your shared drive (like Google drive, ...) and send us
the link&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Let us know you have that files: &lt;a href="https://discord.gg/R7Atd9A">https://discord.gg/R7Atd9A&lt;/a>
(DISCORD, 3rd party)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="hints">Hints&lt;/h1>
&lt;p>Hanging can have multiple reasons&lt;/p>
&lt;ul>
&lt;li>swift has opened a model window but you do not see this window
because it has opened up on a different screen.&lt;/li>
&lt;li>see
&lt;a href="https://www.technipages.com/bring-off-screen-window-back-onto-screen">https://www.technipages.com/bring-off-screen-window-back-onto-screen&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: Delete swift registry values (Windows only)</title><link>https://swift-project.github.io/docs/manual/swiftgeneral/registrydelete/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://swift-project.github.io/docs/manual/swiftgeneral/registrydelete/</guid><description>
&lt;p>The entries can be deleted from the launcher tool menu (since 0.9.4).&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/clearreg.png" alt="image">&lt;/p>
&lt;p>If you want to do that manually, see
&lt;a href="https://doc.qt.io/qt-5/qsettings.html#locations-where-application-settings-are-stored">https://doc.qt.io/qt-5/qsettings.html#locations-where-application-settings-are-stored&lt;/a>&lt;/p>
&lt;p>Background: swift saves screen geometry values (windows positions and
sizes) in the registry. If those are corrupt/invalid (new screen, new
screen size) it can cause swift to hang.&lt;/p>
&lt;hr>
&lt;p>From the above Qt source:
&lt;a href="https://doc.qt.io/qt-5/qsettings.html#locations-where-application-settings-are-stored">https://doc.qt.io/qt-5/qsettings.html#locations-where-application-settings-are-stored&lt;/a>&lt;/p>
&lt;p>::: {.important}
::: {.title}
Important
:::&lt;/p>
&lt;p>&lt;code>MySoft&lt;/code> and &lt;code>Star Runner&lt;/code> are example names from the Qt documentation,
would would find &lt;code>swift-project.org&lt;/code> and the swift application names
instead.
:::&lt;/p>
&lt;pre>&lt;code class="language-{.}" data-lang="{.}">On Unix systems, if the file format is NativeFormat, the following files are used by default:
$HOME/.config/MySoft/Star Runner.conf (Qt for Embedded Linux: $HOME/Settings/MySoft/Star Runner.conf)
$HOME/.config/MySoft.conf (Qt for Embedded Linux: $HOME/Settings/MySoft.conf)
for each directory &amp;lt;dir&amp;gt; in $XDG_CONFIG_DIRS: &amp;lt;dir&amp;gt;/MySoft/Star Runner.conf
for each directory &amp;lt;dir&amp;gt; in $XDG_CONFIG_DIRS: &amp;lt;dir&amp;gt;/MySoft.conf
Note: If XDG_CONFIG_DIRS is unset, the default value of /etc/xdg is used.
On macOS versions 10.2 and 10.3, these files are used by default:
$HOME/Library/Preferences/com.MySoft.Star Runner.plist
$HOME/Library/Preferences/com.MySoft.plist
/Library/Preferences/com.MySoft.Star Runner.plist
/Library/Preferences/com.MySoft.plist
On Windows, NativeFormat settings are stored in the following registry paths:
HKEY_CURRENT_USER\Software\MySoft\Star Runner
HKEY_CURRENT_USER\Software\MySoft\OrganizationDefaults
HKEY_LOCAL_MACHINE\Software\MySoft\Star Runner
HKEY_LOCAL_MACHINE\Software\MySoft\OrganizationDefaults
Note: On Windows, for 32-bit programs running in WOW64 mode, settings are stored in the following registry path: HKEY_LOCAL_MACHINE\Software\WOW6432node.
If the file format is NativeFormat, this is &amp;quot;Settings/MySoft/Star Runner.conf&amp;quot; in the application's home directory.
If the file format is IniFormat, the following files are used on Unix, macOS, and iOS:
$HOME/.config/MySoft/Star Runner.ini (Qt for Embedded Linux: $HOME/Settings/MySoft/Star Runner.ini)
$HOME/.config/MySoft.ini (Qt for Embedded Linux: $HOME/Settings/MySoft.ini)
for each directory &amp;lt;dir&amp;gt; in $XDG_CONFIG_DIRS: &amp;lt;dir&amp;gt;/MySoft/Star Runner.ini
for each directory &amp;lt;dir&amp;gt; in $XDG_CONFIG_DIRS: &amp;lt;dir&amp;gt;/MySoft.ini
Note: If XDG_CONFIG_DIRS is unset, the default value of /etc/xdg is used.
On Windows, the following files are used:
FOLDERID_RoamingAppData\MySoft\Star Runner.ini
FOLDERID_RoamingAppData\MySoft.ini
FOLDERID_ProgramData\MySoft\Star Runner.ini
FOLDERID_ProgramData\MySoft.ini
&lt;/code>&lt;/pre></description></item><item><title>Docs: dot-commands (.commands), hide dot command tooltip</title><link>https://swift-project.github.io/docs/manual/swiftgeneral/dotcommands/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://swift-project.github.io/docs/manual/swiftgeneral/dotcommands/</guid><description>
&lt;p>swift allows to control several features via &amp;quot;dot commands&amp;quot; like
&lt;code>.msg .drv&lt;/code>. The easiest way to get an overview of all commands is using
the tooltip as shown&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/dot_commands_tooltip.png" alt="image">&lt;/p>
&lt;p>If you dislike the large tooltip showing all the time you can disable it
by typing &lt;code>.tooltip&lt;/code> (toggles tooltip help on/off)&lt;/p></description></item><item><title>Docs: Example: Tracing if aircraft should be on ground</title><link>https://swift-project.github.io/docs/manual/swiftgeneral/tracinginterpolationonground/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://swift-project.github.io/docs/manual/swiftgeneral/tracinginterpolationonground/</guid><description>
&lt;p>If you see another aircraft floating or below ground, this can have
multiple reasons. It might make sense to trace the interpolation to see
if &lt;em>swift&lt;/em> &amp;quot;thinks&amp;quot; the plane should be on ground.&lt;/p>
&lt;p>Upfront:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>aircraft too high or too low is caused by scenery offsets and/or
missing/wrong vertical offsets (aka CG), see
&lt;code>ongroundscenarios&lt;/code>{.interpreted-text role=&amp;ldquo;ref&amp;rdquo;}&lt;/p>
&lt;/li>
&lt;li>
&lt;p>typical causes may include&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>missing CG/offset, see &lt;code>xplanecg&lt;/code>{.interpreted-text
role=&amp;ldquo;ref&amp;rdquo;}&lt;/li>
&lt;li>wrong XPlane elevation&lt;/li>
&lt;li>missing FSX terrain probe, see &lt;code>fsxprobe&lt;/code>{.interpreted-text
role=&amp;ldquo;ref&amp;rdquo;}&lt;/li>
&lt;li>wrong gnd. flag from other party&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;p>So checking floating/hovering means to check&lt;/p>
&lt;ol>
&lt;li>the gnd. flag&lt;/li>
&lt;li>the offset/CG&lt;/li>
&lt;li>the elevation&lt;/li>
&lt;/ol>
&lt;p>You can debug the issue in two ways:&lt;/p>
&lt;ol>
&lt;li>&amp;quot;Live&amp;quot; as described below, using the interpolation log. display&lt;/li>
&lt;li>or recorded as described in &lt;code>tracinginterpolation&lt;/code>{.interpreted-text
role=&amp;ldquo;ref&amp;rdquo;} -&amp;gt; &amp;quot;Full HTML log.&amp;quot;&lt;/li>
&lt;/ol>
&lt;h1 id="understanding-the-ground-flag">Understanding the ground flag&lt;/h1>
&lt;ul>
&lt;li>if other aircraft send aircraft parts with a ground flag or a gnd.
flag we know the aircraft should be on ground&lt;/li>
&lt;li>in all other cases (no gnd. flag) we are guessing if the aircraft is
supposed to be on ground.&lt;/li>
&lt;/ul>
&lt;h1 id="starting-the-log-display">Starting the log. display&lt;/h1>
&lt;p>Use &lt;code>.drv intdisplay&lt;/code> to launch the window. See Interpolation log.
display window for details.&lt;/p>
&lt;ol>
&lt;li>Checking gnd. situation (log. display)
=========================================&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>select the aircraft you want to check&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="http://img.swift-project.org/interpol_ex1.png" alt="image">&lt;/p>
&lt;ul>
&lt;li>you can check the input situations from the network&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="http://img.swift-project.org/interpol_ex2.png" alt="image">&lt;/p>
&lt;ul>
&lt;li>unter interpolation you can see the interpolated situation for your
simulator&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="http://img.swift-project.org/interpol_ex3.png" alt="image">&lt;/p>
&lt;ul>
&lt;li>to refresh press&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="http://img.swift-project.org/interpol_ex4.png" alt="image">&lt;/p>
&lt;ul>
&lt;li>note that the marked text says it is on ground&lt;/li>
&lt;li>you could also check the loopback situation, which is the last
situation we received from the simulator for that aircraft&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="http://img.swift-project.org/interpol_ex5.png" alt="image">&lt;/p>
&lt;ol start="2">
&lt;li>Checking the CG (aka vertical offset)
========================================&lt;/li>
&lt;/ol>
&lt;p>You can check the CG in two ways:&lt;/p>
&lt;ol>
&lt;li>in the interpolation log. display&lt;/li>
&lt;li>or in the &amp;quot;rendered&amp;quot; aircraft model view.&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>interpolation log. display&lt;/strong>&lt;/p>
&lt;p>In the interpolation tab you can see CG as it is &amp;quot;really&amp;quot; used for the
interpolated situation&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/interpol_ex6.png" alt="image">&lt;/p>
&lt;p>You can also check if the simulator CG is available, which is available
in the &amp;quot;Data flow&amp;quot; tab.&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/interpol_ex7.png" alt="image">&lt;/p>
&lt;p>Here you can see the CG (as stored in the DB) and if an aircraft has
parts (which means a ground flag is sent on VATSIM).&lt;/p>
&lt;p>&lt;strong>Rendered aircraft view&lt;/strong>&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/interpol_ex8.png" alt="image">&lt;/p>
&lt;p>&lt;code>null&lt;/code> values mean the vertical offset/CG is not available.&lt;/p>
&lt;ol>
&lt;li>do not confuse [null]{.title-ref} and zero &amp;quot;0&amp;quot;. [null]{.title-ref}
means value is not available, while &amp;quot;0&amp;quot; means the values is
available.&lt;/li>
&lt;li>some aircraft have 0 (zero) based offsets (so 0 can be a correct
value)&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="http://img.swift-project.org/interpol_ex9.png" alt="image">&lt;/p>
&lt;ol start="3">
&lt;li>checking the elevation&lt;/li>
&lt;/ol>
&lt;p>::: {.important}
::: {.title}
Important
:::&lt;/p>
&lt;p>For performance reasons we do not query elevations all the time
:::&lt;/p>
&lt;ul>
&lt;li>you can set coordinates (e.g. for your own aircraft) and test if the
requested elevation is available (means the probe works)&lt;/li>
&lt;li>you can also check the elevation history and see if there are
incoming elevation values. Again: please understand we only query
elevations for aircraft supposed to be &amp;quot;near ground&amp;quot;.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="http://img.swift-project.org/interpol_ex10.png" alt="image">&lt;/p></description></item><item><title>Docs: Find cache and settings files (where swift stores its data)</title><link>https://swift-project.github.io/docs/manual/swiftgeneral/findcachefiles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://swift-project.github.io/docs/manual/swiftgeneral/findcachefiles/</guid><description>
&lt;p>You can find the settings and cache files from the swift &lt;code>File&lt;/code> menu&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/filemenu.png" alt="image">&lt;/p>
&lt;p>The path is something like here:&lt;/p>
&lt;ul>
&lt;li>&lt;code>C:\Users\JoeDoe\AppData\Local\org.swift-project&lt;/code>&lt;/li>
&lt;li>If you want to backup all your swift data then backup this directory
(backup swift).&lt;/li>
&lt;li>Then some &amp;quot;magic name&amp;quot; representing your swift installation, like
&lt;code>H%3A%2FProjects%2FQtBuilds%2Fbuild-swift-Desktop_Qt_5_11_1_MSVC2017_64bit2-Debug%2Fout%2Fdebug%2Fbin&lt;/code> +
&lt;code>settings&lt;/code> or &lt;code>data&lt;/code> (caches)&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="http://img.swift-project.org/Plenty_swift_directories.png" alt="image">&lt;/p>
&lt;ul>
&lt;li>Each installation of swift has its own data data. So you can run as
many swift installations as you like. If you look at the directory
screenshot, you can see that there is &lt;strong>one swift data directory as
per swift installation.&lt;/strong>&lt;/li>
&lt;li>If you want to temp. reset to default settings, you can just rename
the directory to a new name
&lt;code>..._MSVC2017_64bit2-Debug%2Fout%2Fdebug%2Fbin.bak&lt;/code>, note the
[.bak]{.title-ref} at the end. With the next start &lt;em>swift&lt;/em> creates a
new directory with default settings/data. By renaming the
[bak]{.title-ref} file as it was, you will get the settings/data
back.&lt;/li>
&lt;li>swift versions are distinguished by their corresponding install
directory. So if you override an existing installation (same
directory), it will use the same data. If you install to another
place, it will use another data directory.&lt;/li>
&lt;li>If you need to copy data among multiple swift installations you can
use the wizard, see &lt;code>copyswiftdata&lt;/code>{.interpreted-text role=&amp;ldquo;ref&amp;rdquo;}&lt;/li>
&lt;li>See also: &lt;code>findlogfiles&lt;/code>{.interpreted-text role=&amp;ldquo;ref&amp;rdquo;}&lt;/li>
&lt;li>To reset the screen size, see also &lt;code>resetscreen&lt;/code>{.interpreted-text
role=&amp;ldquo;ref&amp;rdquo;}&lt;/li>
&lt;/ul>
&lt;h1 id="windows-registry-windows-only">Windows Registry (Windows only)&lt;/h1>
&lt;p>Under Windows &lt;em>swift&lt;/em> windows geometry data are stored in the registry,
see also &lt;code>resetscreen&lt;/code>{.interpreted-text role=&amp;ldquo;ref&amp;rdquo;} .&lt;/p>
&lt;ul>
&lt;li>&lt;code>HKEY_CURRENT_USER\Software\swift-project.org&lt;/code>&lt;/li>
&lt;li>&lt;code>HKEY_LOCAL_MACHINE\Software\swift-project.org&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>On other OS you can find the corresponding data here:
&lt;a href="https://doc.qt.io/qt-5/qsettings.html#platform-specific-notes">https://doc.qt.io/qt-5/qsettings.html#platform-specific-notes&lt;/a>&lt;/p></description></item><item><title>Docs: Find swift log files, crashdump files, interpolation log. files</title><link>https://swift-project.github.io/docs/manual/swiftgeneral/findlogfiles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://swift-project.github.io/docs/manual/swiftgeneral/findlogfiles/</guid><description>
&lt;h1 id="find-the-log-files">Find the log files&lt;/h1>
&lt;p>The easiest way to find the swift log files is from the file menu:&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/swift_log_directory.png" alt="image">&lt;/p>
&lt;p>The path is something like here:&lt;/p>
&lt;ul>
&lt;li>&lt;code>C:\Users\JoeDoe\AppData\Local\org.swift-project&lt;/code>&lt;/li>
&lt;li>Then some magic name representing your swift version, like
&lt;code>H%3A%2FProjects%2FQtBuilds%2Fbuild-swift-Desktop_Qt_5_11_1_MSVC2017_64bit2-Debug%2Fout%2Fdebug%2Fbin\` + :code:`logs&lt;/code>&lt;/li>
&lt;li>See also: &lt;code>findcachefiles&lt;/code>{.interpreted-text role=&amp;ldquo;ref&amp;rdquo;}&lt;/li>
&lt;/ul>
&lt;p>On MacOS, the Path is :code:'~/Library/Application
Support/org.swift-project'&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/FindLogsMacOS.png" alt="image">&lt;/p>
&lt;h1 id="find-files-in-launcher">Find files in launcher&lt;/h1>
&lt;p>In the launcher you can just go to [TOOLS]{.title-ref} and open the
directory there&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/launcherlog.png" alt="image">&lt;/p>
&lt;h1 id="find-the-crashpad-aka-crash-dump-files">Find the crashpad (aka crash dump) files&lt;/h1>
&lt;p>&lt;img src="http://img.swift-project.org/crashdumpdir.png" alt="image">&lt;/p>
&lt;p>The crashpad files are located next to the log directory, dmp are most
useful file types. See also &lt;code>crashreports&lt;/code>{.interpreted-text role=&amp;ldquo;ref&amp;rdquo;}&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/dumps.png" alt="image">&lt;/p>
&lt;h1 id="interpolation-log-files">Interpolation log. files&lt;/h1>
&lt;p>Interpolation log. files from &lt;code>interpolationdisplay&lt;/code>{.interpreted-text
role=&amp;ldquo;ref&amp;rdquo;} can also be found in the log. directory, all files for one
timestamp belong to the same session. If you want to UPLOAD those files,
zip them together in one archive.&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/interpolationlog.png" alt="image">&lt;/p></description></item><item><title>Docs: Find swift stylesheet files / find qss files</title><link>https://swift-project.github.io/docs/manual/swiftgeneral/findqss/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://swift-project.github.io/docs/manual/swiftgeneral/findqss/</guid><description>
&lt;p>::: {.important}
::: {.title}
Important
:::&lt;/p>
&lt;p>Those files are overridden with any update of swift, so you would need
to backup your changes
:::&lt;/p>
&lt;p>The &lt;em>swift&lt;/em> stylesheet files (aka &lt;em>swift&lt;/em> &lt;code>qss&lt;/code> files) sever the same
purpose as &lt;a href="https://de.wikipedia.org/wiki/Cascading_Style_Sheets">css
files&lt;/a> for HTML.
If you want to change the appearance of &lt;em>swift&lt;/em> you could change those
files. See also &lt;code>thirdparty&lt;/code>{.interpreted-text role=&amp;ldquo;ref&amp;rdquo;} .&lt;/p>
&lt;p>The &lt;code>qss&lt;/code> files are located in the swift install directory in the qss
subfolder&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/qssfolder.png" alt="image">&lt;/p></description></item><item><title>Docs: FSX/P3D SimConnect\_AICreateNonATCAircraft fails, models are not rendered</title><link>https://swift-project.github.io/docs/manual/swiftgeneral/fsxaimodel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://swift-project.github.io/docs/manual/swiftgeneral/fsxaimodel/</guid><description>
&lt;p>&lt;code>SimConnect&lt;/code> (communication between &lt;em>swift&lt;/em> and FSX/P3D) knows two ways
to add an aircraft, see &lt;a href="https://www.prepar3d.com/SDKv4/sdk/simconnect_api/references/simobject_functions.html#SimConnect_AICreateNonATCAircraft">P3D
docu&lt;/a>.&lt;/p>
&lt;ul>
&lt;li>&lt;code>SimConnect_AICreateNonATCAircraft&lt;/code>: The
SimConnect_AICreateNonATCAircraft function is used to create an
aircraft that is not flying under ATC control (so is typically
flying under VFR rules).&lt;/li>
&lt;li>&lt;code>SimConnect_AICreateSimulatedObject&lt;/code>: The
SimConnect_AICreateSimulatedObject function is used to create AI
controlled objects other than aircraft&lt;/li>
&lt;/ul>
&lt;p>The normal way to create our aircraft is via
&lt;code>SimConnect_AICreateNonATCAircraft&lt;/code> and works by far for the most AI
aircraft. However, some helicopters etc. can only be added as
&lt;code>SimConnect_AICreateSimulatedObject&lt;/code>.&lt;/p>
&lt;p>Unfortunately this varies over the version (so it might work as
&amp;quot;NonATC&amp;quot; for P3D, but fails for FSX. So we use trial and error here,
if the model fails the first time with &amp;quot;NoATC&amp;quot;, we use &amp;quot;Simulated
object&amp;quot;. This was not worth mentioning it if both version would behave
the same.&lt;/p>
&lt;ul>
&lt;li>But aircraft added as &amp;quot;NoATC&amp;quot; &lt;strong>will not show in the aircraft view
menu,&lt;/strong> so you cannot follow those.&lt;/li>
&lt;li>Also aircraft parts cannot be set on those.&lt;/li>
&lt;/ul>
&lt;p>As a result some people do not like to use
[SimConnect_AICreateSimulatedObject]{.title-ref}. You can control that
by the simulator settings.&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/SimulatedObject.png" alt="image">&lt;/p>
&lt;p>We recommend:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>keep that off until you see that issue&lt;/p>
&lt;/li>
&lt;li>
&lt;p>then you have two options&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>enable it and use such aircraft via
&lt;code>SimConnect_AICreateSimulatedObject&lt;/code>, but not seeing them in
the menu.&lt;/li>
&lt;li>replace them in the model set by AI aircraft which work.&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: Interpolation examples (wrong parts etc.)</title><link>https://swift-project.github.io/docs/manual/swiftgeneral/interpolationexamples/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://swift-project.github.io/docs/manual/swiftgeneral/interpolationexamples/</guid><description>
&lt;p>Although the other client supports &amp;quot;parts&amp;quot;, if does NOT send gear
down, only &amp;quot;on ground&amp;quot;.&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/interpol_ex11.png" alt="image">&lt;/p>
&lt;p>Here with manually overridden &amp;quot;GEAR DOWN&amp;quot; fron internals page
(&lt;code>tracingparts&lt;/code>{.interpreted-text role=&amp;ldquo;ref&amp;rdquo;} ).&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/overwritegear.png" alt="image">&lt;/p>
&lt;p>A client sending gnd on/off causing an oscillating up/down aircraft&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/oscillating.png" alt="image">&lt;/p></description></item><item><title>Docs: Interpolation log. display window</title><link>https://swift-project.github.io/docs/manual/swiftgeneral/interpolationdisplay/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://swift-project.github.io/docs/manual/swiftgeneral/interpolationdisplay/</guid><description>
&lt;p>The interpolation log. display allows to trace interpolation, checking
elevations, inbound parts and situations. It is most likely the easiest
was to trace interpolations. See also
&lt;code>interpolationexamples&lt;/code>{.interpreted-text role=&amp;ldquo;ref&amp;rdquo;} .&lt;/p>
&lt;p>Interpolation log. files are here: &lt;code>findlogfiles&lt;/code>{.interpreted-text
role=&amp;ldquo;ref&amp;rdquo;} -&amp;gt; Interpolation log. files&lt;/p>
&lt;ul>
&lt;li>Use &lt;code>.drv intdisplay&lt;/code> to launch the window&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="http://img.swift-project.org/Interpolation_log_display.png" alt="image">&lt;/p>
&lt;ul>
&lt;li>You can start logging by entering a callsign. This is the same as
starting logging from interpolation setup or via dot command, only
easier.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="http://img.swift-project.org/LogDisplay_callsign.png" alt="image">&lt;/p>
&lt;ul>
&lt;li>You can also request the scenery ground elevation from the
simulator.&lt;/li>
&lt;li>On the &amp;quot;inbound page&amp;quot; you are seeing the incoming situations and
parts from the network&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="http://img.swift-project.org/LogDisplay_inbound_situations.png" alt="image">&lt;/p>
&lt;ul>
&lt;li>Especially the altitude information and the used elevation is a
useful information there&lt;/li>
&lt;li>The calculate aircraft change states can be checked from the next
page&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="http://img.swift-project.org/LogDisplay_Changes.png" alt="image">&lt;/p>
&lt;ul>
&lt;li>On the &amp;quot;interpolation page&amp;quot; you can check the latest interpolation
or inject a scenery ground elevation for testing&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="http://img.swift-project.org/LogDisplay_interpolation.png" alt="image">&lt;/p>
&lt;h1 id="examples">Examples&lt;/h1>
&lt;p>Other side sending no gnd. flag, no gear .&amp;hellip;.&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/nogear.png" alt="image">&lt;/p>
&lt;p>now the other side updating gear and gnd. and sending some lights&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/nowgear.png" alt="image">&lt;/p></description></item><item><title>Docs: Mapping, matching and model set explained (theory and concepts)</title><link>https://swift-project.github.io/docs/manual/swiftgeneral/mm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://swift-project.github.io/docs/manual/swiftgeneral/mm/</guid><description>
&lt;h1 id="own-stored-models">Own stored models&lt;/h1>
&lt;p>If you run your simulator (XPlane, P3D, ...) you will install aircraft
models to display other pilots. In XPlane those are the BlueBell or XCSL
models, in P3D/FSX the FLAI or WoAI models for instance.&lt;/p>
&lt;p>Those models we call &lt;strong>&amp;quot;stored own models&amp;quot;&lt;/strong>, and they are located on
your hard drive. Such a directory structure may look like here
(FSX/XPlane examples):&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/dirstructure1.png" alt="image">&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/dirstructure2.png" alt="image">&lt;/p>
&lt;p>Now &lt;em>swift&lt;/em> wants to create a list of your installed models (to know
where and what they are). Normally we search the default directories,
but you can also specify the directories in the settings.&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/mm_dirs.png" alt="image">&lt;/p>
&lt;p>In the same step we will use the mapping data (explained below, metadata
from the DB) to further annotate your models (i.e. provide more
details). This list may look like here in the mapping tool. The ones
with the DB icon are those having a mapping in the DB, the other ones do
not.&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/mm1.png" alt="image">&lt;/p>
&lt;p>So in a nutshell:&lt;/p>
&lt;ul>
&lt;li>the &amp;quot;own models&amp;quot; are those you have installed plus the database
data if available.&lt;/li>
&lt;li>if you move your installed models, you need to redo this step.&lt;/li>
&lt;/ul>
&lt;h1 id="the-model-set">The model set&lt;/h1>
&lt;p>Now you need to tell &lt;em>swift&lt;/em> &lt;strong>which of the own models you want to use
for model matching&lt;/strong> (explained below). You simply pick those from &amp;quot;own
models&amp;quot; and move them into the model set.&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/mm2.png" alt="image">&lt;/p>
&lt;p>Those models you see here are the ones use for model matching. This
explains why your model set needs to be updated when you move your model
directories, see &lt;code>createms&lt;/code>{.interpreted-text role=&amp;ldquo;ref&amp;rdquo;} . Also
&lt;code>modelset&lt;/code>{.interpreted-text role=&amp;ldquo;ref&amp;rdquo;} .&lt;/p>
&lt;h1 id="matching">Matching&lt;/h1>
&lt;p>Matching is the process of finding the most suitable aircraft model of
your simulator to represent the other parties aircraft. Hint: If
everyone would have the same simulator with the same models installed,
matching was not needed.&lt;/p>
&lt;h1 id="mapping">Mapping&lt;/h1>
&lt;p>Mapping is the process of assigning
&lt;a href="https://en.wikipedia.org/wiki/Metadata">metadata&lt;/a> to a simulator model
(i.e. a model used for air traffic in your simulator). It describes the
model in a way it can be used for model matching.&lt;/p>
&lt;p>Why do we need such metadata (and not just use the data from the
aircraft files)?&lt;/p>
&lt;ul>
&lt;li>the data in the model files are a) often wrong, b) unstructured
(different attributes used) or c) missing. This is at least true for
P3D/FSX models&lt;/li>
&lt;li>not all attributes (e.g. colors) are covered,&lt;/li>
&lt;li>and we can not extend those metadata for future features&lt;/li>
&lt;li>different simulators (i.e. XPlane, P3D, .&amp;hellip;) use different
concepts, namings, etc., so we need to unify&lt;/li>
&lt;li>there is no existing concept to structure liveries&lt;/li>
&lt;li>and maintenace is a nightmare. If an airline changes its name, ICAO
code or such, we have to modify simulator files.&lt;/li>
&lt;/ul>
&lt;p>Mapping is &amp;quot;objective&amp;quot; and describes the model as what it is, never
ever change the description to just change what you want to see in your
simulator. A &amp;quot;DLH A320&amp;quot; is a &amp;quot;DLH A320&amp;quot; and not a &amp;quot;BAW A320&amp;quot;. So
do not change mapping data just to see that very plane in a scenario
where another pilot flies a &amp;quot;BAW A320&amp;quot;.&lt;/p>
&lt;h1 id="entities-of-a-mapping">Entities (of a mapping)&lt;/h1>
&lt;p>&lt;img src="http://img.swift-project.org/swift_mapping_entities.png" alt="image">&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Aircraft ICAO: Each simulator model has an aircraft ICAO code
assigned. An aircraft ICAO is not unique (means there are usually
multiple similar codes). Always use the most appropriate one
(normally decided by manufacturer).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Distributor: The package or software vendor the model belongs to.
Mostly needed for filtering and sorting, but also use for personal
preferences (i.e. the model of higher preference will be used first)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Livery: Describes how the model looks like. There are two types of
liveries:&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>Airline liveries: The livery belongs to an airline (identified
by an airline ICAO code). There are 1..n airline liveries per
airline. So it is important to understand an airline can more
than one livery.&lt;/li>
&lt;li>Color livery: Not all aircraft belong to an airline. Smaller
aircraft such as [C172]{.title-ref} will be described by it
primary (normally fuselage) and secondary color (normally
tail). There is a set of predefined color liveries and the
closest combination is to be used.&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;/li>
&lt;/ol>
&lt;p>Role of airline ICAO codes: #. Mainly used to identify or search the
airline livery #. swift distinguishes between real an virtual airlines
(VA). We use pseudo codes for virtual airlines (e.g. &lt;code>VDLH&lt;/code> for virtual
Lufthansa) #. Important: Airline ICAO codes are not unique, there can
be ambiguous codes.&lt;/p>
&lt;p>See also: &lt;code>maphints&lt;/code>{.interpreted-text role=&amp;ldquo;ref&amp;rdquo;} and
&lt;code>reverselookup&lt;/code>{.interpreted-text role=&amp;ldquo;ref&amp;rdquo;} .&lt;/p></description></item><item><title>Docs: Microphone not working on Windows</title><link>https://swift-project.github.io/docs/manual/swiftgeneral/nomiconwindows/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://swift-project.github.io/docs/manual/swiftgeneral/nomiconwindows/</guid><description>
&lt;ul>
&lt;li>&lt;em>swift&lt;/em> has no hot plug and play yet, the microphone needs to be
plugged in/on before starting &lt;em>swift&lt;/em>&lt;/li>
&lt;li>In newer Windows versions you need to allow &lt;em>swift&lt;/em> to use your
microphone&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="http://img.swift-project.org/win1.png" alt="image">&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/win2.png" alt="image">&lt;/p>
&lt;ul>
&lt;li>Then you will see will see &lt;em>swift&lt;/em> enabled to use the Microphone&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="http://img.swift-project.org/win3.png" alt="image">&lt;/p></description></item><item><title>Docs: Model / aircraft not rendered (possible reasons and solutions)</title><link>https://swift-project.github.io/docs/manual/swiftgeneral/notrendered/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://swift-project.github.io/docs/manual/swiftgeneral/notrendered/</guid><description>
&lt;h1 id="when-does-it-happen">When does it happen?&lt;/h1>
&lt;ol>
&lt;li>&lt;em>swift&lt;/em> receives aircraft information over the network&lt;/li>
&lt;li>then it tries to find the most suitable model in the model set. This
is called model matching. You can check model matching, see
&lt;code>matchmsg&lt;/code>{.interpreted-text role=&amp;ldquo;ref&amp;rdquo;} .&lt;/li>
&lt;li>next &lt;em>swift&lt;/em> sends the found model to the simulator. Here something
goes wrong and the model &lt;strong>is not rendered&lt;/strong>, You can enable model
set validation to check the set each time swift starts, see
&lt;code>modelsetvalidation&lt;/code>{.interpreted-text role=&amp;ldquo;ref&amp;rdquo;} .&lt;/li>
&lt;/ol>
&lt;h1 id="what-is-the-problem">What is the problem?&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>All aircraft are not rendered. Something is entirely wrong.&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>Have you moved your models (folder)? If so, reload the models
and re-create the model set, see &lt;code>createms&lt;/code>{.interpreted-text
role=&amp;ldquo;ref&amp;rdquo;} .&lt;/li>
&lt;li>For XP11, are your models located in the XPlane folder?&lt;/li>
&lt;li>did model validation pop-up? Then &lt;em>swift&lt;/em> already tells you
your model set is broken. You can run the validator in the
mapping tool or the &lt;em>swift&lt;/em> pilot client, see
&lt;code>modelsetvalidation&lt;/code>{.interpreted-text role=&amp;ldquo;ref&amp;rdquo;} .&lt;/li>
&lt;li>check the paths of your model set, make sure this path
represents where your models are, it looks like here&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="http://img.swift-project.org/mm3.png" alt="image">&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>Some aircraft are not rendered (very few)&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>Do you have models in the set which no longer exist?&lt;/li>
&lt;li>Another possible reasons: A single model is broken, you could
remove that ne from the model set.&lt;/li>
&lt;li>Have you disabled rendering from the model page?&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;h1 id="general-reasons-why-a-model-fails-to-be-rendered">General reasons why a model fails to be rendered&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>X-Plane's new Vulkan graphics engine is not supported yet&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>An aircraft is intentionally disabled. If you did dot disable it on
purpose, see below.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Check the log page to see if there are errors&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Have you restricted range/number of aircraft? See
&lt;code>aircraftrange&lt;/code>{.interpreted-text role=&amp;ldquo;ref&amp;rdquo;} for details&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Have you models in your (model) set for which no liveries/installed
models exist?&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>See &lt;code>modelsetvalidation&lt;/code>{.interpreted-text role=&amp;ldquo;ref&amp;rdquo;} .&lt;/li>
&lt;li>Model set rules, see &lt;code>createms&lt;/code>{.interpreted-text role=&amp;ldquo;ref&amp;rdquo;}&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;h1 id="xplane-specific">XPlane specific&lt;/h1>
&lt;ul>
&lt;li>Make sure &lt;strong>NO OTHER pilot client plugin is present&lt;/strong>&lt;/li>
&lt;li>XPlane models in model set, but not rendered. Solution: &lt;strong>CSL files
need to be inside the XPlane folder.&lt;/strong> Example of a working folder
structure:&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="http://img.swift-project.org/cslfiles.png" alt="image">&lt;/p>
&lt;ul>
&lt;li>If you have installed the vertical offsets, make sure you did not
end up with a cascaded folder structure. Make sure you only have one
&lt;code>xsb_aircraft.txt&lt;/code> per folder. ..&lt;/li>
&lt;/ul>
&lt;p>image:: &lt;a href="http://img.swift-project.org/xpdirstructure.png">http://img.swift-project.org/xpdirstructure.png&lt;/a>&lt;/p>
&lt;ul>
&lt;li>Technical reason: X-Plane plugin SDK: &lt;code>XPLMLoadObject&lt;/code> The path for
the object must be relative to the X-System base folder.
&lt;a href="https://developer.x-plane.com/sdk/XPLMScenery/#XPLMLoadObject">https://developer.x-plane.com/sdk/XPLMScenery/#XPLMLoadObject&lt;/a>&lt;/li>
&lt;li>Static libraries like Fruit Stand do not work with &lt;em>swift&lt;/em> The Fruit
Stand is not a CSL package, they are static scenery models, so that
won't work with a pilot client like swift.&lt;/li>
&lt;/ul>
&lt;h1 id="fsxp3d-specific">FSX/P3D specific&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>The aircraft model is broken. You can test that by&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>&lt;code>modelsetvalidation&lt;/code>{.interpreted-text role=&amp;ldquo;ref&amp;rdquo;}&lt;/li>
&lt;li>assigning that same model to another callsign, if this fails
it is likely to be broken&lt;/li>
&lt;li>crosscheck by manually assigning another aircraft to the
originally failing one, That should work now.&lt;/li>
&lt;li>Possible solution: Manually assign a different model and
remove the broken model from the model set.&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>&lt;code>fsxaimodel&lt;/code>{.interpreted-text role=&amp;ldquo;ref&amp;rdquo;}&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The other side sends a position with a considerable negative offset
(below ground)&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>You see a model failing that normally works&lt;/li>
&lt;li>You can try to enable the selected aircraft or use re-enable&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="http://img.swift-project.org/Re-Enable_unrendered.png" alt="image">&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>You can find models removed by &lt;em>swift&lt;/em> (because they cannot be
rendered) in the mapping tool workbench&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>See &lt;code>mttabs&lt;/code>{.interpreted-text role=&amp;ldquo;ref&amp;rdquo;} under workbench&lt;/li>
&lt;li>Show removed models in workbench&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="http://img.swift-project.org/Removed_models.png" alt="image">&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>Check the driver version for P3D (in &lt;em>swift&lt;/em>' s simulator settings)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Is the simulator running as ADMINISTRATOR, but &lt;em>swift&lt;/em> not? Or vice
versa.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="re-enable">Re-Enable&lt;/h1>
&lt;p>You can try to re-enable un-rendered aircraft and see if the issue is
gone.&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/Re-Enable_unrendered.png" alt="image">&lt;/p></description></item><item><title>Docs: Model mapping</title><link>https://swift-project.github.io/docs/manual/swiftgeneral/mapping/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://swift-project.github.io/docs/manual/swiftgeneral/mapping/</guid><description>
&lt;p>&lt;code>mm&lt;/code>{.interpreted-text role=&amp;ldquo;ref&amp;rdquo;}&lt;/p>
&lt;p>::: {.toctree caption=&amp;ldquo;Content in this chapter&amp;rdquo; glob=&amp;quot;&amp;quot;}
./*
:::&lt;/p></description></item><item><title>Docs: Model matching</title><link>https://swift-project.github.io/docs/manual/swiftgeneral/matching/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://swift-project.github.io/docs/manual/swiftgeneral/matching/</guid><description>
&lt;p>::: {.toctree caption=&amp;ldquo;Content in this chapter&amp;rdquo;}
matchmsg ms techdetails matchinghints matchreport reverselookup
tracingmatching whyb74f matchingresult
:::&lt;/p></description></item><item><title>Docs: Models (own installed models) and model set</title><link>https://swift-project.github.io/docs/manual/swiftgeneral/modelsandmodelset/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://swift-project.github.io/docs/manual/swiftgeneral/modelsandmodelset/</guid><description>
&lt;p>::: {.toctree caption=&amp;ldquo;Content in this chapter&amp;rdquo;}
exportmodelset addtoms createms examplemsbbxcsl modelsetandsettings
modelsetduplicates nodbdata testmodelset tuningset modelset
whentoupdatems xpmodeldirectories
:::&lt;/p></description></item><item><title>Docs: No notification sounds</title><link>https://swift-project.github.io/docs/manual/swiftgeneral/nonotification/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://swift-project.github.io/docs/manual/swiftgeneral/nonotification/</guid><description>
&lt;ul>
&lt;li>swift has no audio hot plug and play yet, audio device needs to be
&amp;quot;on&amp;quot; when swift is started&lt;/li>
&lt;li>Check that the notification sound is enabled in the settings&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="http://img.swift-project.org/Audio_settings.png" alt="image">&lt;/p>
&lt;ul>
&lt;li>Check the notification sound volume&lt;/li>
&lt;li>You can test each sound by check/uncheck the sound, that will play
it&lt;/li>
&lt;li>On Windows you can check if sound for &lt;em>swift&lt;/em> is enabled&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="http://img.swift-project.org/winaudio.png" alt="image">&lt;/p></description></item><item><title>Docs: No sound on macOS (loopback not working)</title><link>https://swift-project.github.io/docs/manual/swiftgeneral/macosnosound/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://swift-project.github.io/docs/manual/swiftgeneral/macosnosound/</guid><description>
&lt;p>Make sure you have the MIC (microphone) enabled for &lt;em>swift&lt;/em>.&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/macsound.png" alt="image">&lt;/p>
&lt;ul>
&lt;li>There is a bug currently being investigated.&lt;/li>
&lt;li>MacOSX seems to be very picky about app bundle info.plist. No matter
what we add to it, it just won&amp;rsquo;t work without any warning.&lt;/li>
&lt;li>Workaround: Open the swiftguistd application bundle content and drag
the internal binary into console. That should work&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="http://img.swift-project.org/workaround_mac1.png" alt="image">&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/workaround_mac2.png" alt="image">&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/workaround_mac3.png" alt="image">&lt;/p></description></item><item><title>Docs: Questions and answers (aka FAQs)</title><link>https://swift-project.github.io/docs/manual/swiftgeneral/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://swift-project.github.io/docs/manual/swiftgeneral/faq/</guid><description>
&lt;p>&lt;strong>pilot client&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&amp;quot;My hotkey PTT does not work&amp;quot;, see &lt;code>hotkeys&lt;/code>{.interpreted-text
role=&amp;ldquo;ref&amp;rdquo;}&lt;/li>
&lt;li>No sound/void on macOS: &lt;code>macosnosound&lt;/code>{.interpreted-text role=&amp;ldquo;ref&amp;rdquo;}&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>doing mappings&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>What is that &amp;quot;stash&amp;quot; in why do I need it? It is your workbench
doing mappings, you can mess around there before you publish models&lt;/li>
&lt;li>Doing mappings is complex! Yes, it takes a little getting used to.
But for each model/livery we only have to do it once, then everyone
else can use it. It is also more a power user feature, people just
flying swift will not need to do that. But we need more mappings for
testing now!&lt;/li>
&lt;li>How can I see my mappings? See [here &amp;lt;seemymapping&amp;gt;]{.title-ref}&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>other swift questions&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Do I need to add models before I can fly? Yes, you need to create a
model set before you can fly swift. This gives you full control
about which models you use.&lt;/li>
&lt;li>Could I use models not in the database yet in my model set? You
could, but it is not recommended. Our goal is to have reliable data,
not fantasy ICAO codes or such.&lt;/li>
&lt;li>How can I find the log. and data directories: From the &amp;quot;File menu&amp;quot;&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="http://img.swift-project.org/swift_directories.png" alt="image">&lt;/p>
&lt;p>::: {.toctree caption=&amp;ldquo;Content in this chapter&amp;rdquo;}
atcfailedtoconnect choosecs restrictaircraft startmap copilot
nootherplanes notraffic modelsnotaccessible tempdisablemodel xpgear
:::&lt;/p></description></item><item><title>Docs: Save Window</title><link>https://swift-project.github.io/docs/manual/swiftgeneral/savewindow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://swift-project.github.io/docs/manual/swiftgeneral/savewindow/</guid><description>
&lt;p>See also &lt;code>swiftuiconcepts&lt;/code>{.interpreted-text role=&amp;ldquo;ref&amp;rdquo;}&lt;/p>
&lt;p>If a window is floating the state can be saved&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/windowstate.png" alt="image">&lt;/p>
&lt;p>Such a state can be later restored&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/windowstaterestore.png" alt="image">&lt;/p></description></item><item><title>Docs: swift and remote FS9</title><link>https://swift-project.github.io/docs/manual/swiftgeneral/fs9remote/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://swift-project.github.io/docs/manual/swiftgeneral/fs9remote/</guid><description>
&lt;p>swift over network with FS9&lt;/p>
&lt;p>External link: &lt;a href="http://757simulator.com/FS2004/swift.htm">http://757simulator.com/FS2004/swift.htm&lt;/a>&lt;/p></description></item><item><title>Docs: swift command line arguments</title><link>https://swift-project.github.io/docs/manual/swiftgeneral/swiftcmdargs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://swift-project.github.io/docs/manual/swiftgeneral/swiftcmdargs/</guid><description>
&lt;p>seel also &lt;code>swiftdevcmdargs&lt;/code>{.interpreted-text role=&amp;ldquo;ref&amp;rdquo;}&lt;/p>
&lt;h1 id="running-with-core">Running with core&lt;/h1>
&lt;ol>
&lt;li>Starting core on session bus: &lt;code>--dbus session&lt;/code>&lt;/li>
&lt;li>Client: &lt;code>--core coreexternalaudiogui --window normal --dbus session&lt;/code>&lt;/li>
&lt;/ol>
&lt;h1 id="launcher-display-cmd-args">Launcher display cmd. args&lt;/h1>
&lt;p>Just press &lt;code>shift&lt;/code> and the corresponding icon to display the command
line arguments instead of starting the application.&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/Shift_CMD_args.png" alt="image">&lt;/p>
&lt;h1 id="help">Help&lt;/h1>
&lt;p>Just use &lt;code>--help&lt;/code> to see a help screen. You can use &amp;quot;help&amp;quot; with all
executables, as launcher, core and client might have different
arguments.&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/help.png" alt="image">&lt;/p></description></item><item><title>Docs: swift crash after startup</title><link>https://swift-project.github.io/docs/manual/swiftgeneral/crashafterstartup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://swift-project.github.io/docs/manual/swiftgeneral/crashafterstartup/</guid><description>
&lt;p>::: {.important}
::: {.title}
Important
:::&lt;/p>
&lt;p>It is a good idea to enable crash dumps,
&lt;code>crashreports&lt;/code>{.interpreted-text role=&amp;ldquo;ref&amp;rdquo;}
:::&lt;/p>
&lt;h1 id="joystick">Joystick&lt;/h1>
&lt;p>We have had cases where loading joystick data caused &lt;em>swift&lt;/em> to crash.
Reason unknown so far. Solution: Try to unplug the joystick and see if
it works now&lt;/p>
&lt;h1 id="window-locations">Window locations&lt;/h1>
&lt;p>Changes in your UI setup (new graphics card) can cause the stored
windows sizes etc. being invalid. Delete those data as described here:
&lt;code>resetscreen&lt;/code>{.interpreted-text role=&amp;ldquo;ref&amp;rdquo;} .&lt;/p></description></item><item><title>Docs: swift developer command line arguments</title><link>https://swift-project.github.io/docs/manual/swiftgeneral/swiftdevcmdargs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://swift-project.github.io/docs/manual/swiftgeneral/swiftdevcmdargs/</guid><description>
&lt;p>see also &lt;code>swiftcmdargs&lt;/code>{.interpreted-text role=&amp;ldquo;ref&amp;rdquo;}&lt;/p>
&lt;h1 id="help">Help&lt;/h1>
&lt;p>Just use &lt;code>--help&lt;/code> to see a help screen. You can use &amp;quot;help&amp;quot; with all
executables, as launcher, core and client might have different
arguments.&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/help.png" alt="image">&lt;/p>
&lt;h1 id="testing-as-developer">Testing as developer&lt;/h1>
&lt;p>Normally done like this:
&lt;code>--dev --bootstrapurl https://datastore.swift-project.org/shared/&lt;/code>&lt;/p>
&lt;ol>
&lt;li>Marking as dev. provides some extra functionality&lt;/li>
&lt;li>The bootstrap location can also be changed to a test server&lt;/li>
&lt;/ol>
&lt;p>Test the dump server: &lt;code>--testcrashpad&lt;/code>&lt;/p>
&lt;h1 id="installers">Installers&lt;/h1>
&lt;p>Installer cmd. line:
&lt;code>-i --bootstrapurl https://datastore.swift-project.org/shared/&lt;/code>&lt;/p>
&lt;ol>
&lt;li>bootstrap URL is mandatory&lt;/li>
&lt;li>use installer mode [-i]{.title-ref} to launch wizard&lt;/li>
&lt;/ol>
&lt;h1 id="testing-pilot-client-with-vatsim-live-servers">Testing pilot client with VATSIM live servers&lt;/h1>
&lt;p>::: {.note}
::: {.title}
Note
:::&lt;/p>
&lt;p>Installer versions are automatically enabled for VATSIM productive keys.
:::&lt;/p>
&lt;ol>
&lt;li>Testing interpolation / aircraft parts&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;ol>
&lt;li>Use swift as &amp;quot;out of the box&amp;quot;&lt;/li>
&lt;li>Any productive servers can be used&lt;/li>
&lt;li>Works with our without simulator attached&lt;/li>
&lt;li>Voice cannot be tested (no connection allowed)&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p># Testing swift as we will ship it&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>Set client id and key, cmd will look something like this:&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;pre>&lt;code class="language-{.}" data-lang="{.}">&lt;/code>&lt;/pre>&lt;p>--serverType vatsim --clientIdAndKey 0xFOO:BAR --dev --bootstrapurl
&lt;a href="https://datastore.swift-project.org/shared/">https://datastore.swift-project.org/shared/&lt;/a>`&lt;/p></description></item><item><title>Docs: swift not starting, ASSERT after start</title><link>https://swift-project.github.io/docs/manual/swiftgeneral/notstarting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://swift-project.github.io/docs/manual/swiftgeneral/notstarting/</guid><description>
&lt;ul>
&lt;li>Problem: ASSERT after starting &lt;em>swift&lt;/em>&lt;/li>
&lt;/ul>
&lt;p>Solution: &lt;code>resetscreen&lt;/code>{.interpreted-text role=&amp;ldquo;ref&amp;rdquo;}&lt;/p></description></item><item><title>Docs: swift UI concepts (multiple windows, floating windows, resize views)</title><link>https://swift-project.github.io/docs/manual/swiftgeneral/swiftuiconcepts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://swift-project.github.io/docs/manual/swiftgeneral/swiftuiconcepts/</guid><description>
&lt;h1 id="windows">Windows&lt;/h1>
&lt;p>&lt;em>swift&lt;/em> can be run as single window application (with tab bars) or the
windows can be detached (double click on its tab or use the context
menu).&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/swift_pilot_client_-_single_window.png" alt="image">&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/swift_pilot_client_-_multi_windows.png" alt="image">&lt;/p>
&lt;p>Detaching of Windows can be locked. Note that 3 buttons are yellow
because the window is either floating or active.&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/Lock_tab_bar.png" alt="image">&lt;/p>
&lt;h1 id="save-and-restore-window-states">Save and restore window states&lt;/h1>
&lt;p>See &lt;code>savewindow&lt;/code>{.interpreted-text role=&amp;ldquo;ref&amp;rdquo;}&lt;/p>
&lt;h1 id="reset-screen-size">Reset screen size&lt;/h1>
&lt;p>&lt;code>resetscreen&lt;/code>{.interpreted-text role=&amp;ldquo;ref&amp;rdquo;}&lt;/p>
&lt;h1 id="use-tooltips">Use tooltips&lt;/h1>
&lt;p>In many cases further information can be obtained by using the tooltips.
Just place your pointer of a field or label.&lt;/p>
&lt;h1 id="font-size">Font size&lt;/h1>
&lt;p>Use &lt;code>CTRL +&lt;/code>, &lt;code>CTRL -&lt;/code> or &lt;code>CTRL 0&lt;/code> to increase, decrease or reset font
size.&lt;/p>
&lt;p>Resize views&lt;/p>
&lt;ul>
&lt;li>Use &lt;code>CTRL R&lt;/code>&lt;/li>
&lt;li>Use the resize features from the context menu, try what works best
for you&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="http://img.swift-project.org/resize.png" alt="image">&lt;/p></description></item><item><title>Docs: The model browser (testing models offline)</title><link>https://swift-project.github.io/docs/manual/swiftgeneral/modelbrowser/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://swift-project.github.io/docs/manual/swiftgeneral/modelbrowser/</guid><description>
&lt;p>The model browser allows you to test AI/CSL/XCSL models.&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/modelbrowser.png" alt="image">&lt;/p>
&lt;p>To use the browser * connect with the simulator * but do not connect
with the network (VATSIM; ...)&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/modelbrowser1.png" alt="image">&lt;/p>
&lt;p>Now you can place any model in any location and test parts, lights,
.&amp;hellip;&lt;/p></description></item><item><title>Docs: Tracing and testing aircraft parts</title><link>https://swift-project.github.io/docs/manual/swiftgeneral/tracingparts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://swift-project.github.io/docs/manual/swiftgeneral/tracingparts/</guid><description>
&lt;p>To trace aircraft parts you have multiple options:&lt;/p>
&lt;ul>
&lt;li>Use the interpolation &amp;quot;parts&amp;quot; tab, there you can monitor aircraft
parts.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="http://img.swift-project.org/Interpolation_parts_log.png" alt="image">&lt;/p>
&lt;ul>
&lt;li>Use the internals page. You can override the values by using the
[send]{.title-ref} functions. You can &amp;quot;fake&amp;quot; received parts by
just setting the GUI values and &amp;quot;Send GUI&amp;quot;. This generates a
packet like it was received from another swift client.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="http://img.swift-project.org/Aircraft_parts_internals.png" alt="image">&lt;/p>
&lt;ul>
&lt;li>You can also use the &lt;code>interpolationdisplay&lt;/code>{.interpreted-text
role=&amp;ldquo;ref&amp;rdquo;}&lt;/li>
&lt;li>or if you just want to test offline &lt;code>modelbrowser&lt;/code>{.interpreted-text
role=&amp;ldquo;ref&amp;rdquo;}&lt;/li>
&lt;li>See also &lt;code>interpolationexamples&lt;/code>{.interpreted-text role=&amp;ldquo;ref&amp;rdquo;}&lt;/li>
&lt;/ul></description></item><item><title>Docs: Tracing interpolation</title><link>https://swift-project.github.io/docs/manual/swiftgeneral/tracinginterpolation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://swift-project.github.io/docs/manual/swiftgeneral/tracinginterpolation/</guid><description>
&lt;p>See also &lt;code>tracingmatching&lt;/code>{.interpreted-text role=&amp;ldquo;ref&amp;rdquo;} and
&lt;code>tracingnetwork&lt;/code>{.interpreted-text role=&amp;ldquo;ref&amp;rdquo;}&lt;/p>
&lt;p>::: {.important}
::: {.title}
Important
:::&lt;/p>
&lt;p>Use the &amp;quot;dot&amp;quot; command help to see which commands can be used to enable
interpolation logging
:::&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/dot_commands_tooltip.png" alt="image">&lt;/p>
&lt;h1 id="overview">Overview&lt;/h1>
&lt;p>There are 3 possibilities to get interpolation information:&lt;/p>
&lt;ul>
&lt;li>in an extra window of swift (since 0.8.4):
&lt;code>interpolationdisplay&lt;/code>{.interpreted-text role=&amp;ldquo;ref&amp;rdquo;}&lt;/li>
&lt;li>in the message window of XPlane/FSX/P3D. You can send the current
interpolated situation as message to the sim, which is useful if you
want so see it in the simulator together with the aircraft&lt;/li>
&lt;li>or saved into a log file in HTML format which can also be read by
spreadsheet programs. (HTML table will be created from that, which
also be imported by Excel and similar spreadsheet programs)&lt;/li>
&lt;/ul>
&lt;p>HINT: You can enable logging for 1..n aircraft, but only use ONE
aircraft if there is no special need&lt;/p>
&lt;h1 id="interpolation-log-display">Interpolation log display&lt;/h1>
&lt;p>The interpolation log. display allows to trace interpolation, checking
elevations, inbound parts and situations. It is most likely the easiest
was to trace interpolations.&lt;/p>
&lt;p>Use &lt;code>.drv intdisplay&lt;/code> to launch the window. See
&lt;code>interpolationdisplay&lt;/code>{.interpreted-text role=&amp;ldquo;ref&amp;rdquo;} for details.&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/Interpolation_log_display.png" alt="image">&lt;/p>
&lt;h1 id="full-html-log">Full HTML log&lt;/h1>
&lt;ul>
&lt;li>You can enable tracing via the dot command &lt;code>.drv logint CALLSIGN&lt;/code>.
Alternatively logging can be enabled (or checked if it is enabled)
in interpolation setup. You should see an info in the log./status
bar&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="http://img.swift-project.org/logmessage.png" alt="image">&lt;/p>
&lt;ul>
&lt;li>if you want to end the logging, you would type &lt;code>.drv logint write&lt;/code>,
this should show&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="http://img.swift-project.org/writeinterpolationlog.png" alt="image">&lt;/p>
&lt;ul>
&lt;li>the logging is very VERBOSE, so we recommend &lt;strong>ONLY to log one
callsign at a time&lt;/strong>&lt;/li>
&lt;li>do not log for too long, as said, the logs files get huge very
quickly&lt;/li>
&lt;li>you will find the situation and parts logs generated in the log
directory (they will be written if you type &lt;code>.drv logint write&lt;/code>)&lt;/li>
&lt;li>If you have no idea how to find the log directory, see
&lt;code>findlogfiles&lt;/code>{.interpreted-text role=&amp;ldquo;ref&amp;rdquo;}&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="http://img.swift-project.org/Interpolation_setup.png" alt="image">&lt;/p>
&lt;p>The complete log can be obtained as HTML from the &lt;em>Internals&lt;/em> page&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/Show_complete_log.png" alt="image">&lt;/p>
&lt;h1 id="testing-aircraft-parts">Testing aircraft parts&lt;/h1>
&lt;p>In interpolation setup (on the 2nd tab) you could check the aircraft
parts if needed.&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/Aircraft_parts_log.png" alt="image">&lt;/p>
&lt;p>For testing parts you can also use the &lt;em>Internals&lt;/em> page for sending
parts.&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/aircraftparts.png" alt="image">&lt;/p></description></item><item><title>Docs: Tracing network packets (FSD log) and network statistics</title><link>https://swift-project.github.io/docs/manual/swiftgeneral/tracingnetwork/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://swift-project.github.io/docs/manual/swiftgeneral/tracingnetwork/</guid><description>
&lt;p>&lt;img src="http://img.swift-project.org/tracingnetwork1.png" alt="image">&lt;/p>
&lt;h1 id="network-packets">Network packets&lt;/h1>
&lt;p>Network packets (FSD log) can be analyzed from the internals page. See
also &lt;code>tracinginterpolation&lt;/code>{.interpreted-text role=&amp;ldquo;ref&amp;rdquo;} and
&lt;code>tracingmatching&lt;/code>{.interpreted-text role=&amp;ldquo;ref&amp;rdquo;} . FSD docu:
&lt;a href="https://studentweb.uvic.ca/~norrisng/fsd-doc/">https://studentweb.uvic.ca/~norrisng/fsd-doc/&lt;/a>&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/FSD_log.png" alt="image">&lt;/p>
&lt;h1 id="network-statistics">Network statistics&lt;/h1>
&lt;p>Network statistics can be enabled from the internals page. Also a log
file is written to the log directory if enabled, see
&lt;code>findcachefiles&lt;/code>{.interpreted-text role=&amp;ldquo;ref&amp;rdquo;}&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/fsdstats.png" alt="image">&lt;/p></description></item><item><title>Docs: Tracing SimConnect</title><link>https://swift-project.github.io/docs/manual/swiftgeneral/tracingsimconnect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://swift-project.github.io/docs/manual/swiftgeneral/tracingsimconnect/</guid><description>
&lt;p>If you notice (permanent) problems with FSX/P3D you can enable
&lt;code>SimConnect&lt;/code> tracing. This will add further details to &lt;code>SimConnect&lt;/code>
exceptions as it will trace where a certain &lt;code>SimConnect&lt;/code> calls originate
from.&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/SimConnect_settings.png" alt="image">&lt;/p></description></item><item><title>Docs: Tweaking swift notification sounds</title><link>https://swift-project.github.io/docs/manual/swiftgeneral/notificationsounds/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://swift-project.github.io/docs/manual/swiftgeneral/notificationsounds/</guid><description>
&lt;p>&lt;em>swift&lt;/em> notification sounds can be found under your installation path
under sounds: &lt;code>swift-0.8.7-64bit\share\sounds&lt;/code>. Starting with &lt;em>swift&lt;/em>
0.9.1 you can have your own sounds directory and any file found there is
used instead of the &lt;em>swift&lt;/em> file&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/notificationpage.png" alt="image">&lt;/p>
&lt;ul>
&lt;li>the file names are self-explantory&lt;/li>
&lt;li>if you place the corresponding file in your directory you will hear
the &amp;quot;new sound&amp;quot; (restart required)&lt;/li>
&lt;li>You can test the sounds in the audio settings (if you select a
notification sound the sound will be played)&lt;/li>
&lt;li>to use a new file you need to restart &lt;em>swift&lt;/em>&lt;/li>
&lt;/ul>
&lt;h1 id="share-your-sound-files">Share your sound files&lt;/h1>
&lt;p>If you have cool sound notification files you can share them with other
users.&lt;/p>
&lt;ul>
&lt;li>the files have to be in &lt;code>.wav&lt;/code> format&lt;/li>
&lt;li>and &lt;strong>have to be copyright free so we can publish them here&lt;/strong>&lt;/li>
&lt;li>we need your CLA, see&lt;/li>
&lt;li>Upload your file&lt;/li>
&lt;li>all uploads without real name will be ignored (legal reasons)&lt;/li>
&lt;li>you can find shared files under &lt;code>thirdparty&lt;/code>{.interpreted-text
role=&amp;ldquo;ref&amp;rdquo;}&lt;/li>
&lt;/ul></description></item><item><title>Docs: Virtual 2nd screen on another device</title><link>https://swift-project.github.io/docs/manual/swiftgeneral/spacedesk/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://swift-project.github.io/docs/manual/swiftgeneral/spacedesk/</guid><description>
&lt;p>Many people claim you always have to switch between your flight
simulator and the Swift GUI window. I am now going to show you a way to
connect nearly any device as a second display to your PC to place the
GUI on it. Therefore, &lt;strong>Windows 7 or higher&lt;/strong> is requiered to be the OS
on the Computer whose screen should be extended and all devices have to
share the** same network** .&lt;/p>
&lt;p>&lt;strong>!Before we start be informed that spacedesk is still under
developement and in a Beta state. However, I have never made negative
experiences so far!&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>&lt;a href="https://www.spacedesk.net/">Download spacedesk&lt;/a>. As it is explained
on the website, the SPACEDESK DRIVER SOFTWARE for Windows PRIMARY PC
(server) has to be installed (as its name says) on the machine whose
screen you want to enlarge. The SPACEDESK VIEWER SOFTWARE for
SECONDARY Machine (client) is for any client, on which the screen
should be displayed (also available for iOS and Android).&lt;/li>
&lt;li>Open spacedesk on your primary machine. Klick the three dots and
make sure that the switch is set to &amp;quot;on&amp;quot;, otherwise the primary
machine will not be displayed.&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="http://img.swift-project.org/Spacedesk.jpg" alt="image">&lt;/p>
&lt;p>&lt;em>The following is not for iOS and Android app&lt;/em>&lt;/p>
&lt;ol start="3">
&lt;li>Open the spacedesk viewer on your client. If everything is set up
correctly, it should be displaying something like this:&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="http://img.swift-project.org/spacedesk_viewer.png" alt="image">&lt;/p>
&lt;p>If you see the message &amp;quot;Cannot Detect Primary Machine!&amp;quot;, you have
configured spacedesk wrong. Check, if spacedesk is really enabled on the
primary machine and if both clients share the same network. It might
also be, that a newer version has been released. In this case, download
the new versions and try again.&lt;/p>
&lt;ol start="4">
&lt;li>If you open Windows screen settings dialogue on the primary machine
(this can also be done in spacedesk under Display Settings) you can
edit position, orientation, resulution and zoom factor of the
screens.&lt;/li>
&lt;li>Now the second screen is treated as a physically connected screen
and can be used as such. Just pull the GUI or any program over to
the other screen.&lt;/li>
&lt;li>&lt;strong>OPTIONAL:&lt;/strong> I configured spacedesk a little further for my
personal preferences. All following steps are reffered to the
secondary machine spacedesk dialogue. First, I enabled Mouse and
Keyboard under the tab Functionality. This enables you to control
the primary machine with mouse and keyboard of the secondary
machine. Because I use a laptop with touchscreen functionality as
secondary device, I also activated Touchscreen (absolute). Under
Settings, I set hooks next to &amp;quot;Full screen upon Connect&amp;quot; as well
as &amp;quot;Keep Monitor Active&amp;quot; (should be self explanatory). Last but
not least, under Settings - Automatic Connect i entered the name of
my primary machine (replaced by in the pictures) so I have nothing
more to do than to start the spacedesk application.&lt;/li>
&lt;/ol>
&lt;p>I hope this program can help many people with the GUI struggle.&lt;/p></description></item><item><title>Docs: XPlane datarefs used with swift</title><link>https://swift-project.github.io/docs/manual/swiftgeneral/xplanedatarefs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://swift-project.github.io/docs/manual/swiftgeneral/xplanedatarefs/</guid><description>
&lt;pre>&lt;code class="language-{.}" data-lang="{.}">StringDataRef&amp;lt;xplane::data::sim::aircraft::view::acf_livery_path&amp;gt; m_liveryPath;
StringDataRef&amp;lt;xplane::data::sim::aircraft::view::acf_ICAO&amp;gt; m_icao;
StringDataRef&amp;lt;xplane::data::sim::aircraft::view::acf_descrip&amp;gt; m_descrip;
DataRef&amp;lt;xplane::data::sim::time::paused&amp;gt; m_paused;
DataRef&amp;lt;xplane::data::sim::time::use_system_time&amp;gt; m_useSystemTime;
DataRef&amp;lt;xplane::data::sim::flightmodel::position::latitude&amp;gt; m_latitude;
DataRef&amp;lt;xplane::data::sim::flightmodel::position::longitude&amp;gt; m_longitude;
DataRef&amp;lt;xplane::data::sim::flightmodel::position::elevation&amp;gt; m_elevation;
DataRef&amp;lt;xplane::data::sim::flightmodel::position::y_agl&amp;gt; m_agl;
DataRef&amp;lt;xplane::data::sim::flightmodel::position::groundspeed&amp;gt; m_groundSpeed;
DataRef&amp;lt;xplane::data::sim::flightmodel::position::indicated_airspeed2&amp;gt; m_indicatedAirspeed;
DataRef&amp;lt;xplane::data::sim::flightmodel::position::true_airspeed&amp;gt; m_trueAirspeed;
DataRef&amp;lt;xplane::data::sim::flightmodel::position::theta&amp;gt; m_pitch;
DataRef&amp;lt;xplane::data::sim::flightmodel::position::phi&amp;gt; m_roll;
DataRef&amp;lt;xplane::data::sim::flightmodel::position::psi&amp;gt; m_heading;
DataRef&amp;lt;xplane::data::sim::flightmodel::failures::onground_any&amp;gt; m_onGroundAny;
DataRef&amp;lt;xplane::data::sim::flightmodel::failures::onground_all&amp;gt; m_onGroundAll;
DataRef&amp;lt;xplane::data::sim::cockpit2::radios::actuators::com1_frequency_hz_833&amp;gt; m_com1Active;
DataRef&amp;lt;xplane::data::sim::cockpit2::radios::actuators::com1_standby_frequency_hz_833&amp;gt; m_com1Standby;
DataRef&amp;lt;xplane::data::sim::cockpit2::radios::actuators::audio_com_selection&amp;gt; m_comAudioSelection; // 6==COM1, 7==COM2
DataRef&amp;lt;xplane::data::sim::cockpit2::radios::actuators::com1_power&amp;gt; m_com1Power;
DataRef&amp;lt;xplane::data::sim::cockpit2::radios::actuators::audio_volume_com1&amp;gt; m_com1Volume; // 0..1
DataRef&amp;lt;xplane::data::sim::cockpit2::radios::actuators::audio_selection_com1&amp;gt; m_com1Listening;
DataRef&amp;lt;xplane::data::sim::cockpit2::radios::actuators::com2_frequency_hz_833&amp;gt; m_com2Active;
DataRef&amp;lt;xplane::data::sim::cockpit2::radios::actuators::com2_standby_frequency_hz_833&amp;gt; m_com2Standby;
DataRef&amp;lt;xplane::data::sim::cockpit2::radios::actuators::com2_power&amp;gt; m_com2Power;
DataRef&amp;lt;xplane::data::sim::cockpit2::radios::actuators::audio_volume_com2&amp;gt; m_com2Volume; // 0..1
DataRef&amp;lt;xplane::data::sim::cockpit2::radios::actuators::audio_selection_com2&amp;gt; m_com2Listening;
DataRef&amp;lt;xplane::data::sim::cockpit::radios::transponder_code&amp;gt; m_xpdrCode;
DataRef&amp;lt;xplane::data::sim::cockpit::radios::transponder_mode&amp;gt; m_xpdrMode;
DataRef&amp;lt;xplane::data::sim::cockpit::radios::transponder_id&amp;gt; m_xpdrIdent;
DataRef&amp;lt;xplane::data::sim::cockpit::electrical::beacon_lights_on&amp;gt; m_beaconLightsOn;
DataRef&amp;lt;xplane::data::sim::cockpit::electrical::landing_lights_on&amp;gt; m_landingLightsOn;
DataRef&amp;lt;xplane::data::sim::cockpit::electrical::nav_lights_on&amp;gt; m_navLightsOn;
DataRef&amp;lt;xplane::data::sim::cockpit::electrical::strobe_lights_on&amp;gt; m_strobeLightsOn;
DataRef&amp;lt;xplane::data::sim::cockpit::electrical::taxi_light_on&amp;gt; m_taxiLightsOn;
DataRef&amp;lt;xplane::data::sim::flightmodel2::controls::flap_handle_deploy_ratio&amp;gt; m_flapsReployRatio;
ArrayDataRef&amp;lt;xplane::data::sim::flightmodel2::gear::deploy_ratio&amp;gt; m_gearReployRatio;
DataRef&amp;lt;xplane::data::sim::aircraft::engine::acf_num_engines&amp;gt; m_numberOfEngines;
ArrayDataRef&amp;lt;xplane::data::sim::flightmodel::engine::ENGN_N1_&amp;gt; m_enginesN1Percentage;
DataRef&amp;lt;xplane::data::sim::flightmodel2::controls::speedbrake_ratio&amp;gt; m_speedBrakeRatio;
DataRef&amp;lt;xplane::data::sim::weather::barometer_sealevel_inhg&amp;gt; m_qnhInhg;
&lt;/code>&lt;/pre></description></item></channel></rss>
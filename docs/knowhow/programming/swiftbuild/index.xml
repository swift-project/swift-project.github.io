<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>swift project â€“ Building swift</title><link>https://swift-project.github.io/docs/knowhow/programming/swiftbuild/</link><description>Recent content in Building swift on swift project</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://swift-project.github.io/docs/knowhow/programming/swiftbuild/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Build and copy XSwiftBus (from build directory)</title><link>https://swift-project.github.io/docs/knowhow/programming/swiftbuild/buildxswiftbus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://swift-project.github.io/docs/knowhow/programming/swiftbuild/buildxswiftbus/</guid><description>
&lt;ul>
&lt;li>Run make install once.&lt;/li>
&lt;li>This installs xswiftbus with all its dependencies to
&lt;code>dist/xswiftbus&lt;/code>, which can be copied into X-Plane.&lt;/li>
&lt;li>From then onwards, copying of &lt;code>win.xpl&lt;/code> is enough&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="http://img.swift-project.org/xswiftbusbuild1.png" alt="image">&lt;/p>
&lt;p>Result: (when built for 64bit Windows)&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/xswiftbusbuild2.png" alt="image">&lt;/p></description></item><item><title>Docs: Build and run swift in QtC (Qt Creator)</title><link>https://swift-project.github.io/docs/knowhow/programming/swiftbuild/buildinqtc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://swift-project.github.io/docs/knowhow/programming/swiftbuild/buildinqtc/</guid><description>
&lt;h1 id="running-swift">Running swift&lt;/h1>
&lt;p>It makes sense to disable QML as we do not use it, and otherwise the
debugger always pops up).&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/qtc.png" alt="image">&lt;/p>
&lt;h1 id="kits---example-of-a-working-kit">Kits - example of a working kit&lt;/h1>
&lt;p>&lt;img src="http://img.swift-project.org/qtc1.png" alt="image">&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/qtc2.png" alt="image">&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/qtc3.png" alt="image">&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/qtc4.png" alt="image">&lt;/p></description></item><item><title>Docs: Build DBus for Mac OS</title><link>https://swift-project.github.io/docs/knowhow/programming/swiftbuild/dbusmacos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://swift-project.github.io/docs/knowhow/programming/swiftbuild/dbusmacos/</guid><description>
&lt;p>On Mac OS, the default Qt installation includes QtDBus, but not the DBus
library that it depends on. Pre-built binaries are available in the
externals repository. This howto documents the steps if you want to
build a new version of DBus binaries.&lt;/p>
&lt;h2 id="building-from-source">Building from source&lt;/h2>
&lt;ul>
&lt;li>Download and extract the
&lt;a href="https://www.freedesktop.org/wiki/Software/dbus/#index5h1">libdbus&lt;/a>
source code.&lt;/li>
&lt;li>Set the deployment target to the lowest supported Mac OS version. At
the time of writing, this was Mac OS 10.10&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">MACOSX_DEPLOYMENT_TARGET&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>10.10
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Configure, run and install the build&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">./configure --localstatedir&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>/usr/local/var --sysconfdir&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>/usr/local/etc --disable-xml-docs --disable-doxygen-docs --enable-launchd --with-launchd-agent-dir&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>~/Library/LaunchAgents --without-x --disable-tests
make
make install
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>make install&lt;/code> will automatically copy
&lt;code>org.freedesktop.dbus-session.plist&lt;/code> into the users LaunchAgents
directory. So from the next boot up, it will be automatically
loaded. To load it without rebooting after installation, run:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">load -w ~/Library/LaunchAgents/org.freedesktop.dbus-session.plist
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="commit-to-externals">Commit to externals&lt;/h2>
&lt;p>Before committing the new binaries to externals, we need to make some
small adjustments to the library lookup path written in those binaries.&lt;/p>
&lt;ul>
&lt;li>Setup &lt;code>swiftRoot&lt;/code> environmental variable&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">swiftRoot&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=[&lt;/span>path to your swift root&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>First copy them to externals to not change the local installation&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">cp /usr/local/bin/dbus-daemon &lt;span style="color:#000">$swiftRoot&lt;/span>/externals/macx-clang/bin64/
cp /usr/local/bin/dbus-uuidgen &lt;span style="color:#000">$swiftRoot&lt;/span>/externals/macx-clang/bin64/
cp /usr/local/lib/libdbus-1.3.dylib &lt;span style="color:#000">$swiftRoot&lt;/span>/externals/macx-clang/lib64/
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Change the path where dbus executables should look for
&lt;code>libdbus-1.3.dylib&lt;/code>:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#204a87">cd&lt;/span> &lt;span style="color:#000">$swiftRoot&lt;/span>/externals/macx-clang/bin64
install_name_tool -change /usr/local/lib/libdbus-1.3.dylib @executable_path/../lib/libdbus-1.3.dylib dbus-daemon
install_name_tool -change /usr/local/lib/libdbus-1.3.dylib @executable_path/../lib/libdbus-1.3.dylib dbus-uuidgen
&lt;span style="color:#204a87">cd&lt;/span> &lt;span style="color:#000">$swiftRoot&lt;/span>/externals/macx-clang/lib64
install_name_tool -id @rpath/libdbus-1.3.dylib libdbus-1.3.dylib
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Commit the new binaries&lt;/li>
&lt;/ul></description></item><item><title>Docs: Build DBus for Windows</title><link>https://swift-project.github.io/docs/knowhow/programming/swiftbuild/dbus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://swift-project.github.io/docs/knowhow/programming/swiftbuild/dbus/</guid><description>
&lt;p>On Windows, the default Qt installation includes QtDBus, but not the
DBus library that it depends on. Here are Windows binaries for DBus,
they should be extracted directly into the Qt installation tree:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Verbose-mode builds&lt;/strong> (insecure, for &lt;em>swift&lt;/em> developers)&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>F12375 DBus 1.10.24 for MSVC2017 32-bit&lt;/li>
&lt;li>F12376 DBus 1.10.24 for MSVC2017 64-bit&lt;/li>
&lt;li>F12377 DBus 1.10.24 for MinGW 5.3.0 32-bit&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Secure-mode builds&lt;/strong> (for deployment to &lt;em>swift&lt;/em> users)&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>F12378 DBus 1.10.24 for MSVC2017 32-bit&lt;/li>
&lt;li>F12379 DBus 1.10.24 for MSVC2017 64-bit&lt;/li>
&lt;li>F12380 DBus 1.10.24 for MinGW 5.3.0 32-bit&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;h1 id="building-from-source">Building from source&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>Download and install &lt;a href="https://cmake.org/">CMake&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Download and extract the &lt;a href="http://expat.sourceforge.net/">libexpat&lt;/a>
and
&lt;a href="https://www.freedesktop.org/wiki/Software/dbus/#index5h1">libdbus&lt;/a>
source code.&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>At the time of writing, both the latest stable release and the
[master]{.title-ref} branch of libexpat fail to build on
Windows, so we fall back to the previous stable version
(2.1.1).&lt;/li>
&lt;li>MinGW binaries of libexpat are already part of the default
MinGW itself.&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;p>Visual Studio Command Prompt: .. code-block:&lt;/p>
&lt;pre>&lt;code>cmake -G &amp;quot;Visual Studio 15 2017&amp;quot; -DCMAKE_INSTALL_PREFIX=C:\expat-msvc32 C:\expat-sources
msbuild install.vcxproj /p:Configuration=Release
cmake -G &amp;quot;Visual Studio 15 2017 Win64&amp;quot; -DCMAKE_INSTALL_PREFIX=C:\expat-msvc64 C:\expat-sources
msbuild install.vcxproj /p:Configuration=Release
cmake -G &amp;quot;Visual Studio 15 2017&amp;quot; -DCMAKE_INSTALL_PREFIX=C:\dbus-msvc32
-DEXPAT_INCLUDE_DIR=C:\expat-msvc32\include
-DEXPAT_LIBRARY=C:\expat-msvc32\lib\expat.lib C:\dbus-sources\cmake
msbuild install.vcxproj /p:Configuration=Release
cmake -G &amp;quot;Visual Studio 15 2017 Win64&amp;quot; -DCMAKE_INSTALL_PREFIX=C:\dbus-msvc64
-DEXPAT_INCLUDE_DIR=C:\expat-msvc64\include
-DEXPAT_LIBRARY=C:\expat-msvc64\lib\expat.lib C:\dbus-sources\cmake
msbuild install.vcxproj /p:Configuration=Release
&lt;/code>&lt;/pre>
&lt;p>MinGW Command Prompt:&lt;/p>
&lt;pre>&lt;code class="language-{.}" data-lang="{.}">cmake -G &amp;quot;MinGW Makefiles&amp;quot; -DCMAKE_INSTALL_PREFIX=C:\dbus-mingw32 C:\dbus-sources\cmake
mingw32-make install
&lt;/code>&lt;/pre>&lt;h1 id="verbose-vs-secure-builds">Verbose vs. secure builds&lt;/h1>
&lt;p>::: {.warning}
::: {.title}
Warning
:::&lt;/p>
&lt;p>The default DBus CMake build includes unit tests, asserts, and verbose
mode, which help with debugging but render the library insecure. To
build secure binaries appropriate for deployment to end-users, use these
[cmake]{.title-ref} arguments:
:::&lt;/p>
&lt;pre>&lt;code class="language-{.}" data-lang="{.}">-DDBUS_BUILD_TESTS=OFF -DDBUS_DISABLE_ASSERT=ON -DDBUS_ENABLE_VERBOSE_MODE=OFF
&lt;/code>&lt;/pre>&lt;h1 id="error-messages">Error messages&lt;/h1>
&lt;p>Some error messages you see when the &lt;code>libdbus&lt;/code> libs are missing (also
posted here so you can search by the terms)&lt;/p>
&lt;pre>&lt;code class="language-{.}" data-lang="{.}">Cannot find libdbus-1 in your system to resolve symbol 'dbus_get_local_machine_id'.
Debug Error!
Program: P:\Qt\5.9.2\msvc2015\bin\Qt5Cored.dll
Module: 5.9.2
File: qdbus_symbols.cpp
Line: 142
&lt;/code>&lt;/pre></description></item><item><title>Docs: Build on Windows</title><link>https://swift-project.github.io/docs/knowhow/programming/swiftbuild/windows/windows/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://swift-project.github.io/docs/knowhow/programming/swiftbuild/windows/windows/</guid><description>
&lt;p>&lt;strong>Download prerequisites&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>&lt;strong>`Git &amp;lt;http://git-scm.com/download/win&amp;gt;`_&lt;/strong>&lt;/li>
&lt;li>&lt;strong>`Visual Studio Community 2019
&amp;lt;https://www.visualstudio.com/&amp;gt;`_&lt;/strong> (be sure to select C++
during installation)&lt;/li>
&lt;li>&lt;strong>`Qt 5 &amp;lt;https://www.qt.io/download-qt-installer&amp;gt;`_&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>Clone the git repo&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-{.}" data-lang="{.}">git clone ssh://git@dev.swift-project.org/source/pilotclient.git
git submodule update --init
&lt;/code>&lt;/pre>&lt;p>::: {.important}
::: {.title}
Important
:::&lt;/p>
&lt;p>As a developer you would normally wish to clone the latest
[develop]{.title-ref} branch
:::&lt;/p>
&lt;p>&lt;strong>Compile&lt;/strong>&lt;/p>
&lt;p>importantIt might be a good idea to exclude the build directory from
your virus scanner, as otherwise new executable will not work properly&lt;/p>
&lt;p>&lt;strong>With Qt Creator&lt;/strong>&lt;/p>
&lt;p>Actually you should be able to directly open the cloned repo as project
in QtC. Setup your Qt kit and then it should compile.&lt;/p>
&lt;ul>
&lt;li>After that you should be able to start your &lt;em>swift&lt;/em> applications.
Maybe you have to start QtC after the very first compilation to see
that context menu.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="http://img.swift-project.org/qtc5.png" alt="image">&lt;/p>
&lt;ul>
&lt;li>If you change the branch or you pull a new swift version consider
running &lt;code>qmake&lt;/code> from the QtC again, sometimes new files are not
recognized otherwise.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>With &lt;code>qmake&lt;/code> and Visual C++ IDE&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-{.}" data-lang="{.}">call &amp;quot;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvarsall.bat&amp;quot; x86
qmake -tp vc -Wlogic -spec win32-msvc -r C:\path\to\swift\swift.pro
&lt;/code>&lt;/pre>&lt;p>::: {.note}
::: {.title}
Note
:::&lt;/p>
&lt;p>{icon file-text-o} P4 Use this script to automate the procedure of
running qmake. It will prompt you to choose which of your installed
versions of Qt and VS to use, and whether to build for 32 or 64 bits.
:::&lt;/p>
&lt;p>&lt;strong>With &lt;code>qmake&lt;/code> and MinGW&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-{.}" data-lang="{.}">qmake -Wlogic -spec win32-g++ -r C:\path\to\swift\swift.pro
mingw32-make
&lt;/code>&lt;/pre>&lt;p>&lt;strong>With Clang&lt;/strong>&lt;/p>
&lt;p>See &lt;code>clang&lt;/code>{.interpreted-text role=&amp;quot;ref&amp;rdquo;} .&lt;/p>
&lt;p>::: {.toctree caption=&amp;quot;Content in this chapter&amp;rdquo;}
clang
:::&lt;/p></description></item><item><title>Docs: Build on Windows with Clang</title><link>https://swift-project.github.io/docs/knowhow/programming/swiftbuild/windows/clang/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://swift-project.github.io/docs/knowhow/programming/swiftbuild/windows/clang/</guid><description>
&lt;p>::: {.warning}
::: {.title}
Warning
:::&lt;/p>
&lt;p>This should be considered experimental and could be broken by future
updates of Qt, MSVC, Clang, or seemingly unrelated changes in our own
code.
:::&lt;/p>
&lt;p>&lt;strong>Preparation&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Download Clang binaries for Windows&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>Advice: do not install in the default directory (Program
Files)&lt;/li>
&lt;li>Ensure the bin subdirectory is added to PATH (recommend doing
this manually)&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Considerations&lt;/strong>&lt;/p>
&lt;p>Things to be aware of:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>On Linux, Clang tries to mimic GCC, supporting GNU extensions and
GNU ABI. On Windows, Clang tries to mimic MSVC, supporting Microsoft
extensions and Microsoft ABI.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>You need to have installed Microsoft Visual C++, as Clang uses
Microsoft's implementation of the C++ standard library.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The mkspec uses
[clang-cl](&lt;a href="http://clang.llvm.org/docs/UsersManual.html#clang-cl">http://clang.llvm.org/docs/UsersManual.html#clang-cl&lt;/a>),
which is a wrapper around clang.exe that understands MSVC
commandline arguments like /LD, /W3, etc.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The following qmake scope test conditions are true when building
with Clang on Windows:&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>win32&lt;/li>
&lt;li>win32-clang-msvc&lt;/li>
&lt;li>msvc&lt;/li>
&lt;li>clang_cl&lt;/li>
&lt;li>llvm&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>The following C++ macros are defined when building with Clang on Windows:&lt;/p>
&lt;p>: - Q_OS_WIN
- Q_CC_MSVC
- Q_CC_CLANG&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Build with qmake and jom&lt;/strong>&lt;/p>
&lt;p>Using the appropriate Visual Studio command prompt:&lt;/p>
&lt;pre>&lt;code class="language-{.}" data-lang="{.}">qmake -Wlogic -r -spec win32-clang-msvc path\to\swift.pro
jom
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Build with Qt Creator&lt;/strong>&lt;/p>
&lt;p>::: {.warning}
::: {.title}
Warning
:::&lt;/p>
&lt;p>This does not seem to be working at the moment. (2018-12-01, Qt Creator
4.7.2)
:::&lt;/p>
&lt;p>Qt Creator should detect your installation of LLVM. If it does not, you
can manually add it under the &amp;quot;Compilers&amp;quot; tab. Then create a new kit
by cloning one of the existing &amp;quot;Qt Desktop MSVC2017&amp;quot; kits. Adjust the
kit by selecting the appropriate Clang compiler from the drop-down list,
and entering the Qt mkspec win32-clang-msvc. Finally, add the kit to
your swift project in the Projects page, make it the active kit, and
start a build.&lt;/p>
&lt;p>&lt;img src="http://img.swift-project.org/qtc6.png" alt="image">&lt;/p>
&lt;p>&lt;strong>Clang and MinGW&lt;/strong>&lt;/p>
&lt;p>::: {.warning}
::: {.title}
Warning
:::&lt;/p>
&lt;p>This is even more experimental than anything above!
:::&lt;/p>
&lt;p>It is also possible to build using Clang on MinGW by using the mkspec
win32-clang-g++.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The following qmake scope test conditions will be true:&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>win32&lt;/li>
&lt;li>win32-clang-g++&lt;/li>
&lt;li>gcc&lt;/li>
&lt;li>mingw&lt;/li>
&lt;li>llvm&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>The following C++ macros will be defined:&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>Q_OS_WIN&lt;/li>
&lt;li>Q_CC_GCC&lt;/li>
&lt;li>Q_CC_CLANG&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;/li>
&lt;/ul></description></item></channel></rss>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>swift project – Misc</title><link>https://swift-project.github.io/docs/misc/</link><description>Recent content in Misc on swift project</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://swift-project.github.io/docs/misc/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Draft protocol spec: aircraft parts configuration packets for FSD</title><link>https://swift-project.github.io/docs/misc/acconfig/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://swift-project.github.io/docs/misc/acconfig/</guid><description>
&lt;p>::: {.warning}
::: {.title}
Warning
:::&lt;/p>
&lt;p>This protocol specification is work in progress. Do not yet use it for
implementation.
:::&lt;/p>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>This specification is meant to be an extension to the existing
propritary VATSIM protocol. This is driven by the fact, that the VATSIM
protocol is lacking several important information like the position of
gear, flaps, setting of lights or even the an on-ground flag. The idea
of this protocol extension is to use JSON objects to have a easy to
extend and easy to read paackage. It is sent via the custom packet
functionality of FSD. This means, you are able to send each JSON string
to a specific callsign.&lt;/p>
&lt;h1 id="why-json">Why JSON?&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>It is easy for humans to read and write. It is easy for machines to
parse and generate.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Almost every information can be sent as JSON object&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>Objects can be nested&lt;/li>
&lt;li>All relevant data types are available&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>Information are sent as objects. Although we have &lt;strong>not&lt;/strong> yet
discussed it, this could be a solution for FSD 2.0 as well.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>JSON is well supported by frameworks: &lt;a href="http://www.json.org/">http://www.json.org/&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>JSON is de facto standard for data transfer via web services&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Easy to extend without breaking compatibility, new attributes can
just be added.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Example:&lt;/p>
&lt;pre>&lt;code class="language-{.js}" data-lang="{.js}">{
&amp;quot;strobe&amp;quot;: false,
&amp;quot;landing&amp;quot;: false
}
&lt;/code>&lt;/pre>&lt;p>could be easily extended to&lt;/p>
&lt;pre>&lt;code class="language-{.js}" data-lang="{.js}">{
&amp;quot;strobe&amp;quot;: false,
&amp;quot;landing&amp;quot;: false,
&amp;quot;taxi&amp;quot;: true,
}
&lt;/code>&lt;/pre>&lt;p>Very likely the 2nd response is still compliant with legacy systems of
the first generation.&lt;/p>
&lt;ul>
&lt;li>Character encoding (see below) will allow us to use the full unicode
set and hence avoids encoding issues as in the current FSD packages.&lt;/li>
&lt;/ul>
&lt;h1 id="json-datatypes">JSON DataTypes&lt;/h1>
&lt;p>The following tables shows all possible JSON types:&lt;/p>
&lt;hr>
&lt;p>Type Description&lt;/p>
&lt;hr>
&lt;p>Number double-precision floating-point format in JavaScript&lt;/p>
&lt;p>String double-quoted Unicode with backslash escaping&lt;/p>
&lt;p>Boolean true or false&lt;/p>
&lt;p>Array an ordered sequence of values&lt;/p>
&lt;p>Value it can be a string, a number, true or false, null etc&lt;/p>
&lt;p>Object an unordered collection of key:value pairs&lt;/p>
&lt;p>Whitespace can be used between any pair of tokens&lt;/p>
&lt;h2 id="null---------empty">null empty&lt;/h2>
&lt;h1 id="object-definitions">Object Definitions&lt;/h1>
&lt;h2 id="lights">Lights&lt;/h2>
&lt;p>The lights object is used to synchronize the aircraft lights.&lt;/p>
&lt;pre>&lt;code class="language-{.js}" data-lang="{.js}">{
&amp;quot;strobe&amp;quot;: false,
&amp;quot;landing&amp;quot;: false,
&amp;quot;taxi&amp;quot;: true,
&amp;quot;beacon&amp;quot;: false,
&amp;quot;nav&amp;quot;: true,
&amp;quot;logo&amp;quot;: false
}
&lt;/code>&lt;/pre>&lt;p>Each light can be switched on or off individually.&lt;/p>
&lt;p>Values:&lt;/p>
&lt;p>&lt;code>true&lt;/code>: Light is switched on.&lt;/p>
&lt;p>&lt;code>false&lt;/code>: Light is switched off.&lt;/p>
&lt;p>default: Light is switched on.&lt;/p>
&lt;p>::: {.note}
::: {.title}
Note
:::&lt;/p>
&lt;p>Ross: FSX supports toggling the recognition lights. How about adding a
&amp;quot;recog&amp;quot; property to the lights object?
:::&lt;/p>
&lt;h2 id="gear">Gear&lt;/h2>
&lt;p>The gear object contains maximum 3 positions.&lt;/p>
&lt;p>::: {.note}
::: {.title}
Note
:::&lt;/p>
&lt;p>Ross: do we really need three separate gear values? If the three values
didn't all have the same value, that would mean a gear malfunction, and
that's extremely rare. I don't think it's worth the extra packet
size.
:::&lt;/p>
&lt;p>::: {.note}
::: {.title}
Note
:::&lt;/p>
&lt;p>Mat: I like the idea of being able to observe asymmetric gear failure.
The packet is only sent when something changes. If packet size was such
a big deal we wouldn't be using plain text. But the three position
maximum is insufficient for all aircraft types (e.g. 747 needs four:
left, center, right, and nose). If the choice is between one value and
three values, I prefer one. But I also think we could come up with a
solution to support an arbitrary number of values, and still have the
smaller packet size in the case when all values are equal. (e.g. [{
&amp;quot;all&amp;quot;: true }]{.title-ref} or [{ &amp;quot;all&amp;quot;: true, &amp;quot;nose&amp;quot;: false
}]{.title-ref})
:::&lt;/p>
&lt;p>::: {.note}
::: {.title}
Note
:::&lt;/p>
&lt;p>Ross: Correct me if I'm wrong, but in order to implement the &amp;quot;all&amp;quot;
value, it would need to be a tri-state. There would need to be a way for
the client to know to ignore the value of &amp;quot;all&amp;quot; and instead look at
the value of the individual gear positions. Remember that we're
omitting values that are equal to the default. Personally I don't think
this is worth it for the extremely rare event of a gear malfunction.
:::&lt;/p>
&lt;pre>&lt;code class="language-{.js}" data-lang="{.js}">{
&amp;quot;center&amp;quot;: true,
&amp;quot;left&amp;quot;: true,
&amp;quot;right&amp;quot;: true
}
&lt;/code>&lt;/pre>&lt;p>Values:&lt;/p>
&lt;p>&lt;code>true&lt;/code>: Gear is extended.&lt;/p>
&lt;p>&lt;code>false&lt;/code>: Gear is retracted.&lt;/p>
&lt;p>default: Gear is retracted.&lt;/p>
&lt;p>::: {.note}
::: {.title}
Note
:::&lt;/p>
&lt;p>Ross: I'm wondering if the default should be gear down, since that will
be the case for most of the aircraft you encounter during a flight.
:::&lt;/p>
&lt;p>::: {.note}
::: {.title}
Note
:::&lt;/p>
&lt;p>Mat: agreed.
:::&lt;/p>
&lt;h2 id="flaps">Flaps&lt;/h2>
&lt;pre>&lt;code class="language-{.}" data-lang="{.}">{
&amp;quot;trailing_edge_flaps&amp;quot;: false,
&amp;quot;leading_edge_flaps&amp;quot;: false
}
&lt;/code>&lt;/pre>&lt;p>Values:&lt;/p>
&lt;p>&lt;code>true&lt;/code>: Flap is extended.&lt;/p>
&lt;p>&lt;code>false&lt;/code>: Flap is retracted.&lt;/p>
&lt;p>default: Flap is retracted.&lt;/p>
&lt;p>::: {.note}
::: {.title}
Note
:::&lt;/p>
&lt;p>Ross: I propose shortening these property names to
[trailing_edge]{.title-ref} and [leading_edge]{.title-ref} since the
[_flaps]{.title-ref} suffix is redundant.
:::&lt;/p>
&lt;p>::: {.note}
::: {.title}
Note
:::&lt;/p>
&lt;p>Mat: [flaps]{.title-ref} and [slats]{.title-ref} would be even shorter.
:::&lt;/p>
&lt;p>::: {.note}
::: {.title}
Note
:::&lt;/p>
&lt;p>Ross: Indeed ... I was suggesting removing the [_flaps]{.title-ref}
suffix only to remove the redundancy. I wasn't looking to save length.
Changing it to [flaps]{.title-ref} and [slats]{.title-ref} would
re-introduce redundancy again since the object name is
[flaps]{.title-ref}. Perhaps we just eliminate the [flaps]{.title-ref}
object and just have top level [flaps]{.title-ref} and
[slats]{.title-ref} properties. (I'm actually still in favor of a flat
key/value pair list instead of using nested objects anyway. I feel like
the nested object hierarchy just bleeds implementation details into the
protocol, but I don't feel all that strongly about it either way.)
:::&lt;/p>
&lt;p>::: {.note}
::: {.title}
Note
:::&lt;/p>
&lt;p>Mat: If we go with a single value for landing gear, then it would be
consistent to also have a single value covering both flaps and slats.
:::&lt;/p>
&lt;p>::: {.note}
::: {.title}
Note
:::&lt;/p>
&lt;p>Ross: A single [flaps_down]{.title-ref} value works for me, because as
far as I know you can't have flaps extended without slats (or
vice-versa) unless there's a malfunction. At least that's the case
with any aircraft I've flown. That's also supported by the fact that
there is no SimConnect event for extending/retracting the slats. (No
that that's definitive, just pointing it out.)
:::&lt;/p>
&lt;p>::: {.note}
::: {.title}
Note
:::&lt;/p>
&lt;p>Ross: Once I dug into this a bit more while implementing this
functionality in vPilot, I'm realizing that it might make more sense to
have the flaps value be an integer (representing the percent of
extension, with zero as the default) rather than a boolean. This would
allow us to distinguish between takeoff and landing flaps settings.
Thoughts?
:::&lt;/p>
&lt;p>::: {.note}
::: {.title}
Note
:::&lt;/p>
&lt;p>Roland: I had thought about it in the very beginning. If we do it, I
would recommend to send numbers with low frequency or only steps. {nav
Flaps 0 &amp;gt; Flaps 10 &amp;gt; Flaps 15} etc.
:::&lt;/p>
&lt;p>::: {.note}
::: {.title}
Note
:::&lt;/p>
&lt;p>Ross: I considered that as well, but not all aircraft use the same
values for degrees when referencing various levels of flap extension.
How would the client know which levels are supported by any given
aircraft model? Also, FSX/P3D allow reading/writing the flaps value as a
percentage, not as a number of degrees. I assume that's because of the
fact that not all aircraft use the same number of degrees for various
flap settings. I'm not sure how XPlane works in this regard. Should we
move this discussion to the forum thread we already have going? Not sure
who all has access to that...
:::&lt;/p>
&lt;p>::: {.note}
::: {.title}
Note
:::&lt;/p>
&lt;p>Discussion continued at
&lt;a href="https://dev.vatsim-germany.org/boards/11/topics/1592?r=2235">https://dev.vatsim-germany.org/boards/11/topics/1592?r=2235&lt;/a>
:::&lt;/p>
&lt;h2 id="spoilers">Spoilers&lt;/h2>
&lt;pre>&lt;code class="language-{.js}" data-lang="{.js}">{
&amp;quot;left&amp;quot;: false,
&amp;quot;right&amp;quot;: false
}
&lt;/code>&lt;/pre>&lt;p>Values:&lt;/p>
&lt;p>&lt;code>true&lt;/code>: Spoilers are extended.&lt;/p>
&lt;p>&lt;code>false&lt;/code>: Spoilers are retracted.&lt;/p>
&lt;p>default: Spoilers are retracted.&lt;/p>
&lt;h2 id="on-ground-flag">On Ground Flag&lt;/h2>
&lt;p>Legacy FSD does not provide information if an aircraft is on ground.
This object will add it.&lt;/p>
&lt;pre>&lt;code class="language-{.js}" data-lang="{.js}">&amp;quot;on_ground&amp;quot;: true
&lt;/code>&lt;/pre>&lt;p>Values:&lt;/p>
&lt;p>&lt;code>true&lt;/code>: Aircraft is on ground.&lt;/p>
&lt;p>&lt;code>false&lt;/code>: Aircraft is flying.&lt;/p>
&lt;p>default: Aircraft is flying.&lt;/p>
&lt;h2 id="engines-running-flag">Engines Running Flag&lt;/h2>
&lt;pre>&lt;code class="language-{.}" data-lang="{.}">&amp;quot;engines_running&amp;quot;: true
&lt;/code>&lt;/pre>&lt;p>Values:&lt;/p>
&lt;p>&lt;code>true&lt;/code>: Aircraft engines are running.&lt;/p>
&lt;p>&lt;code>false&lt;/code>: Aircraft engines are not running.&lt;/p>
&lt;p>default: [true]{.title-ref}.&lt;/p>
&lt;h2 id="default-values">Default values&lt;/h2>
&lt;p>Each Object has a defined default value. In case a key is missing in the
JSON object, the receiver client shall fill missing key/value pairs with
default value. The sending client shall always skip key/value pairs
which are identical to default in order to reduce bandwidth.&lt;/p>
&lt;h1 id="protocol">Protocol&lt;/h1>
&lt;h2 id="supporting-clients">Supporting Clients&lt;/h2>
&lt;p>Since this protocol is quite new, all legacy clients will not understand
and ignore aircraft configuration packets. In order to reduce bandwidth
and safe CPU time, the client shall send packets only to clients which
have support for aircraft configuration packets declared in their
[CAPS]{.title-ref} packet. Supporting clients have the following
key/value pair defined:&lt;/p>
&lt;pre>&lt;code class="language-{.}" data-lang="{.}">ACCONFIG=1
&lt;/code>&lt;/pre>&lt;p>Packets shall only pushed to clients, which have this [CAPS]{.title-ref}
value defined.&lt;/p>
&lt;p>The list of clients is currently:&lt;/p>
&lt;ul>
&lt;li>vPilot&lt;/li>
&lt;li>&lt;em>swift&lt;/em>&lt;/li>
&lt;/ul>
&lt;h2 id="range">Range&lt;/h2>
&lt;p>In order to reduce traffic load, the client should send configuration
packets only to remote aircrafts in a defined range (recommended are
&lt;code>10 nm&lt;/code>, but a client developer might let the user configure it).&lt;/p>
&lt;h2 id="pushing-a-new-configuration-packet">Pushing a new Configuration Packet&lt;/h2>
&lt;p>When a callsign/aircraft, which accepts configuration packets (see
&lt;code>CAPS&lt;/code> value), enters the defined range the first time from a client
perspective, the client shall send send a full configuration packet
immediately and also a full packet anytime something has changed. To
reduce bandwidth and size of the packet, default values shall be taken
into account.&lt;/p>
&lt;pre>&lt;code class="language-{.}" data-lang="{.}">{
&amp;quot;lights&amp;quot;: {
&amp;quot;strobe&amp;quot;: false,
&amp;quot;landing&amp;quot;: false,
&amp;quot;beacon&amp;quot;: false,
&amp;quot;logo&amp;quot;: false
},
&amp;quot;gear&amp;quot;: {
&amp;quot;center&amp;quot;: true,
&amp;quot;left&amp;quot;: true,
&amp;quot;right&amp;quot;: true
},
&amp;quot;flaps&amp;quot;: {
},
&amp;quot;spoilers&amp;quot;: {
},
&amp;quot;on_ground&amp;quot;: true
}
&lt;/code>&lt;/pre>&lt;p>Missing pairs in object &lt;code>lights&lt;/code> have to be replaced by default values.
&lt;code>flaps&lt;/code> and &lt;code>spoilers&lt;/code> are empty, this means the default value applies
to all pairs.&lt;/p>
&lt;p>::: {.todo}
Maximum length payload?
:::&lt;/p>
&lt;h1 id="character-encoding">Character Encoding&lt;/h1>
&lt;p>To avoid conflicts with non-ASCII characters either in FSD or on the
client side, all non-ASCII characters inside string values shall be
encoded via JSON character escape sequence, defined in the JSON
specification (&lt;a href="http://www.ietf.org/rfc/rfc4627.txt">RFC4627&lt;/a> chapter
2.5 Strings):&lt;/p>
&lt;ul>
&lt;li>If the character is in the Basic Multilingual Plane (&lt;code>U+0000&lt;/code>
through &lt;code>U+FFFF&lt;/code>), then it may be represented as a six-character
sequence: a reverse solidus, followed by the lowercase letter &lt;code>u&lt;/code>,
followed by four hexadecimal digits that encode the character's
code point. The hexadecimal letters &lt;code>A&lt;/code> though &lt;code>F&lt;/code> can be upper or
lowercase. So, for example, a string containing only a single
reverse solidus character may be represented as &lt;code>&amp;quot;\u005C&amp;quot;&lt;/code>.&lt;/li>
&lt;/ul>
&lt;p>Examples:&lt;/p>
&lt;hr>
&lt;p>non-ASCII character Unicode Escaped sequence&lt;/p>
&lt;hr>
&lt;p>à U+00E0 u00E0&lt;/p>
&lt;p>ȹ U+0239 u0239&lt;/p>
&lt;p>Ŧ U+0166 u0166&lt;/p>
&lt;h2 id="ý---------------------u00fd----u00fd">ý U+00FD u00FD&lt;/h2>
&lt;p>Most JSON parsers support automatically character escaping.&lt;/p>
&lt;p>Example Qt implementation to escape characters&lt;/p>
&lt;pre>&lt;code class="language-{.cpp}" data-lang="{.cpp}">#include &amp;lt;QCoreApplication&amp;gt;
#include &amp;lt;QDebug&amp;gt;
QString convertToUnicodeEscaped(const QString &amp;amp;str)
{
QString escaped;
for (QString::const_iterator it = str.begin(); it != str.end(); ++it)
{
QChar ch = *it;
ushort code = ch.unicode();
if (code &amp;lt; 0x80)
{
escaped += ch;
}
else
{
escaped += &amp;quot;\\u&amp;quot;;
escaped += QString::number(code, 16).rightJustified(4, '0');
}
}
return escaped;
}
int main(int argc, char *argv[])
{
QCoreApplication a(argc, argv);
QString str(&amp;quot;This is a Test string with ßÜÖЗдравствуй&amp;quot;);
qDebug() &amp;lt;&amp;lt; convertToUnicodeEscaped(str);
&lt;/code>&lt;/pre>&lt;p>Output:&lt;/p>
&lt;pre>&lt;code class="language-{.}" data-lang="{.}">This is a Test string with \u00df\u00dc\u00d6\u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439
&lt;/code>&lt;/pre>&lt;h1 id="open-questions">Open questions&lt;/h1>
&lt;p>Maximum length of payload for such a JSON message. Is the length
sufficient? Btw, what is the maximum length anyway?&lt;/p></description></item><item><title>Docs: External Resources / links</title><link>https://swift-project.github.io/docs/misc/externalresources/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://swift-project.github.io/docs/misc/externalresources/</guid><description>
&lt;h1 id="vatsim-forum-swift-thread">VATSIM Forum swift thread&lt;/h1>
&lt;p>&lt;a href="https://forums.vatsim.net/viewtopic.php?f=6&amp;amp;t=61678&amp;amp;start=210">https://forums.vatsim.net/viewtopic.php?f=6&amp;amp;t=61678&amp;amp;start=210&lt;/a>&lt;/p>
&lt;p>The VATSIM subforum which contains the discussion about the open source
client. Do not discuss internal stuff there, it is for progress
communication and announcements.&lt;/p>
&lt;h1 id="vatsim-germany-forum">VATSIM Germany Forum&lt;/h1>
&lt;p>&lt;a href="http://board.vacc-sag.org/192/52348/">http://board.vacc-sag.org/192/52348/&lt;/a>&lt;/p>
&lt;p>VATSIM Germany forum Part &amp;quot;Open Source Pilot Client Development&amp;quot;&lt;/p>
&lt;h1 id="sso-forum">SSO Forum&lt;/h1>
&lt;p>&lt;a href="http://forums.vatsim.net/viewforum.php?f=134">http://forums.vatsim.net/viewforum.php?f=134&lt;/a>&lt;/p>
&lt;p>Requires registration&lt;/p>
&lt;h1 id="open-source-parts-of-pcsb-and-vvl">Open source parts of PCSB and VVL&lt;/h1>
&lt;p>&lt;a href="http://www.xsquawkbox.net/xsb/developers/">http://www.xsquawkbox.net/xsb/developers/&lt;/a>&lt;/p>
&lt;p>Parts of the pcsb and vvl are open source.&lt;/p>
&lt;h1 id="external-data-providers">External data providers&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>Navigation VATEUD API: &lt;a href="http://api.vateud.net/">http://api.vateud.net/&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Navigation XVAO: &lt;a href="http://xvao.org/api">http://xvao.org/api&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Airports:&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>&lt;a href="http://openflights.org/data.html#airport">http://openflights.org/data.html#airport&lt;/a> Roughly 10k
entries, getting data from&lt;/li>
&lt;li>&lt;a href="http://ourairports.com/data/">http://ourairports.com/data/&lt;/a> approx. 47k entries&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: Setting input device permissions / Creating an udev rule</title><link>https://swift-project.github.io/docs/misc/linuxinputdevicepermissions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://swift-project.github.io/docs/misc/linuxinputdevicepermissions/</guid><description>
&lt;p>By default your distro (hopefully) has read/write access to the input
devices disabled on user accounts. If these were allowed it would be a
tremendous security hole, as any user on the system could see every
input event (including keyboard events such as you typing your banking
password, etc).&lt;/p>
&lt;p>One may be inclined to run swift as root, or to
&lt;code>chmod 777 /dev/input/event*&lt;/code>, however this is not advisable for the
aforementioned reasons.&lt;/p>
&lt;p>The approach we will take is to create an co`input` group, add
yourself to it, and then create a udev rule that provides the necessary
settings.&lt;/p>
&lt;h1 id="creating-an-input-group">Creating an Input Group&lt;/h1>
&lt;p>This is simple stuff. Create a group and add yourself to it:&lt;/p>
&lt;pre>&lt;code class="language-{.}" data-lang="{.}">sudo groupadd input
sudo gpasswd -a username input
&lt;/code>&lt;/pre>&lt;p>Now log out of your shell, and log back in, so that you are part of the
input group. You can verify that the change took place by running the
&lt;code>groups&lt;/code> command.&lt;/p>
&lt;h1 id="creating-a-udev-rule">Creating a udev Rule&lt;/h1>
&lt;p>Unfortunately this may vary by distro, however the concepts will likely
be exactly the same or highly similar - this method is known to be true
for openSUSE. You need to locate the udev rules.d directory, which is
usually in [/etc/udev/rules.d]{.title-ref}. Next create a rule file for
the input device nodes. Your distro may already have a rule file for
this purpose, however we still want to create our own since their file
may get replaced during a distro upgrade. Make sure that the new file
has a priority higher than that of any other file with an event rule in
it. For example as root, create the file
`/etc/udev/rules.d/99-input.rules`:&lt;/p>
&lt;pre>&lt;code class="language-{.}" data-lang="{.}">KERNEL==&amp;quot;event*&amp;quot;, NAME=&amp;quot;input/%k&amp;quot;, MODE=&amp;quot;660&amp;quot;, GROUP=&amp;quot;input&amp;quot;
KERNEL==&amp;quot;js*&amp;quot;, NAME=&amp;quot;input/%k&amp;quot;, MODE=&amp;quot;664&amp;quot;, GROUP=&amp;quot;input&amp;quot;
&lt;/code>&lt;/pre>&lt;p>In Ubuntu, you need to add colons like this:&lt;/p>
&lt;pre>&lt;code class="language-{.}" data-lang="{.}">KERNEL==&amp;quot;event*&amp;quot;, NAME=&amp;quot;input/%k&amp;quot;, MODE:=&amp;quot;660&amp;quot;, GROUP=&amp;quot;input&amp;quot;
KERNEL==&amp;quot;js*&amp;quot;, NAME=&amp;quot;input/%k&amp;quot;, MODE:=&amp;quot;664&amp;quot;, GROUP=&amp;quot;input&amp;quot;
&lt;/code>&lt;/pre>&lt;p>Then you just need to reload udev rules so that the permissions get
updated.&lt;/p>
&lt;pre>&lt;code class="language-{.}" data-lang="{.}">udevadm control --reload-rules
udevadm trigger
&lt;/code>&lt;/pre>&lt;p>Note that on my system, reloading udev had no effect. I ended up having
to reboot, which did the trick. If anyone knows of a way to make the
changes take place without a reboot, please fix this section!&lt;/p>
&lt;p>Now check the permissions on &lt;code>/dev/input/event*&lt;/code> and verify that the
group ownership on the device nodes are set to `input`:&lt;/p>
&lt;pre>&lt;code class="language-{.}" data-lang="{.}">$ ls -al /dev/input/
total 0
drwxr-xr-x 4 root root 440 Jun 6 12:32 .
drwxr-xr-x 21 root root 4480 Jun 10 09:00 ..
drwxr-xr-x 2 root root 120 Jun 6 12:32 by-id
drwxr-xr-x 2 root root 140 Jun 6 12:32 by-path
crw-rw---- 1 root input 13, 64 Jun 10 09:00 event0
crw-rw---- 1 root input 13, 65 Jun 10 09:00 event1
crw-rw---- 1 root input 13, 74 Jun 10 09:00 event10
crw-rw---- 1 root input 13, 75 Jun 10 09:00 event11
crw-rw---- 1 root input 13, 76 Jun 10 09:00 event12
crw-rw---- 1 root input 13, 77 Jun 10 09:00 event13
crw-rw---- 1 root input 13, 78 Jun 10 09:00 event14
crw-rw---- 1 root input 13, 79 Jun 10 09:00 event15
crw-rw---- 1 root input 13, 66 Jun 10 09:00 event2
crw-rw---- 1 root input 13, 67 Jun 10 09:00 event3
crw-rw---- 1 root input 13, 68 Jun 10 09:00 event4
crw-rw---- 1 root input 13, 69 Jun 10 09:00 event5
crw-rw---- 1 root input 13, 70 Jun 10 09:00 event6
crw-rw---- 1 root input 13, 71 Jun 10 09:00 event7
crw-rw---- 1 root input 13, 72 Jun 10 09:00 event8
crw-rw---- 1 root input 13, 73 Jun 10 09:00 event9
crw-r----- 1 root root 13, 63 Jun 10 09:00 mice
crw-r----- 1 root root 13, 32 Jun 10 09:00 mouse0
&lt;/code>&lt;/pre></description></item></channel></rss>
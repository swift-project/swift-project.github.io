[{"body":"General (all simulators)  Have you installed the models for multiplayer aircraft? See here If not done during the launcher wizard, create a model set for your simulator in use. It not done during the launcher wizard, define a PTT key Enable crashdump reports so developers can analyze the cause of crashes better. Close other pilot clients, so the voice port is not blocked. Do not touch the gnd.flag and fast position settings unless you know what you are doing! Do not run swift core and standalone GUI on the same machine, you can run core+remote UI. But normally core is only needed for distributed swift. Do you see validation errors? If you see multiple validation, something in your setup is wrong: see here. Make sure malware protection allows swift to run, recently users reported issues with TrueImage Active protection.  OS specific macOS:  Enable the microphone for swift, see here  Windows  make sure swift can access your microphone, see here  Linux  Hotkeys: We read keyboard and joystick stuff from /dev/input/event* and js*. Those files have to be readable by your user. Typically they are owned by group input or such so if you add your user to that group then it will work.  XPlane swift has not yet been adapted to use Vulkan. If you have enabled Vulkan then you won't see any aircraft.\n  use the 64bit version\n  make sure XSwiftBus is installed, and it is the correct version XSwiftBus and swift client require to have the same version)\n  Make sure other pilot clients are uninstalled (as those most likely interfere with swift). Disabling the plugins might me NOT enough, remove them from the plugins folder.\n  CSL files need to be inside the XPlane folder, it is advisable to avoid spaces and special characters in the file paths\n  disable other simulator plugins using multiplayer planes (such as other pilot clients, or traffic tools) may conflict with swift. Or entirely move them out of the plugin folder if you have problems such as not working animations (gear down), see here under XPlane.\n  for BlueBell models apply the vertical offset fix (make sure to do this correctly and NOT ending up with cascaded directories)\n  see Bluebell CSL and Vertical Offset Fix,\n  troubleshooting and\n  XPlane Aircraft too high or too low\n  P3D/FSX   use the 32bit version for FSX, the 64bit version for P3D.\n  P3D: to use external model directories (not in SimObjects) add this directory\n  FSX: make sure the terrain probe is installed, see Installation of the FSX/P3D terrain probe\n  Enable SimConnect SB4 offsets settings in the driver settings if you want to use XPDR updates from PMDG and other aircraft\n  If you cannot connect swift/P3D (FSX): If you run P3D/FSX as \"Admin\", run swift as \"Admin\"\n  FS9   make sure FSUIPC is installed, swift needs FSUIPC to work properly\n  If you run FS9/FSUIPC as \"Admin\", run swift as \"Admin\"\n  Since Windows Update 1909 the auto connect to the simulator does NOT work anymore, see Connecting FS9 manually through multiplayer\n  Consider the gnd. elevation recording: FS9 elevation\n  Check the connection of swift with your simulator If swift is connected with your simulator, you shall see the simulator LED as on\nIf NOT, make sure your simulator driver is enabled, see Configure / select the used simulator, P3D version FSX version\nIf the simulator does NOT connect, sometime it helps to un-check and check again the simulator (simulator settings)\nSimulator disconnects: Do not run core and standalone GUI at the same time.\nFor XPlane:\n If no connection, check that the XSwiftBus on simulator side and swift side do match: XSwiftBus settings  For FSX/P3D\n For P3D x64 check the correct P3D version: Setting the correct P3D version (x64 only)  ","excerpt":"General (all simulators)  Have you installed the models for …","ref":"/docs/manual/useswiftchecklist/","title":"Checklist: Check before your 1st flight"},{"body":"Installation Select your operating system:\n  \n System Requirements Operating System Requirements swift applications are running on all relevant operation systems. Find below the specific support and requirements for each platform.\nWindows  Microsoft Windows 8, 8.1, or 10 in 32 or 64 bit 200 MB free disk space  Mac OS  MacOS 10.12 or higher 64 bit only 200 MB free disk space  Linux  64 bit only 200 MB free disk space  swift is built on Ubuntu 16.04 LTS. Therefore it should run on any modern Linux distributions that has the following minimum package versions installed\n glibc 2.23 or higher glibcxx 2.3.22 or higher OpenSSL 1.1 libxcb-xinerama0 libspeexdsp libopus  Simulator Requirements swift supports the following simulators:\n Microsoft Flight Simulator 2004 (experimental) Microsoft Flight Simulator X with Acceleration or Service Pack 2 and Steam Edition Lockheed Martin Prepar3D v1 - v5 (including minor versions) X-Plane 11 FlightGear  ","excerpt":"Installation Select your operating system:\n  \n System Requirements …","ref":"/docs/installation/","title":"Installation and Configuration"},{"body":"Download Download the latest installer from here.\nImportant You need to use the 32-bit installer for FSX, FS9 and Prepar 3D (v1-v3) even if you have an 64-bit operating system because SimConnect for FSX is 32-bit only. For X-Plane and P3Dv4 or later use the 64bit installer.  Run the installer Important Close all running swift applications before starting the installation  Run the installer and follow the steps as shown.\nYou might see a warning when you start the installer:\nYou need to ignore this as we have no official MS certification.\nIf you encounter any problems then see troubleshooting.\nInitial configuration You’ve successfully installed swift. Congrats!\nYou can now move forward to start the configuration. Click here\n","excerpt":"Download Download the latest installer from here.\nImportant You need …","ref":"/docs/installation/windows/","title":"Installation on Windows"},{"body":" Important Enable CC and HD for YouTube to see closed captions and reasonable quality  Client Tutorials   Playlist https://www.youtube.com/playlist?list=PLHQ0-JnmgGSic-UXiNoVyEKfSRd-0iXIS\n  Download and install (Multiple tutorials by AF (external)\n  https://youtu.be/SAOZq_mgBcY https://youtu.be/lmGE5MzKoOI https://youtu.be/vs8i6BxSQ10 (Configuration in launcher wizard) https://youtu.be/cbOEN7BC2KI (Useful info about swift UI) https://youtu.be/ptTPs_RXMNw (Enable the log and fine the results) https://youtu.be/iBcy72CRYSI (Vulkan specifics)     core and UI https://youtu.be/Q4MuTdJs7UI (swift distributed UI and core)\n  Advanced UI https://youtu.be/dtnuBZCk6FE (swift navigator and status bar)\n  Drago's tutorials https://www.youtube.com/playlist?list=PL0_hSfPVc4FlMNyfOF8U0liCtQOOuAVt2 (Multiple tutorials by Drago (EXTERNAL)\n  FG connection https://youtu.be/l5O3tRobYPY\n  Mapping tutorials  Playlist: Youtube mapping tool window handling https://youtu.be/Xkr_tYGlHfA mapping tool fundamentals https://youtu.be/ybUGvrkXfCg mapping tool filters https://youtu.be/GbCaHpFP_jw 1st model set https://youtu.be/qR39IjDFwEE mapping distributor / aircraft ICAO https://youtu.be/_pXn1tvYiyY mapping color livery https://youtu.be/iQoP96NlPcU save stash https://youtu.be/0eu8bMpzkRk publish https://youtu.be/EVBjzKQkOy4  ","excerpt":" Important Enable CC and HD for YouTube to see closed captions and …","ref":"/docs/tutorials/","title":"Tutorials"},{"body":"Download Download the latest 32-bit installer from here.\nImportant You need to use the 32-bit installer even if you have an 64-bit operating system because SimConnect for FSX is 32-bit only.  Run the installer Important Close all running swift applications before starting the installation  Run the installer and follow the steps as shown.\nYou might see a warning when you start the installer:\nYou need to ignore this as we have no official MS certification.\nInitial configuration You’ve successfully installed swift. Congrats!\nYou can now move forward to start the configuration. Click here\n","excerpt":"Download Download the latest 32-bit installer from here.\nImportant You …","ref":"/docs/installation/macos/","title":"Installation on MacOS"},{"body":" swift features  The swift eco system    The swift pilot software system      General information Valid for all swift versions: swift general    OS (Windows, Linux, Mac OS X) pilot client for FSD. Ready for takeoff with VATSIM. Further details here. See also swift Checklist and Flight with swift    The mapping tool is the rich UI for mapping data. See here for the tutorials.    swift launcher to configureswift and download updates/data. The configurationwizard is part of the launcher. See swift installation and configuration guide    swift datastore , the database system for model mappings and other swift data    Overview, how everything is related    ","excerpt":" swift features  The swift eco system    The swift pilot software …","ref":"/docs/manual/","title":"User manual"},{"body":"Select your simulator:\nFSX\nP3D (v1-v4)\nP3D (v4 or later)\nFS9\nX-Plane\nFlightgear\n","excerpt":"Select your simulator:\nFSX\nP3D (v1-v4)\nP3D (v4 or later)\nFS9\nX-Plane …","ref":"/docs/installation/simselect/","title":"Initial configuration"},{"body":"Download Download the latest installer from here.\nRun the installer After downloading, modify the installer to be executable chmod +x swiftinstaller-linux-64-\u003cversion\u003e.run and double-click on it in your favorite file browser or run it from console ./swiftinstaller-linux-64-\u003cversion\u003e.run\nIf you encounter any problems then see troubleshooting.\nInitial configuration You’ve successfully installed swift. Congrats!\nYou can now move forward to start the configuration. Click here\nSelf-compilation As usual for Linux programs you could theoretically self-compile swift as it is open-source. Unfortunately a secret key is needed to allow swift connect to official VATSIM servers. This key is build into the official installers.\nSo if you plan to use swift on VATSIM you need to use the installer. Otherwise you can use your self-compiled version. See here for more information.\n","excerpt":"Download Download the latest installer from here.\nRun the installer …","ref":"/docs/installation/linux/","title":"Installation on Linux"},{"body":"","excerpt":"","ref":"/docs/troubleshooting/","title":"Troubleshooting"},{"body":"Initial Configuration After the installation completed, swiftlauncher will launch together with the initial configuration wizard. If you un-selected to launch swift from the installer, it is possible to run the same init mode any time later by using the command line arguments\nswiftlauncher -i --bootstrapurl https://datastore.swift-project.org/shared/\nThe rest of the section will guide you through the different wizards.\nLegal Wizard The first wizard page deals with the necessary legal bits. It will explain in detail all the licenses involved in the swift project including 3rd party software. It also provides links to data protection policies. It is necessary to accept license and data protection policy to proceed. This page also asks for your agreement to submit crash reports to our crash report collection server. In case any swift application crashed, a crash report will be generated with information which line of code caused it to abort. With your agreement, the report will be uploaded to our server and helps the developers to diagnose and fix the cause. This agreement can be changed anytime later in the advanced settings (link tbd). Read more about crash reports (link tbd) and how they look like.\nData Loading Wizard The next wizard will download all data, required by swift to be fully functional. This includes aircraft and airline ICAO data, model strings (no models itself), etc. It is not necessary to click any of the load buttons. The download will start automatically from randomly one of the shared mirror servers in the background. The button can be used to reload in case there was an update meanwhile. You can either wait for the download to finish (several seconds depending on your internet bandwidth) or continue, since it will continue in the background. The wizard indicates that all data finished loading by\n The two DB LEDs flashing yellow All other LEDs off (idle mode). The number of entries and the timestamp of the local cache are equal to the shared cache.  Copy Models Wizard Note If you installed swift the very first time on this machine, then you can skip this part.  If you had a previous version of swift installed already, then this wizard will help you to migrate your existing model cache and model set.\n Select the older version you want to migrate from the list. Select whether you want to migrate the model set and/or model cache and for which simulators. Click Start.  Read more about the meaning of model set (link tbd) and model cache (link tbd).\nCopy Settings Wizard Note If you installed swift the very first time on this machine, then you can skip this part.  If you had a previous version of swift installed already, then this wizard will help you to migrate your settings.\n Select the older version you want to migrate from the list. Select which settings needs migrating  Grey X means that no user setting is available and the default is in use.   Click copy  Read more about settings (link tbd).\nSimulator Wizard This page allows you to configure which simulators you want swift to work with. If you have multiple simulators installed and use them regularly, select all of those in the first group box. swift will detect if any of those configured simulators is running and connect to it. It will ignore the ones that have not been selected.\nIn the group box below, you are able to configure the simulator path and any additional model directories. swift will try to detect as much as possible automatically and use it as default. The default is listed in light grey. In order to configure the directories, first select the respective simulator from the radio boxes at the bottom\n Use the ... button to select/add more directories Use the adjust button to remove redundant directories, fix file path etc. Click [Save]{.title-ref}  Important If you are using P3D and you are using models outside the SimObjects folder you can add multiple other directories here.  First Model Set Wizard This wizard will help you to create a first model set for each of your simulators in use. A model set is a subset of the AI models installed on your machine, which are considered for model mapping and model matching. Without any model set, swift will not run properly.\n Select your simulator (repeat the steps below if you are using multiple simulators). Check the model directory and change it if necessary. Reload the installed AI models if necessary. This is necessary in case the number of models does not look correct to you or if you made any changes to model directories in this or the previous wizard. Optionally display and inspect the model list   Click on Create to create a model set. Save the model set. Close the dialog  Configure Hotkeys Wizard The last wizard allows you to configure hotkeys. Use this to configure your PTT key.\nRun swift Your swift suite is now configured and ready to go. Use the launcher to launch the different swift applications in different flavors and modes. For first time users, it is recommended to start swift in standalone mode. * In the core tab, select Core Mode Standalone * Click on the blue swift icon named GUI to start swift in standalone mode.\nCongratulations swift is now running on your machine and you are ready to setup everything else for your first connection to the network.\nSomething didnt work?\n Use the useswiftchecklist{.interpreted-text role=\"ref”} Check our troubleshooting{.interpreted-text role=\"ref”} page or ask for help in the usual channels.  Install FSX/P3D terrain probe We use a terrain probe object to query simulator data around the AI aircraft. We recommend you install that probe when you are using the 32bit driver versions for FSX/P3D.\nFurther details can be found here.\n","excerpt":"Initial Configuration After the installation completed, swiftlauncher …","ref":"/docs/installation/fsx/","title":"FSX"},{"body":"What is the swift datastore\nThe swift datastore is the central database for swift\n it contains all mapping information, ICAO data, model data etc. it is used to manage swift versions, download locations etc.  Register for datastore\nSee How to register for datastore\nMapping and ICAO change requests\n dataprovisioning{.interpreted-text role=\"ref”} . Shared files vs. direct database access. cr{.interpreted-text role=\"ref”} va{.interpreted-text role=\"ref”} User roles: mappingroles{.interpreted-text role=\"ref”} tracingchanges{.interpreted-text role=\"ref”}  ","excerpt":"What is the swift datastore\nThe swift datastore is the central …","ref":"/docs/manual/datastore/","title":"swift datastore"},{"body":"Initial Configuration After the installation completed, swiftlauncher will launch together with the initial configuration wizard. If you un-selected to launch swift from the installer, it is possible to run the same init mode any time later by using the command line arguments\nswiftlauncher -i --bootstrapurl https://datastore.swift-project.org/shared/\nThe rest of the section will guide you through the different wizards.\nLegal Wizard The first wizard page deals with the necessary legal bits. It will explain in detail all the licenses involved in the swift project including 3rd party software. It also provides links to data protection policies. It is necessary to accept license and data protection policy to proceed. This page also asks for your agreement to submit crash reports to our crash report collection server. In case any swift application crashed, a crash report will be generated with information which line of code caused it to abort. With your agreement, the report will be uploaded to our server and helps the developers to diagnose and fix the cause. This agreement can be changed anytime later in the advanced settings (link tbd). Read more about crash reports (link tbd) and how they look like.\nData Loading Wizard The next wizard will download all data, required by swift to be fully functional. This includes aircraft and airline ICAO data, model strings (no models itself), etc. It is not necessary to click any of the load buttons. The download will start automatically from randomly one of the shared mirror servers in the background. The button can be used to reload in case there was an update meanwhile. You can either wait for the download to finish (several seconds depending on your internet bandwidth) or continue, since it will continue in the background. The wizard indicates that all data finished loading by\n The two DB LEDs flashing yellow All other LEDs off (idle mode). The number of entries and the timestamp of the local cache are equal to the shared cache.  Copy Models Wizard Note If you installed swift the very first time on this machine, then you can skip this part.  If you had a previous version of swift installed already, then this wizard will help you to migrate your existing model cache and model set.\n Select the older version you want to migrate from the list. Select whether you want to migrate the model set and/or model cache and for which simulators. Click Start.  Read more about the meaning of model set (link tbd) and model cache (link tbd).\nCopy Settings Wizard Note If you installed swift the very first time on this machine, then you can skip this part.  If you had a previous version of swift installed already, then this wizard will help you to migrate your settings.\n Select the older version you want to migrate from the list. Select which settings needs migrating  Grey X means that no user setting is available and the default is in use.   Click copy  Read more about settings (link tbd).\nSimulator Wizard This page allows you to configure which simulators you want swift to work with. If you have multiple simulators installed and use them regularly, select all of those in the first group box. swift will detect if any of those configured simulators is running and connect to it. It will ignore the ones that have not been selected.\nIn the group box below, you are able to configure the simulator path and any additional model directories. swift will try to detect as much as possible automatically and use it as default. The default is listed in light grey. In order to configure the directories, first select the respective simulator from the radio boxes at the bottom\n Use the ... button to select/add more directories Use the adjust button to remove redundant directories, fix file path etc. Click [Save]{.title-ref}  Important If you are using P3D and you are using models outside the SimObjects folder you can add multiple other directories here.  First Model Set Wizard This wizard will help you to create a first model set for each of your simulators in use. A model set is a subset of the AI models installed on your machine, which are considered for model mapping and model matching. Without any model set, swift will not run properly.\n Select your simulator (repeat the steps below if you are using multiple simulators). Check the model directory and change it if necessary. Reload the installed AI models if necessary. This is necessary in case the number of models does not look correct to you or if you made any changes to model directories in this or the previous wizard. Optionally display and inspect the model list   Click on Create to create a model set. Save the model set. Close the dialog  Configure Hotkeys Wizard The last wizard allows you to configure hotkeys. Use this to configure your PTT key.\nRun swift Your swift suite is now configured and ready to go. Use the launcher to launch the different swift applications in different flavors and modes. For first time users, it is recommended to start swift in standalone mode. * In the core tab, select Core Mode Standalone * Click on the blue swift icon named GUI to start swift in standalone mode.\nCongratulations swift is now running on your machine and you are ready to setup everything else for your first connection to the network.\nSomething didnt work?\n Use the useswiftchecklist{.interpreted-text role=\"ref”} Check our troubleshooting{.interpreted-text role=\"ref”} page or ask for help in the usual channels.  Install FSX/P3D terrain probe We use a terrain probe object to query simulator data around the AI aircraft. We recommend you install that probe when you are using the 32bit driver versions for FSX/P3D.\nFurther details can be found here.\n","excerpt":"Initial Configuration After the installation completed, swiftlauncher …","ref":"/docs/installation/p3d/","title":"P3D (v4 or later)"},{"body":"Supported network protocols and features  VATSIM FSD and voice Legacy FSD VATSIM aircraft parts Legacy FSD gnd flag FsInn model string fast position updates  Supported simulators  XPlane FSX P3D, P3Dv4 genuine x64 SimConnect support FS9 FlightGear experimental  Supported OS  Win32, Win64 MacOS Linux  Modes  Standalone UI, single application Distributed system, running on 2 computers  UI   Single window pilot client UI\n  Multiple windows pilot client UI (dockable)\n  Mapping tool for aircraft model administration\n  Key features\n  flight plan text messages simple weather client (you can use it or any other weather tool) configurable model matching, multiple setups radar screen     Database  aircraft model database ICAO code database users can contribute models and airlines  Matching  configurable model matching matching script for own matching logic  ","excerpt":"Supported network protocols and features  VATSIM FSD and voice Legacy …","ref":"/docs/manual/features/","title":"swift features"},{"body":"Initial Configuration After the installation completed, swiftlauncher will launch together with the initial configuration wizard. If you un-selected to launch swift from the installer, it is possible to run the same init mode any time later by using the command line arguments\nswiftlauncher -i --bootstrapurl https://datastore.swift-project.org/shared/\nThe rest of the section will guide you through the different wizards.\nLegal Wizard The first wizard page deals with the necessary legal bits. It will explain in detail all the licenses involved in the swift project including 3rd party software. It also provides links to data protection policies. It is necessary to accept license and data protection policy to proceed. This page also asks for your agreement to submit crash reports to our crash report collection server. In case any swift application crashed, a crash report will be generated with information which line of code caused it to abort. With your agreement, the report will be uploaded to our server and helps the developers to diagnose and fix the cause. This agreement can be changed anytime later in the advanced settings (link tbd). Read more about crash reports (link tbd) and how they look like.\nData Loading Wizard The next wizard will download all data, required by swift to be fully functional. This includes aircraft and airline ICAO data, model strings (no models itself), etc. It is not necessary to click any of the load buttons. The download will start automatically from randomly one of the shared mirror servers in the background. The button can be used to reload in case there was an update meanwhile. You can either wait for the download to finish (several seconds depending on your internet bandwidth) or continue, since it will continue in the background. The wizard indicates that all data finished loading by\n The two DB LEDs flashing yellow All other LEDs off (idle mode). The number of entries and the timestamp of the local cache are equal to the shared cache.  Copy Models Wizard Note If you installed swift the very first time on this machine, then you can skip this part.  If you had a previous version of swift installed already, then this wizard will help you to migrate your existing model cache and model set.\n Select the older version you want to migrate from the list. Select whether you want to migrate the model set and/or model cache and for which simulators. Click Start.  Read more about the meaning of model set (link tbd) and model cache (link tbd).\nCopy Settings Wizard Note If you installed swift the very first time on this machine, then you can skip this part.  If you had a previous version of swift installed already, then this wizard will help you to migrate your settings.\n Select the older version you want to migrate from the list. Select which settings needs migrating  Grey X means that no user setting is available and the default is in use.   Click copy  Read more about settings (link tbd).\nSimulator Wizard This page allows you to configure which simulators you want swift to work with. If you have multiple simulators installed and use them regularly, select all of those in the first group box. swift will detect if any of those configured simulators is running and connect to it. It will ignore the ones that have not been selected.\nIn the group box below, you are able to configure the simulator path and any additional model directories. swift will try to detect as much as possible automatically and use it as default. The default is listed in light grey. In order to configure the directories, first select the respective simulator from the radio boxes at the bottom\n Use the ... button to select/add more directories Use the adjust button to remove redundant directories, fix file path etc. Click [Save]{.title-ref}  Important If you are using P3D and you are using models outside the SimObjects folder you can add multiple other directories here.  First Model Set Wizard This wizard will help you to create a first model set for each of your simulators in use. A model set is a subset of the AI models installed on your machine, which are considered for model mapping and model matching. Without any model set, swift will not run properly.\n Select your simulator (repeat the steps below if you are using multiple simulators). Check the model directory and change it if necessary. Reload the installed AI models if necessary. This is necessary in case the number of models does not look correct to you or if you made any changes to model directories in this or the previous wizard. Optionally display and inspect the model list   Click on Create to create a model set. Save the model set. Close the dialog  Configure Hotkeys Wizard The last wizard allows you to configure hotkeys. Use this to configure your PTT key.\nRun swift Your swift suite is now configured and ready to go. Use the launcher to launch the different swift applications in different flavors and modes. For first time users, it is recommended to start swift in standalone mode. * In the core tab, select Core Mode Standalone * Click on the blue swift icon named GUI to start swift in standalone mode.\nCongratulations swift is now running on your machine and you are ready to setup everything else for your first connection to the network.\nSomething didnt work?\n Use the useswiftchecklist{.interpreted-text role=\"ref”} Check our troubleshooting{.interpreted-text role=\"ref”} page or ask for help in the usual channels.  Install FSX/P3D terrain probe We use a terrain probe object to query simulator data around the AI aircraft. We recommend you install that probe when you are using the 32bit driver versions for FSX/P3D.\nFurther details can be found here.\n","excerpt":"Initial Configuration After the installation completed, swiftlauncher …","ref":"/docs/installation/p3dv3/","title":"P3D (v1-v3)"},{"body":"  Misc:\n  useswiftchecklist{.interpreted-text role=\"ref”} fs9mp{.interpreted-text role=\"ref”} p3d32vs64bit{.interpreted-text role=\"ref”} , see also p3dspecific{.interpreted-text role=\"ref”} XPlane in fullscreen mode and swift, an idea: spacedesk{.interpreted-text role=\"ref”} Backup swift \u003cfindcachefiles\u003e{.interpreted-text role=\"ref”}, or exportmodelset{.interpreted-text role=\"ref”} partsandgndflag{.interpreted-text role=\"ref”} registrydelete{.interpreted-text role=\"ref”} Testing own models offline: modelbrowser{.interpreted-text role=\"ref”}     Simulator related / connection with simulator:\n  cannotconnectsim{.interpreted-text role=\"ref”} xswiftbussettings{.interpreted-text role=\"ref”} (XPlane only) xplanedriversettings{.interpreted-text role=\"ref”} (XPlane only) fs9remote{.interpreted-text role=\"ref”} (FS9) fsuipc{.interpreted-text role=\"ref”} (FS9)     swift model set and matching\n  whentoupdatems{.interpreted-text role=\"ref”} addtoms{.interpreted-text role=\"ref”} createms{.interpreted-text role=\"ref”} matchingresult{.interpreted-text role=\"ref”} and whyb74f{.interpreted-text role=\"ref”} notrendered{.interpreted-text role=\"ref”} nodbmodel{.interpreted-text role=\"ref”}     Find important files\n  findlogfiles{.interpreted-text role=\"ref”} findcachefiles{.interpreted-text role=\"ref”} findqss{.interpreted-text role=\"ref”}     Tracing and debugging\n   tracingmatching{.interpreted-text role=\"ref”} (understand why you see the model you see)\n  tracingnetwork{.interpreted-text role=\"ref”}\n  tracingparts{.interpreted-text role=\"ref”}\n  tracinginterpolation{.interpreted-text role=\"ref”} , see also\n  tracinginterpolationonground{.interpreted-text role=\"ref”} interpolationexamples{.interpreted-text role=\"ref”}     tracingsimconnect{.interpreted-text role=\"ref”}\n  interpolationdisplay{.interpreted-text role=\"ref”}\n  createcrashdump{.interpreted-text role=\"ref”}\n     Sound, notifications\n  nonotification{.interpreted-text role=\"ref”} notificationsounds_tweak{.interpreted-text role=\"ref”} nomiconwindows{.interpreted-text role=\"ref”}     ::: {.toctree caption=\"Content in this chapter”} swiftadvanced partsandgndflag cannotconnectsim fs9mp crashreports createcrashdump registrydelete tracinginterpolationonground fsxaimodel findcachefiles findlogfiles findqss interpolationexamples interpolationdisplay mm nomiconwindows notrendered ./mapping/mapping ./matching/matching ./modelsandmodelset/modelsandmodelset nonotification macosnosound ./faq/faq savewindow modelbrowser tracingsimconnect tracingparts tracinginterpolation tracingnetwork notificationsounds spacedesk xplanedatarefs dotcommands swiftuiconcepts fs9remote swiftcmdargs crashafterstartup swiftdevcmdargs notstarting :::\n","excerpt":"  Misc:\n  useswiftchecklist{.interpreted-text role=\"ref”} …","ref":"/docs/manual/swiftgeneral/","title":"swift general (troubleshooting, concepts, adv.topics)"},{"body":"Initial Configuration After the installation completed, swiftlauncher will launch together with the initial configuration wizard. If you un-selected to launch swift from the installer, it is possible to run the same init mode any time later by using the command line arguments\nswiftlauncher -i --bootstrapurl https://datastore.swift-project.org/shared/\nThe rest of the section will guide you through the different wizards.\nLegal Wizard The first wizard page deals with the necessary legal bits. It will explain in detail all the licenses involved in the swift project including 3rd party software. It also provides links to data protection policies. It is necessary to accept license and data protection policy to proceed. This page also asks for your agreement to submit crash reports to our crash report collection server. In case any swift application crashed, a crash report will be generated with information which line of code caused it to abort. With your agreement, the report will be uploaded to our server and helps the developers to diagnose and fix the cause. This agreement can be changed anytime later in the advanced settings (link tbd). Read more about crash reports (link tbd) and how they look like.\nData Loading Wizard The next wizard will download all data, required by swift to be fully functional. This includes aircraft and airline ICAO data, model strings (no models itself), etc. It is not necessary to click any of the load buttons. The download will start automatically from randomly one of the shared mirror servers in the background. The button can be used to reload in case there was an update meanwhile. You can either wait for the download to finish (several seconds depending on your internet bandwidth) or continue, since it will continue in the background. The wizard indicates that all data finished loading by\n The two DB LEDs flashing yellow All other LEDs off (idle mode). The number of entries and the timestamp of the local cache are equal to the shared cache.  Copy Models Wizard Note If you installed swift the very first time on this machine, then you can skip this part.  If you had a previous version of swift installed already, then this wizard will help you to migrate your existing model cache and model set.\n Select the older version you want to migrate from the list. Select whether you want to migrate the model set and/or model cache and for which simulators. Click Start.  Read more about the meaning of model set (link tbd) and model cache (link tbd).\nCopy Settings Wizard Note If you installed swift the very first time on this machine, then you can skip this part.  If you had a previous version of swift installed already, then this wizard will help you to migrate your settings.\n Select the older version you want to migrate from the list. Select which settings needs migrating  Grey X means that no user setting is available and the default is in use.   Click copy  Read more about settings (link tbd).\nSimulator Wizard This page allows you to configure which simulators you want swift to work with. If you have multiple simulators installed and use them regularly, select all of those in the first group box. swift will detect if any of those configured simulators is running and connect to it. It will ignore the ones that have not been selected.\nIn the group box below, you are able to configure the simulator path and any additional model directories. swift will try to detect as much as possible automatically and use it as default. The default is listed in light grey. In order to configure the directories, first select the respective simulator from the radio boxes at the bottom\n Use the ... button to select/add more directories Use the adjust button to remove redundant directories, fix file path etc. Click [Save]{.title-ref}  Important If you are using P3D and you are using models outside the SimObjects folder you can add multiple other directories here.  First Model Set Wizard This wizard will help you to create a first model set for each of your simulators in use. A model set is a subset of the AI models installed on your machine, which are considered for model mapping and model matching. Without any model set, swift will not run properly.\n Select your simulator (repeat the steps below if you are using multiple simulators). Check the model directory and change it if necessary. Reload the installed AI models if necessary. This is necessary in case the number of models does not look correct to you or if you made any changes to model directories in this or the previous wizard. Optionally display and inspect the model list   Click on Create to create a model set. Save the model set. Close the dialog  Configure Hotkeys Wizard The last wizard allows you to configure hotkeys. Use this to configure your PTT key.\nRun swift Your swift suite is now configured and ready to go. Use the launcher to launch the different swift applications in different flavors and modes. For first time users, it is recommended to start swift in standalone mode. * In the core tab, select Core Mode Standalone * Click on the blue swift icon named GUI to start swift in standalone mode.\nCongratulations swift is now running on your machine and you are ready to setup everything else for your first connection to the network.\nSomething didnt work?\n Use the useswiftchecklist{.interpreted-text role=\"ref”} Check our troubleshooting{.interpreted-text role=\"ref”} page or ask for help in the usual channels.  ","excerpt":"Initial Configuration After the installation completed, swiftlauncher …","ref":"/docs/installation/fs9/","title":"FS9"},{"body":"Initial Configuration After the installation completed, swiftlauncher will launch together with the initial configuration wizard. If you un-selected to launch swift from the installer, it is possible to run the same init mode any time later by using the command line arguments\nswiftlauncher -i --bootstrapurl https://datastore.swift-project.org/shared/\nThe rest of the section will guide you through the different wizards.\nLegal Wizard The first wizard page deals with the necessary legal bits. It will explain in detail all the licenses involved in the swift project including 3rd party software. It also provides links to data protection policies. It is necessary to accept license and data protection policy to proceed. This page also asks for your agreement to submit crash reports to our crash report collection server. In case any swift application crashed, a crash report will be generated with information which line of code caused it to abort. With your agreement, the report will be uploaded to our server and helps the developers to diagnose and fix the cause. This agreement can be changed anytime later in the advanced settings (link tbd). Read more about crash reports (link tbd) and how they look like.\nData Loading Wizard The next wizard will download all data, required by swift to be fully functional. This includes aircraft and airline ICAO data, model strings (no models itself), etc. It is not necessary to click any of the load buttons. The download will start automatically from randomly one of the shared mirror servers in the background. The button can be used to reload in case there was an update meanwhile. You can either wait for the download to finish (several seconds depending on your internet bandwidth) or continue, since it will continue in the background. The wizard indicates that all data finished loading by\n The two DB LEDs flashing yellow All other LEDs off (idle mode). The number of entries and the timestamp of the local cache are equal to the shared cache.  Copy Models Wizard Note If you installed swift the very first time on this machine, then you can skip this part.  If you had a previous version of swift installed already, then this wizard will help you to migrate your existing model cache and model set.\n Select the older version you want to migrate from the list. Select whether you want to migrate the model set and/or model cache and for which simulators. Click Start.  Read more about the meaning of model set (link tbd) and model cache (link tbd).\nCopy Settings Wizard Note If you installed swift the very first time on this machine, then you can skip this part.  If you had a previous version of swift installed already, then this wizard will help you to migrate your settings.\n Select the older version you want to migrate from the list. Select which settings needs migrating  Grey X means that no user setting is available and the default is in use.   Click copy  Read more about settings (link tbd).\nSimulator Wizard This page allows you to configure which simulators you want swift to work with. If you have multiple simulators installed and use them regularly, select all of those in the first group box. swift will detect if any of those configured simulators is running and connect to it. It will ignore the ones that have not been selected.\nIn the group box below, you are able to configure the simulator path and any additional model directories. swift will try to detect as much as possible automatically and use it as default. The default is listed in light grey. In order to configure the directories, first select the respective simulator from the radio boxes at the bottom\n Use the ... button to select/add more directories Use the adjust button to remove redundant directories, fix file path etc. Click [Save]{.title-ref}  Important If you are using P3D and you are using models outside the SimObjects folder you can add multiple other directories here.  First Model Set Wizard This wizard will help you to create a first model set for each of your simulators in use. A model set is a subset of the AI models installed on your machine, which are considered for model mapping and model matching. Without any model set, swift will not run properly.\n Select your simulator (repeat the steps below if you are using multiple simulators). Check the model directory and change it if necessary. Reload the installed AI models if necessary. This is necessary in case the number of models does not look correct to you or if you made any changes to model directories in this or the previous wizard. Optionally display and inspect the model list   Click on Create to create a model set. Save the model set. Close the dialog  Configure Hotkeys Wizard The last wizard allows you to configure hotkeys. Use this to configure your PTT key.\nRun swift Your swift suite is now configured and ready to go. Use the launcher to launch the different swift applications in different flavors and modes. For first time users, it is recommended to start swift in standalone mode. * In the core tab, select Core Mode Standalone * Click on the blue swift icon named GUI to start swift in standalone mode.\nCongratulations swift is now running on your machine and you are ready to setup everything else for your first connection to the network.\nSomething didnt work?\n Use the useswiftchecklist{.interpreted-text role=\"ref”} Check our troubleshooting{.interpreted-text role=\"ref”} page or ask for help in the usual channels.  ","excerpt":"Initial Configuration After the installation completed, swiftlauncher …","ref":"/docs/installation/fg/","title":"Flightgear"},{"body":"  The launcher is started when swift is installed\n  You can use it to configure\n  how swift is started (standalone, distributed) how the UI looks     to download updates\n  and model data from swift datastore \u003cdatastore\u003e{.interpreted-text role=\"ref”}\n  start a standalone / distributed swift   To start standalone just select this mode and press the blue GUI button.\n  To start a distributed swift, select the mode:\n  If you want to run both (core/UI) on the same machine try to start the core on session bus, then the UI also on session bus. If this does not work, try P2P on localhost and the client on localhost. If you run on 2 machines, start P2P core on machine on machine A, and P2P UI on machine B (of course the IP-address needs to be correct).     Hint: You can also start a distributed version via command line arguments: swiftcmdargs{.interpreted-text role=\"ref”}\n  checking for updates / new data   swift comes in different versions\n  select the appropriate channel\n  For alpha you need to be a registered user. Read here about the alpha program \u003calpha\u003e{.interpreted-text role=\"ref”} stable is the channel for \"normal\" users. you can switch the channel at anytime, also you can install multiple swift versions \u003cinstallation\u003e{.interpreted-text role=\"ref”}     see here which version to download \u003cpublicdownload\u003e{.interpreted-text role=\"ref”}\n  configuration wizard You can start the configuration wizard from the launcher. Normally the configuration wizard will be launched when the installer finishes. The configuration wizard allows you to set default values for the most important setting values and download the DB data.\nSee launcher_wizard{.interpreted-text role=\"ref”}\n","excerpt":"  The launcher is started when swift is installed\n  You can use it to …","ref":"/docs/manual/launcher/","title":"swift launcher"},{"body":"Initial Configuration After the installation completed, swiftlauncher will launch together with the initial configuration wizard. If you un-selected to launch swift from the installer, it is possible to run the same init mode any time later by using the command line arguments\nswiftlauncher -i --bootstrapurl https://datastore.swift-project.org/shared/\nThe rest of the section will guide you through the different wizards.\nLegal Wizard The first wizard page deals with the necessary legal bits. It will explain in detail all the licenses involved in the swift project including 3rd party software. It also provides links to data protection policies. It is necessary to accept license and data protection policy to proceed. This page also asks for your agreement to submit crash reports to our crash report collection server. In case any swift application crashed, a crash report will be generated with information which line of code caused it to abort. With your agreement, the report will be uploaded to our server and helps the developers to diagnose and fix the cause. This agreement can be changed anytime later in the advanced settings (link tbd). Read more about crash reports (link tbd) and how they look like.\nData Loading Wizard The next wizard will download all data, required by swift to be fully functional. This includes aircraft and airline ICAO data, model strings (no models itself), etc. It is not necessary to click any of the load buttons. The download will start automatically from randomly one of the shared mirror servers in the background. The button can be used to reload in case there was an update meanwhile. You can either wait for the download to finish (several seconds depending on your internet bandwidth) or continue, since it will continue in the background. The wizard indicates that all data finished loading by\n The two DB LEDs flashing yellow All other LEDs off (idle mode). The number of entries and the timestamp of the local cache are equal to the shared cache.  Copy Models Wizard Note If you installed swift the very first time on this machine, then you can skip this part.  If you had a previous version of swift installed already, then this wizard will help you to migrate your existing model cache and model set.\n Select the older version you want to migrate from the list. Select whether you want to migrate the model set and/or model cache and for which simulators. Click Start.  Read more about the meaning of model set (link tbd) and model cache (link tbd).\nCopy Settings Wizard Note If you installed swift the very first time on this machine, then you can skip this part.  If you had a previous version of swift installed already, then this wizard will help you to migrate your settings.\n Select the older version you want to migrate from the list. Select which settings needs migrating  Grey X means that no user setting is available and the default is in use.   Click copy  Read more about settings (link tbd).\nSimulator Wizard This page allows you to configure which simulators you want swift to work with. If you have multiple simulators installed and use them regularly, select all of those in the first group box. swift will detect if any of those configured simulators is running and connect to it. It will ignore the ones that have not been selected.\nIn the group box below, you are able to configure the simulator path and any additional model directories. swift will try to detect as much as possible automatically and use it as default. The default is listed in light grey. In order to configure the directories, first select the respective simulator from the radio boxes at the bottom\n Use the ... button to select/add more directories Use the adjust button to remove redundant directories, fix file path etc. Click [Save]{.title-ref}  Important If you are using P3D and you are using models outside the SimObjects folder you can add multiple other directories here.  First Model Set Wizard This wizard will help you to create a first model set for each of your simulators in use. A model set is a subset of the AI models installed on your machine, which are considered for model mapping and model matching. Without any model set, swift will not run properly.\n Select your simulator (repeat the steps below if you are using multiple simulators). Check the model directory and change it if necessary. Reload the installed AI models if necessary. This is necessary in case the number of models does not look correct to you or if you made any changes to model directories in this or the previous wizard. Optionally display and inspect the model list   Click on Create to create a model set. Save the model set. Close the dialog  Configure Hotkeys Wizard The last wizard allows you to configure hotkeys. Use this to configure your PTT key.\nRun swift Your swift suite is now configured and ready to go. Use the launcher to launch the different swift applications in different flavors and modes. For first time users, it is recommended to start swift in standalone mode. * In the core tab, select Core Mode Standalone * Click on the blue swift icon named GUI to start swift in standalone mode.\nCongratulations swift is now running on your machine and you are ready to setup everything else for your first connection to the network.\nSomething didnt work?\n Use the useswiftchecklist{.interpreted-text role=\"ref”} Check our troubleshooting{.interpreted-text role=\"ref”} page or ask for help in the usual channels.  Install XSwiftBus swift - in contrast to other X-Plane clients - is running outside of the X-Plane process. In order to communicate with the X-Plane process and render AI aircraft, a small plugin called XSwiftBus is necessary. It needs to be installed into X-Plane/Resources/plugins. This wizard will download and install it for you.\n Confirm the install directory is correct or change it as necessary. Check and correct the temporary download folder. Choose a version to install (it is strongly recommended to use the same version as swift itself). Click on download. Answer Ok in the dialog to extract and install the package directly into X-Plane. In case 7z is not available on your machine (Mac OS users!), you will receive an error message and will have to extract it yourself. It is recommended to keep the default for the connection settings.  Read more about Installing and updating XSwiftBus \u003cxswiftbusinstallation\u003e{.interpreted-text role=\"ref”}\n","excerpt":"Initial Configuration After the installation completed, swiftlauncher …","ref":"/docs/installation/xplane/","title":"X-Plane"},{"body":"Tool for creating mappings in the swift DB\n  swiftuiconcepts{.interpreted-text role=\"ref”}\n  mttabs{.interpreted-text role=\"ref”}\n  mm{.interpreted-text role=\"ref”}\n  Mappings\n  createmappings{.interpreted-text role=\"ref”} and mapfsstandardmodels{.interpreted-text role=\"ref”} changemapping{.interpreted-text role=\"ref”} dataprovisioning{.interpreted-text role=\"ref”} maphints{.interpreted-text role=\"ref”} and problemsmapping{.interpreted-text role=\"ref”} Simulator specific: xplanemapping{.interpreted-text role=\"ref”} | p3dspecific{.interpreted-text role=\"ref”} and cross simulator flags \u003cp3dspecific\u003e{.interpreted-text role=\"ref”} Related: Pilot client instant mapping \u003cinstantmap\u003e{.interpreted-text role=\"ref”} Understanding dbroles{.interpreted-text role=\"ref”} . what users can do (access rights).     Model sets\n  modelset{.interpreted-text role=\"ref”} createms{.interpreted-text role=\"ref”} addtoms{.interpreted-text role=\"ref”} rankmodelset{.interpreted-text role=\"ref”} and distributorprefs{.interpreted-text role=\"ref”} modelsetduplicates{.interpreted-text role=\"ref”} tuningset{.interpreted-text role=\"ref”} whentoupdatems{.interpreted-text role=\"ref”} testmodelset{.interpreted-text role=\"ref”}     Data consolidation: whydataconsolidation{.interpreted-text role=\"ref”}\n  reloaddbdata{.interpreted-text role=\"ref”} Automatically: backupdate{.interpreted-text role=\"ref”} Manually: consolidation{.interpreted-text role=\"ref”} During a model update the data will also be \"consolidated\", see updatemodeldata{.interpreted-text role=\"ref”}     Integration with mcx{.interpreted-text role=\"ref”}\n  Request new ICAO codes \u003ccr\u003e{.interpreted-text role=\"ref”}\n  Request new distributors -\u003e ask us to do it, feature still missing\n  Tutorials\n smttutorials{.interpreted-text role=\"ref”}  ::: {.toctree caption=\"Content in this chapter”} acfexcluded backupdate changemapping ./createmappings/createmappings distributorprefs excludedmodels p3dspecific maintainmultiplemodelsets ./mttabs/mttabs mcx problemsmapping rankmodelset seemymappings whydataconsolidation xplanemapping consolidation smttutorials :::\n","excerpt":"Tool for creating mappings in the swift DB …","ref":"/docs/manual/smt/","title":"swift mapping tool"},{"body":"swift pilot client system\nThe pilot client consist of 3 sub components:\n the pilot client UI can be used standalone or in a distributed environment. the core \u003ccore\u003e{.interpreted-text role=\"ref”}, acting as a server when you want to use swift on a second computer. the launcher \u003clauncher\u003e{.interpreted-text role=\"ref”} used for installations, starting the other components, or updates. The mapping tool is an independent program and described here \u003csmt\u003e{.interpreted-text role=\"ref”}.  Topics\n flightwithswift{.interpreted-text role=\"ref”} sharedcockpit{.interpreted-text role=\"ref”} flightplan{.interpreted-text role=\"ref”} swiftgeneral{.interpreted-text role=\"ref”} textmsg{.interpreted-text role=\"ref”} spcmm{.interpreted-text role=\"ref”} instantmap{.interpreted-text role=\"ref”} connectnw{.interpreted-text role=\"ref”} towerview{.interpreted-text role=\"ref”} configuresim{.interpreted-text role=\"ref”} userdata{.interpreted-text role=\"ref”} , where swift stores application data p3dremote{.interpreted-text role=\"ref”} , configure P3D and FSX for remote [SimConnect]{.title-ref} access p3d32vs64bit{.interpreted-text role=\"ref”} integratecomunit{.interpreted-text role=\"ref”} textmsg{.interpreted-text role=\"ref”}  Tutorials\n spctutorials{.interpreted-text role=\"ref”}  ::: {.toctree caption=\"Content in this chapter”} advloginscreen connectnw flightplan ./flightwithswift/flightwithswift hotkeys instantmap launcher_wizard ./modelsetvalidation/modelsetvalidation p3dremote p3d32vs64bit ./settings/settings towerview updatemodeldata fsuipc audio core spcmm textmsg spctutorials pctutorials userdata :::\n","excerpt":"swift pilot client system\nThe pilot client consist of 3 sub …","ref":"/docs/manual/spc/","title":"swift pilot client system"},{"body":"We are an independent (private/non-commercial) software project creating open source software for flight simulation.\n","excerpt":"We are an independent (private/non-commercial) software project …","ref":"/docs/","title":"Documentation"},{"body":"","excerpt":"","ref":"/blog/news/","title":"News About Docsy"},{"body":"","excerpt":"","ref":"/blog/releases/","title":"New Releases"},{"body":" swift know-how page, mostly technical docu Backtrace: https://swift-project.sp.backtrace.io  ","excerpt":" swift know-how page, mostly technical docu Backtrace: …","ref":"/docs/knowhow/","title":"Know how"},{"body":"We would like to share our workload. So if you are interested in joining the swift team you are welcome.\nOrganisational  Team language is English  Programmers  the swift pilot client, core and mapping tool are written in C++/Qt. You can help to improve the core functionality and add new features A MacOS enthusiast is needed to further integrate Apple specific functionality PHP/JavaScript programmers could help to improve swift datastore (LAMP based), the backend DB for mappings. The datastore also provides web services for swift and we plan to improve the feature in the future. Or you could help to integrate swift map, the moving map Getting started as a developer Open tasks  Designers  Help to streamline/facelift the various swift UI by creating icons, UI elements and such. Open tasks  Model mapping  No programming knowledge required, help by creating model mappings or even lead the mapping effort by becoming a team member swift mapping tool Mapping hints and FAQs  Authors  You could always help by improving the swift help system or creating tutorials. Other users will appreciate.  ","excerpt":"We would like to share our workload. So if you are interested in …","ref":"/docs/gi/","title":"Getting involved"},{"body":"See also:  Know-How Doygen  ","excerpt":"See also:  Know-How Doygen  ","ref":"/docs/dev/","title":"Developer documentation"},{"body":" Note Those model bundles/libraries are external links! You need to respect the copyright of the owners. The projects are unrelated to swift  Select your simulator:   FSX\n  P3D (v1-v4)\n  P3D (v4 or later)\n  FS9\n  X-Plane\n  Flightgear\n  ","excerpt":" Note Those model bundles/libraries are external links! You need to …","ref":"/docs/installation/downloadmodels/","title":"Download aircraft models"},{"body":" This page is hosted on Github via Github Pages. For privacy policy see https://docs.github.com/en/github/site-policy/github-privacy-statement For online flights on VATSIM (external) please see https://www.vatsim.net/documents/privacy-policy  ","excerpt":" This page is hosted on Github via Github Pages. For privacy policy …","ref":"/docs/legal/","title":"Legal"},{"body":" swift is about to move to Github. Further information will be posted when the transfer has been completed.  The site https://dev.swift-project.org/ will disappear and equivalent services will be provided by Github instead.  This includes the source code, user manual, and issue tracker which will all be hosted by Github.   The swift database will be moved to another server. Discord will remain as is.   As a result you might face temporary downtimes of those services. This will NOT stop you from using swift for online flying. We will try to keep those downtimes to a minimum. Klaus Basan will be retiring from his position with swift (private reasons) and no longer be available for support questions regarding swift.  ","excerpt":" swift is about to move to Github. Further information will be posted …","ref":"/blog/2020/06/11/organizational-changes/","title":"Organizational changes"},{"body":"Installation We recommend to keep the latest 093 until 094 works for you. See copyswiftdata{.interpreted-text role=\"ref”} .\nVersion numbering The 4th component of the version number is now based on the number of code changes, instead of the build date, so the full version numbers should be easier to read:\n Example old version number: 0.9.3.912280030 Example new version number: 0.9.4.24  Qt 5.14 Version 0.9.4 of swift now uses Qt 5.14.x (or later). This means\n swift layout on 4k display might look different IMPORTANT: if you use external style sheets these may need to be adjusted. We have made some smaller adjustments to the qss (swift stylesheet) and the external style sheets needs to be updated to reflect those changes. See ALSO BELOW! some audio issues are hopefully fixed like the MIC 100% issue on Windows  WASAPI driver The WASAPI driver caused problems/crashes for some people. We have disabled the driver per default. To use it just copy it back, see Troubleshoot voice (troubleshootvoice{.interpreted-text role=\"ref”} ) WASAPI\nX-Plane  The xSwiftBus version compatibility check has been made smarter, which should result in fewer false positive warnings being generated. The sim frame rate can be seen in swift's simulator info screen. This is important when flying online, due to X-Plane's time warping at frame rates under 20 FPS. Log messages when the terrain probe fails to find the ground elevation. This may be useful to diagnose planes going underground. Also TCAS can be disabled. Ability to disable terrain probe. This may be useful to diagnose performance problems. fixes for T778, underground XPlane aircraft  Flightgear  Traffic will be displayed within Flightgears maps (Nasal map, Nav-Displays etc.) Introducing a more strict compatibility check, which checks the swift\u003c-\u003eFlightgear API version on connection via dbus. Other aircraft on the ground are now really set to Flightgear's ground altitude and not hovering anymore.  Fixed bugs:\n TEMP WORKAROUND: Disabled crashpad for Linux as it is buggy (will be re-enabled as soon as it is fixed) SSL libs no longer depend on VisualStudio 2010 redistributable DLLs Issues with closed floating windows tabs with no name must not cause an ASSERT FSD messages we do not need ignored NaN assert fix audio settings on remote UI no need to stop/start audio on remote UI anymore Q_UNREACHABLE in other networks if pilot rating is unknown Misc. interpolation/ground elevation issues have been fixed: Ground elevation improvements: T773 Using -1 instead of NOT for inverse FS pitch/bank (same as vPilot and xPilot)  Features  Flight plan templates: T733 Timestamps for XPlane logs, hopefully helping when investigating issues Splitter for ATIS T783  Style sheet changes Those are the latest style sheet changes, so you can adjust custom style sheets\n","excerpt":"Installation We recommend to keep the latest 093 until 094 works for …","ref":"/blog/2020/01/03/release-of-0.9.4/","title":"Release of 0.9.4"},{"body":"swift 093 is the 1st AFV version swift 093 is the first version of swift with AFV integrated. This is released as alpha version, as we still expect some issues. Your feedback is welcome.\n Again, currently we are in a TESTING stage, \"alpha\" software, see https://en.wikipedia.org/wiki/Software_release_life_cycle#Alpha Discord support: https://discord.gg/ndqBvHQ Download: https://datastore.swift-project.org/page/publicartifacts.php  Warning The 0.9.3 versions do NOT work with the old VATSIM voice servers, only with AFV.  Fixed issues in 093 What is AFV? Audio for VATSIM (AFV) is the new voice codec for VATSIM, more information can be found here and here.\nVATSIM will be offline for scheduled maintenance for 24 hours, from 2019-10-13 2000z until 2019-10-14 2000z. During that time, the network will migrate over to the new codec, and the old codec will stop working. If you want to continue using swift 0.9.2 beta after that time, you will need to install an extra piece of software: the AFV standalone client, which works on Windows only.\nWASAPI audio plugin (Windows) PLEASE READ: Troubleshoot voice\nVoice room connect error (swift 0.9.2)  If you use 0.9.2 or earlier, you might see that error. It happens because VATSIM now uses some invalid voice room URLs. Solution: use 0.9.3. if you dare, but read the above.  ","excerpt":"swift 093 is the 1st AFV version swift 093 is the first version of …","ref":"/blog/2019/10/26/release-of-0.9.3/","title":"Release of 0.9.3"},{"body":" Reset your matching settings, then save them (Reset ALL and SAVE settings). Then set it according to your needs and save again, see Matching settings, using models without mapping entry / no DB entry. Most likely you also need to save your audio settings again, as those have changed and need to be updated.\n XPlane users, if you install a test version (developer/aka alpha version) you have to manually install XSwiftBus! You can download it from the alpha download page, see Download developer and alpha versions from datastore .\n Installation We recommend you install 0.9.2 parallel to 0.9.1, then test it and if your are happy with it, uninstall 0.9.1. There is no need to re-create your model set, you can copy settings and data from other swift installations at any time in the wizard.\nSee copyswiftdata{.interpreted-text role=\"ref”}\nFixes/Features  List of bug fixes A first version of matching script, see ms{.interpreted-text role=\"ref”} Airline groups now can be configured for their matching behaviour Logged interpolation now exports values as kml which can be verified in Google Earth. See how to log. interpolation here: Tracing interpolation. You will find the log files here: Find swift log files, crashdump files, interpolation log. files, the kml files are in the same directory. Linear interpolation was broken, hopefully now fixed DB values can be used for CG/vertical offset Forcible closed connection, see T698. In order to investigate we have added a network packets statistics which will hopefully help us to find the issue, still under investigation . But when you face the issue, sending the statistics file from the log directory will help us - Find swift log files, crashdump files, interpolation log. files. See Tracing network packets (FSD log) and network statistics how to enable. The COM1/2 features are available as experimental feature: T609 T675 See Integrate COM unit, sync with cockpit COM unit Auto publish, swift can automatically \"learn\" values for DB updates. Own aircraft values can be used for ground elevation, see \"record gnd. position\" Spline interpolation bugs fixed You can set the focus for the overlay messages X-Plane fixes  Some TCAS displays were not workin Aircraft labels were too small on very high resolution displays   Voice ATIS is now disabled whenever XSwiftBus is enabled Fixed weather as NOAA has changed its format Fixed support for international characters in text chat (see how to choose a text codec) Incognito mode for streaming: Incognito mode (hide names for streaming) Avoid FG crash with no model set Support for SVFR et.al. Flight plans can be downloaded from SimBrief more detailed XPlane settings advanced login screen to modify/set livery, model string and partner callsign (pilot/co-pilot), see Advanced login popup (since 0.9.2) the sort order of text messages can be changed.  ","excerpt":" Reset your matching settings, then save them (Reset ALL and SAVE …","ref":"/blog/2019/05/21/release-of-0.9.2/","title":"Release of 0.9.2"},{"body":"Fixed various issues.\n","excerpt":"Fixed various issues.\n","ref":"/blog/2019/04/27/release-of-0.9.0/","title":"Release of 0.9.0"},{"body":" Warning Testers/alpha users need to manually install XSwiftBus (download and copy)   Version 0.9.1 fixes some bugs  the critical FSD packet bug some XPlane aircraft issues, causing aircraft not correctly removed from XP fixed an UI based crash which could crash swift mapping tool when floating windows   now hot plug and play for joystick hotkeys swift does now proceed with connection to xswiftbus even if versions do not match XPlane CSL no longer stops parsing xsb\\_aircraft.txt if an error occurred. Various other bugfixes.  We recommend you install 0.9.1 parallel to 0.9.0, then test it and if your are happy with it, uninstall 0.9.0. There is no need to re-create your model set, you can copy settings and data from other swift installations at any time in the wizard.\nSee: https://swift-project.github.io/docs/installation/copyswiftdata/\n","excerpt":" Warning Testers/alpha users need to manually install XSwiftBus …","ref":"/blog/2019/04/27/release-of-0.9.1/","title":"Release of 0.9.1"},{"body":"  Fixed various issues\n  Add category matching (only gliders so far)\n  Added more notification sounds\n  Rember remarks\n  XPDR mode in status bar\n  Add FS9 Time, COM and XPDR synchronisation\n  Initial FlightGear support\n  ","excerpt":"  Fixed various issues\n  Add category matching (only gliders so far) …","ref":"/blog/2019/03/20/release-of-0.8.9/","title":"Release of 0.8.9"},{"body":" Fixed various issues Add possiblity to tune modelset Fix XPlane model strings  ","excerpt":" Fixed various issues Add possiblity to tune modelset Fix XPlane model …","ref":"/blog/2018/11/30/release-of-0.8.7/","title":"Release of 0.8.7"},{"body":" XPlane plugin no longer uses Qt classes. Rational: No longer a problem with other XPlane plugins using Qt XPlane testing Interpolation improvements Model loader improvmenets Wizards improvements Model matching configurable  ","excerpt":" XPlane plugin no longer uses Qt classes. Rational: No longer a …","ref":"/blog/2018/07/31/release-of-0.8.5/","title":"Release of 0.8.5"},{"body":" swift now supports the gnd. flag (on top of supporting the gnd flag from aircraft parts). It sends the gnd flag, and supports incoming gnd flag. As there is no reliable detection of the gnd flag capability, a client is marked \"gnd flag supporting\" if a) a valid true gnd flag is received, or b) the client is manually set to gnd flag supporting via the context menu. XSwiftBus no longer relies on the Qt libraries, that means there is no longer a clash when another add-on uses Qt libs in XPlane an airplane can be followed, from the swift menu, in P3D / FSX that feature is pending ground elevation queries have been unified among XP/P3D/FSX: all three allow to query the gnd elevation at an arbitrary position XPlane and FSX drivers now use a common concept / codebase for interpolation some adjustments have been made to be the new GDPR requirements (legal) gnd guessing for aircraft without any gnd. information have been improved. improved interpolation logging capabilities FS9 support currently is experimental only, we focus on P3D/XPlane/FSX. FS9 development consumes a lot of time due to the fact it is the oldest platform. Plus the number of users using it is decreasing, people start to use P3D or XPlane instead. Many small bugfixes  ","excerpt":" swift now supports the gnd. flag (on top of supporting the gnd flag …","ref":"/blog/2017/09/01/release-of-0.8.4/","title":"Release of 0.8.4"},{"body":" Various bug fixes deleted outdated XP models with old keys Added server types to FSD settings  This allows to select server type in FSD settings swift can now be used to connect to VATSIM and legacy FSD servers   Added ICAO IATA and swift specific descriptions. This allows to better identify the ICAO code Improved adding of AI traffic in FSX (only one object per time) Fixed missing network query: removedXP models stll using the old key fixed bug in VATSIM data fileparsing improved reverse lookup Emulated driver Online detection Refactoring detect equal models in DB data, do not publish those Download XSwiftBus from launcher/wizard Backend: Now supports livery CRs Backend: Equal mappings will be detected. Improved setup loading Logout to network can be stopped Backend improvements SVFR change for flight plan genuine x64 P3D v4 driver  ","excerpt":" Various bug fixes deleted outdated XP models with old keys Added …","ref":"/blog/2017/06/12/release-of-0.8.3/","title":"Release of 0.8.3"},{"body":" Improvements in logging to help diagnose bugs Fixed bug connecting pilot client to X-Plane Fixed airline filter bug Filter by database ID Fixed loading models via context menu New tooltips \"Do not show again\" checkbox for auto-updater Remember previously used folder for load/save dialog  ","excerpt":" Improvements in logging to help diagnose bugs Fixed bug connecting …","ref":"/blog/2017/05/14/release-of-0.8.2/","title":"Release of 0.8.2"},{"body":" Improved XPlane model keys based on discussion MAC OS installation fixed Stash button fixed Retry when network connection is down during install 1st version of background updater  ","excerpt":" Improved XPlane model keys based on discussion MAC OS installation …","ref":"/blog/2017/05/06/release-of-0.8.1/","title":"Release of 0.8.1"},{"body":"Example:\n  PCFlightSim MSI 192.x.x.137 with joystick, and swift core\n  swift core   here I define the PTT key, on the [PCFlightSim MSI]{.title-ref}     [LAPTOP]{.title-ref} with remote swift GUI\n  on my laptop I see that PTT key, note the hotkey comes from [PCFlightSim MSI]{.title-ref} but the screenshot is from [LAPTOP]{.title-ref}. Make sure you really run a GUI connected to the core -\u003e DBus   now when I press the joystick button on [PCFlightSim MSI]{.title-ref} (not on the laptop) I see the PTT LED \"on\", on both machines in the core and the GUI     ","excerpt":"Example:\n  PCFlightSim MSI 192.x.x.137 with joystick, and swift core …","ref":"/docs/manual/spc/settings/remoteptt/","title":"A remote hotkey example (remote PTT)"},{"body":"  #td-cover-block-0 { background-image: url(/about/featured-background_hufe3886a988ff51396d24f1c169407fb0_3656346_960x540_fill_q75_catmullrom_bottom.jpg); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/about/featured-background_hufe3886a988ff51396d24f1c169407fb0_3656346_1920x1080_fill_q75_catmullrom_bottom.jpg); } }  About swift An open source pilot client.        History     In May 2014 at the Global Conference Vienna three enthusiastic VATSIM members presented an idea to develop a platform independent pilot client.\nPlatform-independent” includes the operational readiness for the operating systems Windows, Linux and MacOS as well as the use for FS9, FSX, P3D and X-Plane. Meanwhile FlightGear is also included in the simulator list.\nAlso on the agenda was a third party interface (via DBus) and the possibility to install plugins.\nThe vision was the necessity to unite the large number of clients, which had been created by the different operating systems and simulators, on one client.\nDesign goals were and are, among others, improved model comparison by using a central database, a strong algorithm for interpolation of how aircraft move between two position updates, support of protocol features like “Fast Position Updates” and Near Real Time Position Updates (P2P).\nThe whole project was planned as “Open Source”. Why Open Source? Can anyone still remember the many crash reports in forums that were never solved because the source code was not available? Many projects were never finished or continued because the project members could not or would not do the work for various and understandable reasons. The new project should not have this birth defect.\nIn order to meet the requirements already mentioned, the open source framework Qt5 with C++ was used as a development tool. This was not the only possibility but a reasonable choice.\nThe project does not want to compete with other clients, but as an alternative.\nWho can help? If you feel like taking over a certain task in the project, please contact us. We are looking for serious, reliable people with initiative. These don’t always have to be programmers, because the tasks are many-sided.\n   ","excerpt":"  #td-cover-block-0 { background-image: …","ref":"/about/","title":"About Goldydocs"},{"body":"See xplanemapping{.interpreted-text role=\"ref”} and excludedmodels{.interpreted-text role=\"ref”}\n","excerpt":"See xplanemapping{.interpreted-text role=\"ref”} and …","ref":"/docs/manual/smt/acfexcluded/","title":"ACF aircraft (XPlane) excluded in mapping tool"},{"body":" Questions and answers (aka FAQs) swift command line arguments Troubleshooting installation and 1st start Tracing interpolation Tracing model matching Tracing network packets (FSD log) and network statistics  ","excerpt":" Questions and answers (aka FAQs) swift command line arguments …","ref":"/docs/manual/swiftgeneral/swiftadvanced/","title":"Advanced - solving problems"},{"body":"Since swift 0.9.2 an advanced login screen is available. It can be reached by pressing SHIFT and Connect button.\nHere you can\n add a partner callsign for flying in a shared cockpit: sharedcockpit{.interpreted-text role=\"ref”} override livery and model string data to appear as a different aircraft  ","excerpt":"Since swift 0.9.2 an advanced login screen is available. It can be …","ref":"/docs/manual/spc/advloginscreen/","title":"Advanced login popup (since 0.9.2)"},{"body":"The standard matching for VATSIM of \"normal passenger\" plane / airline combinations is straight forward. However, some categories are poorly matched as there is no/little information in the current FSD concept, like smaller utility aircraft, military aircraft, helicopters etc.\nTo allow model matching with more details for some aircraft categories we will add some classification details.\n::: {.important} ::: {.title} Important :::\nOur classifications are focusing on finding the right model representations :::\nAircraft type   Unclassified, all aircraft where we do not need further details. All the normal passenger aircraft (B737s of airlines, A320s of airlines etc.) will be unclassified.\n  Civil aviation aircraft (this can be used to make clear it is a freight aircraft). For some types it is clear by the ICAO code, for some it is not. This can be used to explicitly set it where needed.\n  Passenger Freighter Mixed     Ultralight\n  Trike Powered hang gliders Powered parachutes     Military combat airplanes\n  Fighter aircraft Bomber Multi role combat aircraft Gunship Glider (military glider only)     Military helicopters\n  Attack helicopters Transport Maritime Observation Gunship     Glider (civil glider only)\n   Touring motor gliders (something which [[ https://en.wikipedia.org/wiki/File:Grob.g109b.glider.arp.jpg | looks like a small aircraft ]])\n  Retractable propeller/turbo glider (like https://en.wikipedia.org/wiki/File:Schleicher_ASH_26E_sailplane_1.jpg) with their Glider competition classes:\n  Open Class, places no restrictions except a limit of 850 kg to the maximum all-up mass, may be one- or two-seater e.g. JS-1C, Lange Antares 23E, Quintus, ASH 30, ASH 31 and LAK-20. Standard Class, restricted to a maximum wing-span of 15 metres and fixed wing sections (flaps or other lift-enhancing devices not allowed), maximum all-up mass 525 kg, e.g. ASW 28, LS8, Discus-2, LAK-19. 15 metre Class, as Standard Class with lift-enhancing devices allowed, maximum all-up mass 525 kg, e.g. ASW 27, LS6, Ventus-2, Diana 2. 18 metre Class, as the 15 metre Class with wing-spans up to 18 metres, maximum all-up mass 600 kg, e.g. ASG 29, LS10, DG-808, Ventus-2c. 20 metre Two-Seater Class, restricted to a maximum wing-span of 20 metres, maximum all-up mass 750 kg, e.g. Duo Discus, DG-1000, Arcus Club Class, allows a wide range of older small gliders within a specified range of performances, e.g. Libelle, Standard Cirrus, LS1, Pilatus PC-11, with the scores being adjusted by handicapping. Disposable (i.e. water) ballast may be installed but must not be used in this class. 13.5 metre, with maximum span of 13,500mm. Disposable ballast allowed but maximum wing loading permitted is 35 kg/m²     Glider (no engine) with their Glider competition classes (see above (6.B.))\n  Open Class, places no restrictions except a limit of 850 kg to the maximum all-up mass, may be one- or two-seater e.g. JS-1C, Lange Antares 23E, Quintus, ASH 30, ASH 31 and LAK-20. ... same as above .…        Ground vehicles (for future reference)\n  Follow me Bus      Aircraft details Like the combined we could use a simple string representation to classify further details\n  Number of wings, biplane 2W, triplane 3W:\n  Number of rotors, like 1R, 2R, 2RC (coaxial), 2RT (Tandem), see https://en.wikipedia.org/wiki/Helicopter_rotor\n  Undercarriage, mostly required to distinguish smaller L1P planes\n  Taildragger, Tri-cycle Float Monowheel, skids (like for helicopters) https://en.wikipedia.org/wiki/Landing_gear not planned something like this: https://en.wikipedia.org/wiki/Undercarriage_arrangements     Aircraft period\nSome hints in which period this aircraft belongs. Not to detailed, but maybe something like this:\n WWI WWII and so on  Q\u0026A FS: \"Doesn't the classification for mil. helicopters make sense for all military aircraft?\", see here.\n We have a military flag which allows to classify any model or ICAO code as \"military\"? (we keep this one) This works well for a military B737/A320 where I can tell it is a B737/A320 used by an airforce etc. If the airforce itself has an official ICAO code, I can even tell which airforce it is. On the other hand, in most cases there is no such information, if someone uses as a F15 and someone has no F15 in its model set, what would be a reasonable representation? At least I would like to display another fighter jet (if available), So displaying a Phantom F4 would be IMHO be better than a B737. From the ICAO information I can hardly distinguish those, both L2J. I found that splitting helicopters and fixed-wing planes allow us a better granularity, and there are classifications which are mutual exclusive, but maybe we can also just merge both categories and distinguish fixed wing/rotorcraft by the ICAO info or the newly established \"details\"  ","excerpt":"The standard matching for VATSIM of \"normal passenger\" plane / airline …","ref":"/docs/knowhow/simandinterpolation/aircraftclassification/","title":"Aircraft classification (model matching)"},{"body":"Aircraft parts Aircraft parts are used to transfer aircraft information about \"gear\", \"spoilers\", \"flaps\", \"lights\". They also transfer a GND flag to tell if the aircraft is located on ground. VATSIM uses the parts ground flag.\nGround. flag / gnd. flag In the FSD protocol and the related extensions there are 2 ways to transfer a ground flag. swift supports both:\n along with the aircraft parts (VATSIM) and as flag in the aircraft position  How should it be set?  on VATSIM you will see the parts flag for clients supporting parts, e.g. vPilot and swift. on VATSIM the GND flag for PARTS is supported, the \"other GND flag\" not. For other servers it depends on the server settings if [GND]{.title-ref} and [PARTS]{.title-ref} are enabled You could even enable the GND flag for an individual aircraft. Never do this unless you know what you are doing!   Leave the ground flag and fast position settings alone unless you know what you are doing.  Model view You can check the [GND]{.title-ref} and [PARTS]{.title-ref} in the model view.\n","excerpt":"Aircraft parts Aircraft parts are used to transfer aircraft …","ref":"/docs/manual/swiftgeneral/partsandgndflag/","title":"Aircraft parts and gnd. flag / ground flag"},{"body":"See also simalts{.interpreted-text role=\"ref”}\nP3D and FSX   Altitude values own aircraft: PLANE ALTITUDE, PLANE ALT ABOVE GROUND, STATIC CG TO GROUND, GROUND ALTITUDE\n  Example: aircraft in EDRY 312ft ELV       C172 B737   altitude 315.72497011731951 321.66457557565963\naltitudeAboveGround 3.7254348326937929 9.6653964302668669\ncgToGround 3.7650001049041748 9.6700000762939453\nelevation 311.99953528462572 311.99917914539276  Altitude values queried for remote aircraft: PLANE ALTITUDE, STATIC CG TO GROUND, GROUND ALTITUDE Position values for remote aircraft SIMCONNECT_DATA_INITPOSITION.  X-Plane  Own aircraft example: aircraft at KSEA rwy 16L (432.5ft / 131.826m ELV)    C172 B744   sim/flightmodel/position/elevation 133.3706 136.9491\nsim/flightmodel/position/y_agl 0.0694 0.2349\nsim/aircraft/gear/acf_h_eqlbm 2.9933 4.7176 See also  ongroundscenarios{.interpreted-text role=\"ref”}  ","excerpt":"See also simalts{.interpreted-text role=\"ref”}\nP3D and FSX   Altitude …","ref":"/docs/knowhow/simandinterpolation/altitude/","title":"Aircraft position data (from simulator and network)"},{"body":"You can restrict the number of aircraft and the maximum range of rendered aircraft. We do not recommend to do so, unless you have particular reasons for that, as it can lead to surprising results (especially restricting number of aircraft) .\nCLEAR removes the restrictions.\nDisable all aircraft If in some situations you need to disable all rendered aircraft you can do this from the context menu.\n","excerpt":"You can restrict the number of aircraft and the maximum range of …","ref":"/docs/manual/spc/settings/aircraftrange/","title":"Aircraft range and max. aircraft number (aka visibility range)"},{"body":"If a connection to a single ATC station fails check if the station really supports voice control. Some people set up a voice room but do NOT provide voice ATC.\n","excerpt":"If a connection to a single ATC station fails check if the station …","ref":"/docs/manual/swiftgeneral/faq/atcfailedtoconnect/","title":"ATC failed to connect error 10061"},{"body":"","excerpt":"","ref":"/docs/knowhow/aviation/","title":"Aviation"},{"body":" Note see also geodetic height   http://web.archive.org/web/20130626035126/http://www.gmat.unsw.edu.au/snap/gps/clynch_pdfs/coordcvt.pdf page 5 http://www.esri.com/news/arcuser/0703/geoid1of3.html “what is MSL”     Name Description     True Altitude This is the actual, physical distance between the aircraft and the mean sea level. It is what you would see if you could actually measure the distance with a very big ruler. In the real world, pilots usually do not use this, as it can usually only be measured approximately by GPS. In the virtual world (which is what swift is modelling), it is what we generally use when talking to FSD and the simulators.   Absolute Height AGL This is the actual, physical distance between the aircraft and the ground directly beneath it. This could be as measured by a radar altimeter.   Altitude QNH This is the altitude above mean sea level as measured by a pressure altimeter on the aircraft. In order to relate this to any other type of altitude, two data must be known: the actual atmospheric QNH (e.g. obtained by METAR), and the QNH setting which the pilot has dialled into their altimeter; these two data might be different, so both must be known.   Flight Level Besides the fact that the unit of measurement is always hundreds of feet, the only difference between Flight Level and Altitude QNH is that the QNH setting is always fixed at 1013.2hPa or 29.92inHg. Therefore one datum must be known: the actual atmospheric QNH (e.g. from METAR).   Height QFE This is the height above a reference elevation at e.g. an airport. Height QFE differs from Altitude QNH only in that the reference point is an elevation above or below mean sea level, rather than mean sea level itself (MSL+0). Therefore three data must be known: the actual atmospheric QNH, the pilot’s QNH setting, and the QFE reference elevation.    In addition, an altitude can be either an indicated altitude of an actual aircraft or other object in real time, or a nominal altitude such as entered in a flight plan. These two groups, multiplied by the five above, gives a total of ten.\nThis matrix shows the data which would be needed to convert between different types of altitude:\n    True Altitude Absolute Height AGL Altitude QNH Flight Level Height QFE     True Altitude  Ground elevation Actual QNH and set QNH Actual QNH Actual QNH, set QNH, and QFE elevation   Absolute Height AGL Ground elevation Ground elevation x2 Ground elevation, actual QNH, and set QNH Ground elevation and actual QNH Ground elevation, actual QNH, set QNH, and QFE elevation   Altitude QNH Actual QNH and set QNH Ground elevation, actual QNH, and set QNH Actual QNH x2 and set QNH x2 Actual QNH x2 and set QNH Actual QNH x2, set QNH x2, and QFE elevation   Flight Level Actual QNH Ground elevation and actual QNH Actual QNH x2 and set QNH Actual QNH x2 Actual QNH x2, set QNH, and QFE elevation   Height QFE Actual QNH, set QNH, and QFE elevation Ground elevation, actual QNH, set QNH, and QFE elevation Actual QNH x2, set QNH x2, and QFE elevation Actual QNH x2, set QNH, and QFE elevation Actual QNH x2, set QNH x2, and QFE elevation x2    ","excerpt":" Note see also geodetic height …","ref":"/docs/knowhow/aviation/verticaldistance/","title":"Aviation altitude (vertical distance)"},{"body":"The background updater allows to automatically reload and consolidate data in the mapping tool. This helps when other users also create new mappings and you want to keep your data synchronized with the latest changes.\nEnable the updater in the settings by entering an update period. You should see a green LED then.\nThe updater will automatically reload and consolidate, so it is automatically performing the 2 steps shown below:\n","excerpt":"The background updater allows to automatically reload and consolidate …","ref":"/docs/manual/smt/backupdate/","title":"Background updater"},{"body":"BB_Mil/xsb_aircraft.txt\nOBJ8_AIRCRAFT F16D_US4_926 OBJ8 SOLID YES __Bluebell_Mil/F16D/F16D_US4_926.obj AIRLINE F16 RCH ICAO F16 OBJ8_AIRCRAFT F16D_US4_TB8 OBJ8 SOLID YES __Bluebell_Mil/F16D/F16D_US4_TB8.obj LIVERY F16 RCH TB8 OBJ8_AIRCRAFT F18C_US1_183153 OBJ8 SOLID YES __Bluebell_Mil/F18C/F18C_US1_183153.obj AIRLINE F18 RCH ICAO F18 OBJ8_AIRCRAFT F18D_US1_BA7 OBJ8 SOLID YES __Bluebell_Mil/F18D/F18D_US1_BA7.obj LIVERY F18 RCH BA7\n Means the F16 and F18 for airline RCH have two liveries each: Acft F16 Airline RCH Livery (empty) (Standard US Air Force) Acft F16 Airline RCH Livery TB8 (Thunderbird acrobatic) Acft F18 Airline RCH Livery (empty) (Standard US Navy) Acft F18 Airline RCH Livery BA7 (Blue Angels acrobatic)  Also the B744 has multiple CARGO liveries, and some regional jets have multiple liveries per airline.\n","excerpt":"BB_Mil/xsb_aircraft.txt\nOBJ8_AIRCRAFT F16D_US4_926 OBJ8 SOLID YES …","ref":"/docs/knowhow/simandinterpolation/bbmultilivery/","title":"BB multi livery example"},{"body":"","excerpt":"","ref":"/blog/","title":"swift Blog"},{"body":"::: {.todo} Add download link :::\n XPlane: You can download the Bluebell models and vertical offset from here. installbb{.interpreted-text role=\"ref”} make sure the vertical offset correctly, see xplanecg{.interpreted-text role=\"ref”} other models for FSX, P3D: downloadmodels{.interpreted-text role=\"ref”}  ","excerpt":"::: {.todo} Add download link :::\n XPlane: You can download the …","ref":"/docs/installation/xplane/downloadbluebell/","title":"Bluebell CSL and Vertical Offset Fix: Download and Installation"},{"body":" Run make install once. This installs xswiftbus with all its dependencies to dist/xswiftbus, which can be copied into X-Plane. From then onwards, copying of win.xpl is enough  Result: (when built for 64bit Windows)\n","excerpt":" Run make install once. This installs xswiftbus with all its …","ref":"/docs/knowhow/programming/swiftbuild/buildxswiftbus/","title":"Build and copy XSwiftBus (from build directory)"},{"body":"Running swift It makes sense to disable QML as we do not use it, and otherwise the debugger always pops up).\nKits - example of a working kit ","excerpt":"Running swift It makes sense to disable QML as we do not use it, and …","ref":"/docs/knowhow/programming/swiftbuild/buildinqtc/","title":"Build and run swift in QtC (Qt Creator)"},{"body":"swift uses qmake as its build system. The build can be configured with JSON files, and the qmake files can interrogate the configuration with custom qmake functions. C++ code can interrogate its configuration using BlackConfig::CBuildConfig.\nVanilla build\nBy default, the build will parse a JSON file named default.json in the root of the source tree. This file can be edited, but for changing your local build configuration we recommend creating a new JSON file and adding its filename to the SWIFT_CONFIG_JSON variable on your qmake command line. This avoids git conflicts in default.json, as you can add your own JSON file to your .gitignore.\nCommand line variables\nThe following variables can be set on the command line when invoking qmake and have meaning when building swift:\n \"SWIFT_CONFIG_JSON+=filename.json\" Loads an additional JSON file into the configuration. The file must be in the root directory of the source tree. The path is relative to the source tree root, and the filename may not contain any special characters. Files are loaded in the order in which they are added to the variable, and default.json is loaded first. If a JSON file contains a key that was already set in a previously loaded JSON file, the value is overwritten with the last one to be loaded. \"CONFIG+=swiftNoDefaultJson\" By default, default.json is loaded before any JSON files specified in the SWIFT_CONFIG_JSON variable. Adding this option prevents this behaviour. This should not really be needed, as each loaded JSON file can overwrite values from a previously loaded one, but the option is provided for completeness. \"CONFIG+=swiftNoCacheConfig\" By default, JSON files are parsed only when processing the root SUBDIRS project, and saved in the cache, and the sub-projects use the cached values. This option disables this behaviour, so JSON files are reparsed for each sub-project. \"SWIFT_CONFIG.key=value\" Specifies a configuration value as if it had been loaded from a JSON file after all other JSON files have been loaded. For example, \"SWIFT_CONFIG.sims.xplane=false\" to disable X-Plane support regardless what is set in any JSON file.\n Accessing the configuration when writing qmake files There is a custom function swiftConfig for inspecting the values loaded from JSON within our qmake project files. It is provided both as a test function and a replace function.\nswiftConfig test function Create a scope with the swiftConfig function to conditionally evaluate some qmake directives if and only if a specified key is set to true in the JSON configuration. The function returns false if the key has any other value, of if the key is not present.\nexample:\nswiftConfig(sims.p3d) { # directives to evaluate only if P3D is enabled }  Note For technical reasons, the JSON string value \"true\" is treated the same as the boolean value true. This is because in qmake, everything is a string.  swiftConfig replace function Use the swiftConfig replace function with the $$ sigil to retrieve the value of a specified key from the JSON.\nexample:\nDEFINES += \"BLACK_EOL=$$swiftConfig(endOfLife)\"  Modifying the configuration when writing qmake files Sometimes in a qmake file you want to override the setting of the JSON file for some reason. Some test functions are provided for this purpose.\nsetSwiftConfig test function Use this to set the value of a specified key.\nexample:\nsetSwiftConfig(endOfLife, 19970829)  enableSwiftConfig test function This is a convenience to set the value of some key(s) to true.\nexample:\n# enable all Microsoft-based simulators enableSwiftConfig(sims.fs9, sims.fsx, sims.p3d)  disableSwiftConfig test function The reverse of enableSwiftConfig, this sets the value of some key(s) to false.\n","excerpt":"swift uses qmake as its build system. The build can be configured with …","ref":"/docs/dev/build-config/","title":"Build configuration"},{"body":"On Mac OS, the default Qt installation includes QtDBus, but not the DBus library that it depends on. Pre-built binaries are available in the externals repository. This howto documents the steps if you want to build a new version of DBus binaries.\nBuilding from source  Download and extract the libdbus source code. Set the deployment target to the lowest supported Mac OS version. At the time of writing, this was Mac OS 10.10  export MACOSX_DEPLOYMENT_TARGET=10.10  Configure, run and install the build  ./configure --localstatedir=/usr/local/var --sysconfdir=/usr/local/etc --disable-xml-docs --disable-doxygen-docs --enable-launchd --with-launchd-agent-dir=~/Library/LaunchAgents --without-x --disable-tests make make install  make install will automatically copy org.freedesktop.dbus-session.plist into the users LaunchAgents directory. So from the next boot up, it will be automatically loaded. To load it without rebooting after installation, run:  load -w ~/Library/LaunchAgents/org.freedesktop.dbus-session.plist Commit to externals Before committing the new binaries to externals, we need to make some small adjustments to the library lookup path written in those binaries.\n Setup swiftRoot environmental variable  export swiftRoot=[path to your swift root]  First copy them to externals to not change the local installation  cp /usr/local/bin/dbus-daemon $swiftRoot/externals/macx-clang/bin64/ cp /usr/local/bin/dbus-uuidgen $swiftRoot/externals/macx-clang/bin64/ cp /usr/local/lib/libdbus-1.3.dylib $swiftRoot/externals/macx-clang/lib64/  Change the path where dbus executables should look for libdbus-1.3.dylib:  cd $swiftRoot/externals/macx-clang/bin64 install_name_tool -change /usr/local/lib/libdbus-1.3.dylib @executable_path/../lib/libdbus-1.3.dylib dbus-daemon install_name_tool -change /usr/local/lib/libdbus-1.3.dylib @executable_path/../lib/libdbus-1.3.dylib dbus-uuidgen cd $swiftRoot/externals/macx-clang/lib64 install_name_tool -id @rpath/libdbus-1.3.dylib libdbus-1.3.dylib  Commit the new binaries  ","excerpt":"On Mac OS, the default Qt installation includes QtDBus, but not the …","ref":"/docs/knowhow/programming/swiftbuild/dbusmacos/","title":"Build DBus for Mac OS"},{"body":"On Windows, the default Qt installation includes QtDBus, but not the DBus library that it depends on. Here are Windows binaries for DBus, they should be extracted directly into the Qt installation tree:\n  Verbose-mode builds (insecure, for swift developers)\n  F12375 DBus 1.10.24 for MSVC2017 32-bit F12376 DBus 1.10.24 for MSVC2017 64-bit F12377 DBus 1.10.24 for MinGW 5.3.0 32-bit     Secure-mode builds (for deployment to swift users)\n  F12378 DBus 1.10.24 for MSVC2017 32-bit F12379 DBus 1.10.24 for MSVC2017 64-bit F12380 DBus 1.10.24 for MinGW 5.3.0 32-bit     Building from source   Download and install CMake.\n  Download and extract the libexpat and libdbus source code.\n  At the time of writing, both the latest stable release and the [master]{.title-ref} branch of libexpat fail to build on Windows, so we fall back to the previous stable version (2.1.1). MinGW binaries of libexpat are already part of the default MinGW itself.     Visual Studio Command Prompt: .. code-block:\ncmake -G \"Visual Studio 15 2017\" -DCMAKE_INSTALL_PREFIX=C:\\expat-msvc32 C:\\expat-sources msbuild install.vcxproj /p:Configuration=Release cmake -G \"Visual Studio 15 2017 Win64\" -DCMAKE_INSTALL_PREFIX=C:\\expat-msvc64 C:\\expat-sources msbuild install.vcxproj /p:Configuration=Release cmake -G \"Visual Studio 15 2017\" -DCMAKE_INSTALL_PREFIX=C:\\dbus-msvc32 -DEXPAT_INCLUDE_DIR=C:\\expat-msvc32\\include -DEXPAT_LIBRARY=C:\\expat-msvc32\\lib\\expat.lib C:\\dbus-sources\\cmake msbuild install.vcxproj /p:Configuration=Release cmake -G \"Visual Studio 15 2017 Win64\" -DCMAKE_INSTALL_PREFIX=C:\\dbus-msvc64 -DEXPAT_INCLUDE_DIR=C:\\expat-msvc64\\include -DEXPAT_LIBRARY=C:\\expat-msvc64\\lib\\expat.lib C:\\dbus-sources\\cmake msbuild install.vcxproj /p:Configuration=Release  MinGW Command Prompt:\ncmake -G \"MinGW Makefiles\" -DCMAKE_INSTALL_PREFIX=C:\\dbus-mingw32 C:\\dbus-sources\\cmake mingw32-make install Verbose vs. secure builds ::: {.warning} ::: {.title} Warning :::\nThe default DBus CMake build includes unit tests, asserts, and verbose mode, which help with debugging but render the library insecure. To build secure binaries appropriate for deployment to end-users, use these [cmake]{.title-ref} arguments: :::\n-DDBUS_BUILD_TESTS=OFF -DDBUS_DISABLE_ASSERT=ON -DDBUS_ENABLE_VERBOSE_MODE=OFF Error messages Some error messages you see when the libdbus libs are missing (also posted here so you can search by the terms)\nCannot find libdbus-1 in your system to resolve symbol 'dbus_get_local_machine_id'. Debug Error! Program: P:\\Qt\\5.9.2\\msvc2015\\bin\\Qt5Cored.dll Module: 5.9.2 File: qdbus_symbols.cpp Line: 142 ","excerpt":"On Windows, the default Qt installation includes QtDBus, but not the …","ref":"/docs/knowhow/programming/swiftbuild/dbus/","title":"Build DBus for Windows"},{"body":"Download prerequisites\n `Git \u003chttp://git-scm.com/download/win\u003e`_ `Visual Studio Community 2019 \u003chttps://www.visualstudio.com/\u003e`_ (be sure to select C++ during installation) `Qt 5 \u003chttps://www.qt.io/download-qt-installer\u003e`_  Clone the git repo\ngit clone ssh://git@dev.swift-project.org/source/pilotclient.git git submodule update --init ::: {.important} ::: {.title} Important :::\nAs a developer you would normally wish to clone the latest [develop]{.title-ref} branch :::\nCompile\nimportantIt might be a good idea to exclude the build directory from your virus scanner, as otherwise new executable will not work properly\nWith Qt Creator\nActually you should be able to directly open the cloned repo as project in QtC. Setup your Qt kit and then it should compile.\n After that you should be able to start your swift applications. Maybe you have to start QtC after the very first compilation to see that context menu.   If you change the branch or you pull a new swift version consider running qmake from the QtC again, sometimes new files are not recognized otherwise.  With qmake and Visual C++ IDE\ncall \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Auxiliary\\Build\\vcvarsall.bat\" x86 qmake -tp vc -Wlogic -spec win32-msvc -r C:\\path\\to\\swift\\swift.pro ::: {.note} ::: {.title} Note :::\n{icon file-text-o} P4 Use this script to automate the procedure of running qmake. It will prompt you to choose which of your installed versions of Qt and VS to use, and whether to build for 32 or 64 bits. :::\nWith qmake and MinGW\nqmake -Wlogic -spec win32-g++ -r C:\\path\\to\\swift\\swift.pro mingw32-make With Clang\nSee clang{.interpreted-text role=\"ref”} .\n::: {.toctree caption=\"Content in this chapter”} clang :::\n","excerpt":"Download prerequisites\n `Git \u003chttp://git-scm.com/download/win\u003e`_ …","ref":"/docs/knowhow/programming/swiftbuild/windows/windows/","title":"Build on Windows"},{"body":"::: {.warning} ::: {.title} Warning :::\nThis should be considered experimental and could be broken by future updates of Qt, MSVC, Clang, or seemingly unrelated changes in our own code. :::\nPreparation\n  Download Clang binaries for Windows\n  Advice: do not install in the default directory (Program Files) Ensure the bin subdirectory is added to PATH (recommend doing this manually)     Considerations\nThings to be aware of:\n  On Linux, Clang tries to mimic GCC, supporting GNU extensions and GNU ABI. On Windows, Clang tries to mimic MSVC, supporting Microsoft extensions and Microsoft ABI.\n  You need to have installed Microsoft Visual C++, as Clang uses Microsoft's implementation of the C++ standard library.\n  The mkspec uses [clang-cl](http://clang.llvm.org/docs/UsersManual.html#clang-cl), which is a wrapper around clang.exe that understands MSVC commandline arguments like /LD, /W3, etc.\n  The following qmake scope test conditions are true when building with Clang on Windows:\n  win32 win32-clang-msvc msvc clang_cl llvm     The following C++ macros are defined when building with Clang on Windows:\n: - Q_OS_WIN - Q_CC_MSVC - Q_CC_CLANG\n  Build with qmake and jom\nUsing the appropriate Visual Studio command prompt:\nqmake -Wlogic -r -spec win32-clang-msvc path\\to\\swift.pro jom Build with Qt Creator\n::: {.warning} ::: {.title} Warning :::\nThis does not seem to be working at the moment. (2018-12-01, Qt Creator 4.7.2) :::\nQt Creator should detect your installation of LLVM. If it does not, you can manually add it under the \"Compilers\" tab. Then create a new kit by cloning one of the existing \"Qt Desktop MSVC2017\" kits. Adjust the kit by selecting the appropriate Clang compiler from the drop-down list, and entering the Qt mkspec win32-clang-msvc. Finally, add the kit to your swift project in the Projects page, make it the active kit, and start a build.\nClang and MinGW\n::: {.warning} ::: {.title} Warning :::\nThis is even more experimental than anything above! :::\nIt is also possible to build using Clang on MinGW by using the mkspec win32-clang-g++.\n  The following qmake scope test conditions will be true:\n  win32 win32-clang-g++ gcc mingw llvm     The following C++ macros will be defined:\n  Q_OS_WIN Q_CC_GCC Q_CC_CLANG     ","excerpt":"::: {.warning} ::: {.title} Warning :::\nThis should be considered …","ref":"/docs/knowhow/programming/swiftbuild/windows/clang/","title":"Build on Windows with Clang"},{"body":"","excerpt":"","ref":"/docs/knowhow/programming/swiftbuild/","title":"Building swift"},{"body":"From discussion on Discord\n\"Primitive\" doesn't exist in C++. \"Arithmetic types\" are like [bool, double, int]{.title-ref}. \"Fundamental types\" include [arithmetics, void]{.title-ref} and [nullptr_t]{.title-ref}. \"Scalars\" include arithmetics, [nullptr_t]{.title-ref} and pointers.\nAll scalars are trivial, but some non-scalars are also trivial. There is no \"quick\" way to see if a class is trivial. You need to look at its member variables, and its copy ctor, operator=, and dtor. If the member vars are all trivial, and the copy ctor, operator= and dtor are all =default then the class is trivial. You can also check:\nstatic_assert(std::is_trivial\u003cMyClass\u003e{}, \"blah\"); For me, trivial is an \"easy\" way to say whether a class doesn't need to be passed by reference. Other trivial classes include [QStringView]{.title-ref} and [QLatin1String]{.title-ref}.\nThe performance cost of pass-by-reference is that the compiler has fewer optimization opportunities, because it has to assume that the value could be changed by external code.\nvoid throwBall(double value, const CLengthUnit \u0026unit) { hand.hold(ball); arm.prepareThrow(value, unit); // here the value of unit is accessed from memory //... logMessage(); // if logMessage is defined in another cpp file, the compiler // must assume that it could modify the value of unit arm.start(value, unit); // here the value of unit must be accessed from memory again, // the compiler can't reuse the value from the previous access } Because it's possible that [throwBall]{.title-ref} could be called like this sneaky code:\nCLengthUnit unit = /*...*/; void logMessage() { unit = otherUnit; } throwBall(10, unit); When it's passed by value, the parameter is a local variable, so the compiler can see that it's not modified, and only needs to access the memory once:\nvoid throwBall(double value, CLengthUnit unit) { hand.hold(ball); arm.prepareThrow(value, unit); // here the value of unit is accessed from memory //... logMessage(); arm.start(value, unit); // here the compiler can just reuse the value from the previous access } Return values are a bit different, but I would need to have a \"good reason\" to use references anywhere. [CMeasurementUnit]{.title-ref} contains just a single non-owning pointer to const data, so it easily fits in a CPU register like any arithmetic type. operator== hasn't been changed in ages. You might be thinking of [convertFrom]{.title-ref} which we discussed here: https://dev.swift-project.org/T207\nEither way, comparing [m_data == other.m_data]{.title-ref} pointers is just as good as comparing [this == \u0026other]{.title-ref} pointers.\nAre our normal PQs trivial?\nMat SutcliffeYesterday at 23:47 Yes, actually. Whether they are \"small\" is another question. CPhysicalQuantity contains just a double and a CMeasurementUnit (which contains a pointer). So it's 128 bits (8 bytes). Could fit in an SSE2 register, so probably \"small\". But it's debatable. And some of our derived PQs add more members, like magnetic/true for headings, datum for altitudes. Mat SutcliffeYesterday at 23:56\nActually IMHO the most important thing in all of this is that the [CMeasurementUnit::Data]{.title-ref} instances be [constexpr]{.title-ref} as it means they are initialized at compile-time, so no static order fiasco.\nAnd only \"literal types\" are candidates for [constexpr]{.title-ref}, which is yet another category of type\n","excerpt":"From discussion on Discord\n\"Primitive\" doesn't exist in C++. …","ref":"/docs/knowhow/programming/trivialobjects/","title":"C++ trivial objects"},{"body":"A value cache is a map of QString keys to CVariant values, stored within an entity class which provides distributed access to modify values and to be notified by a signal when a value is modified. Access is provided to QObject-derived classes through a member of type CCached\u003cT\u003e, where T is the expected value type of the specific value of interest. CCached\u003cT\u003e automatically converts the CVariant to and from the target type T. The CValueCache itself, being just a map of key strings and values, has no contextual awareness of the semantic meaning of any of the values it contains. That awareness is located at the level of the CCached\u003cT\u003e. Through the constructor of CCached\u003cT\u003e, an owning class can provide validation routines, default values, and a slot to be called when the value changes. Validation occurs when an object changes a value via a member CCached\u003cT\u003e, and a second, redundant validation occurs when any other object accesses the changed value via its own CCached\u003cT\u003e.\nTheory of operation Distributed values There are two layers of distribution in the value cache system. Both layers of distribution are structurally very similar. In the first layer, values can be distributed among objects in the same process but potentially in different threads. This mode of distribution relies on the regular Qt signal/slot system. In the second layer, values can be distributed among objects in different processes. This mode of distribution relies on the Qt signal/slot system and an interprocess-communication (IPC) mechanism, such as DBus. The particular IPC mechanism used is decoupled from the value cache system.\nSame-process distribution Internally, the CCached\u003cT\u003e will create a CCachePage as a child object of its owner. If an object owns multiple CCached\u003cT\u003e objects, then they will all share the same CCachePage, which acts as the unified point of access for that owning object. The multitude of CCachePage instances in the process communicate with the CValueCache through signals and slots. The signal CValueCache::valuesChanged is connected to the slot CCachePage::changeValuesFromCache, and the signal CCachePage::valuesWantToCache is connected to the slot CValueCache::changeValues. The connection mode is Qt::AutoConnection, so the signals will be queued in the event loops of the appropriate threads. Signals are always queued in the same order in every thread, so all the CCachePage instances will observe value changes occurring in the same order, and this will guarantee that they maintain consistency with each other.\nInter-process distribution The structure of connections between CValueCache instances distributed in different processes is essentially the same as the structure of connections between CValuePage instances in different threads within the same process, but at a larger scale. One process acts as central router, and again, the fact that signals are always received in the same order they were emitted ensures that all processes see a consistent state. This reusable design pattern is explored in more detail at relayevent{.interpreted-text role=\"ref”} :.\nSpecific caches Settings Settings are implemented on top of the value cache system. The CSettingsCache singleton inherits from CValueCache. The CSetting\u003cTrait\u003e template extends CCached\u003cT\u003e with support for validators and default values encapsulated in a trait class alongside the key string.\nEach trait represents a specific value in the settings. As a minimum, the trait class must have a member typedef type which is the value type of the cached value, and a static method key() which returns the key string of the cached value. The CSettingTrait base class simplifies the task of writing new traits.\nBatched changes If a class changes multiple settings at the same time, it is desirable that only one signal be emitted which covers all the changes, instead of emitting a separate signal for each individual setting. This is achieved using \"batched\" changes:\n{ auto batch = CSettingsCache::instance()-\u003ebatchChanges(this); // RAII object  m_fooSetting.set(1234); m_barSetting.set(5678); } // RAII object destroyed here, its destructor causes the changes to m_fooSetting and m_barSetting to be committed. Reacting to validation failures In the above example, if 5678 was invalid for m_barSetting, the change to m_fooSetting would nevertheless be committed anyway. In order for the validation failure to discard the whole batch, we use exceptions:\ntry { auto batch = CSettingsCache::instance()-\u003ebatchChanges(this); // RAII object  m_fooSetting.set(1234).maybeThrow(); // set() returns CStatusMessage...  m_barSetting.set(5678).maybeThrow(); // ...maybeThrow() throws an exception if the message is not empty. } catch (const CStatusException \u0026ex) { // RAII object destroyed here and batch is abandoned.  // Display dialog box with ex.status().message() } // RAII object destroyed here and batch is committed if exception was not thrown. ","excerpt":"A value cache is a map of QString keys to CVariant values, stored …","ref":"/docs/dev/cache/","title":"Caches"},{"body":" If NOT selected to the simulator the simulator LED is OFF. Make sure the used simulator is selected (checked)  {height=\"300px”}\n If you do NOT see any simulator on that page, you did not install the corresponding plugin (aka driver)   XPlane specific: Verify the settings xswiftbussettings{.interpreted-text role=\"ref”}  ","excerpt":" If NOT selected to the simulator the simulator LED is OFF. Make sure …","ref":"/docs/manual/swiftgeneral/cannotconnectsim/","title":"Cannot connect to simulator / no simulator plugin"},{"body":"::: {.toctree glob=”” hidden=”\"} ./* :::\nSources\n Official ICAO codes: www.icao.int IATA codes: http://www.airlinecodes.co.uk/arctypes.asp IATA codes http://www.flugzeuginfo.net/table_accodes_iata_en.php  Change requests\nICAO codes and liveries cannot be changed directly by users. You have to request them:\n Go to the datastore Select change request Specify your identity Now you can decide, select an existing entry (change request) or just start with an empty id (new code) Specify the new/correct values Submit the change request  Also read icaohints{.interpreted-text role=\"ref”}\n","excerpt":"::: {.toctree glob=”” hidden=”\"} ./* :::\nSources\n Official ICAO codes: …","ref":"/docs/manual/datastore/cr/","title":"Change requests for ICAO codes and liveries"},{"body":"Let's say you want to fix/change a particular mapping.\n locate this mapping in the mapping DB data   here I find it by its id, but this is is just an example   you could also find it by other filter criteria   then you mark this model and stash it, ALT + s also works   changing a model requires to login now it can be changed in the mapping editor under stashed models   and the published  Aircraft ICAO codes can be requested here: https://datastore.swift-project.org/\n","excerpt":"Let's say you want to fix/change a particular mapping.\n locate this …","ref":"/docs/manual/smt/changemapping/","title":"Changing / fixing a mapping"},{"body":"For VATSIM see also https://www.vatsim.net/pilot-resource-centre/general-lessons/choosing-callsign.\n","excerpt":"For VATSIM see also …","ref":"/docs/manual/swiftgeneral/faq/choosecs/","title":"Choosing a callsign"},{"body":"CLANG warning: definition of implicit copy assignment operator for 'CMeasurementUnit' is deprecated because it has a user-declared destructor\nSolution:\n//! Destructor ~CMeasurementUnit() = default; + + //! Copy constructor + CMeasurementUnit(const CMeasurementUnit \u0026) = default; + + //! Copy assignment operator + CMeasurementUnit \u0026operator =(const CMeasurementUnit \u0026) = default; ","excerpt":"CLANG warning: definition of implicit copy assignment operator for …","ref":"/docs/knowhow/programming/clangimplicitcopyctor/","title":"CLANG \\\"implicit copy constructor\\\""},{"body":"   C++14 feature VS 2019 16.6; cl.exe 19.26.28806 Ubuntu 16.04 GCC 5.4 Ubuntu 18.04 GCC 7.4 Ubuntu 20.04 GCC 9.3 Xcode 11.5; Apple clang 11.0.3 (LLVM 9.0.0)     Return type deduction ✔ ✔ ✔ ✔ ✔   Generic lambdas ✔ ✔ ✔ ✔ ✔   Generalized lambda capture ✔ ✔ ✔ ✔ ✔   Variable templates ✔ ✔ ✔ ✔ ✔   Member initializers for aggregates ✔ ✔ ✔ ✔ ✔   Generalized constexpr ✔ ✔ ✔ ✔ ✔   constexpr for std lib types ✔ ✔ ✔ ✔ ✔   std::integer_sequence ✔ ✔ ✔ ✔ ✔   Minor std lib improvements ✔ ✔ ✔ ✔ ✔   More std lib improvements ✔ ✔ ✔ ✔ ✔   Shorthand alias traits ✔ ✔ ✔ ✔ ✔   Binary literals ✔ ✔ ✔ ✔ ✔   Single quote as digit separator ✔ ✔ ✔ ✔ ✔        C++17 feature VS 2019 16.6; cl.exe 19.26.28806 Ubuntu 16.04 GCC 5.4 Ubuntu 18.04 GCC 7.4 Ubuntu 20.04 GCC 9.3 Xcode 11.5; Apple clang 11.0.3 (LLVM 9.0.0)     Nested namespace definition ✔  ✔ ✔ ✔   Fold expressions ✔  ✔ ✔ ✔   Lambda capture *this ✔   ✔ ✔   constexpr lambdas ✔ ½ ½ ✔ ✔   Range for heterogeneous iterators ✔  ✔ ✔ ✔   [[fallthrough]] attribute ✔   ✔ ✔   if constexpr ✔   ✔ ✔   if-init and switch-init ✔   ✔ ✔   Structured bindings ✔   ✔ ✔   Inline variables ✔   ✔ ✔   auto non-type template parameters ✔   ✔ ✔    See also http://en.cppreference.com/w/cpp/compiler_support\n","excerpt":"   C++14 feature VS 2019 16.6; cl.exe 19.26.28806 Ubuntu 16.04 GCC 5.4 …","ref":"/docs/knowhow/programming/cppfeatures/","title":"Compilers' C++ feature support"},{"body":"Supported driver  FS9 (experimental) XPlane FSX + P3D v1-3 legacy simConnect P3D v4 64bit (new P3D simConnect linkage) Emulated driver (for testing and observer tasks)  Simulator version You might need to select your simulator version like here\nUse Settings-\u003eSimulator-\u003e[...] to get there.\nEmulated driver The emulated driver is for testing and special purposes only. It allows to use swift without simulator in special cases.\nSettings of max. aircraft / max. distance The simulator settings allow you to set\n aircraftrange{.interpreted-text role=\"ref”} number of max. remote aircraft to be shown max distance of remote aircraft to be shown  ","excerpt":"Supported driver  FS9 (experimental) XPlane FSX + P3D v1-3 legacy …","ref":"/docs/manual/spc/settings/configuresim/","title":"Configure / select the used simulator, P3D version FSX version"},{"body":"Before a connection to an online flight simulation network is made, several configuration parameters need to be set. Most of them will already be pre-filled and do not need to be touched. Only very few parameters need a one off configuration. The following two sections explain how to connect to VATSIM or any other private FSD network.\nGenerally all changes you make are automatically saved and restored next time you launch the application.\n Network Configuration ========================  Server Selection: In order to connect to a VATSIM server, make sure to select the VATSIM tab. The combobox shows a list of active VATSIM servers. This list is updated automatically on a regular basis. Select the server of your choice. The selection is saved while connecting.\nIn order to connect to another custom FSD server, change to Other servers tab and select the server from the combobox. By default, swift does not offer any preconfigured custom FSD server. Go to Settings-\u003eServers or use the shortcut button goto settings to add and edit custom servers. One typical scenario for a custom FSD connection would be to connect to Euroscope to setup a Tower View. See towerview{.interpreted-text role=\"ref”} for more details.\nMode Selection As a regular pilot, you want to use Normal connection mode. The second mode is offered for shared cockpit users, further details sharedcockpit{.interpreted-text role=\"ref”} .\nFSD Details The default values are fine for regular usage. See advanced section for more information.\nVoice The default values are fine for regular usage. See advanced section for more information.\nMatching log The default values are fine for regular usage. See advanced section and matchmsg{.interpreted-text role=\"ref”} for more information.\nPilots Info ==============  This section requires you to enter your CID, password, real name and home base. Use the binoculars to get a helper dialog to select the airport ICAO code or just type it into the field - a completer will help you.\n=== 3. Own aircraft ===\nThis section configures the details of your used aircraft. If a simulator is connected already and the used aircraft model was known to swift (the Model name has a green border), then all parameters are expected to be filled correctly. Use the blue circle to refresh it, if the model name does not seem to be correct. Also correct any wrong items.\n::: {.important} ::: {.title} Important :::\nHaving a mapping of the \"own\" (i.e. the flown) aircraft in the database is a CONVENIENCE feature. You can always manually set the ICAO code for aircraft/airline in the login screen. :::\n Red: Aircraft information missing, simulator not connected If your simulator is connected, but the model not picked up, use the reload button next to the \"red box\".   Yellow: This aircraft can be used, but it is not know in the DB yet. You need to fill in the aircraft data manually   Green: Model known in DB, all filled in automatically  Finally enter your selected callsign.. If you need help here, see choosecs{.interpreted-text role=\"ref”} .\nAdvanced Settings, FSD Details =================================  Different flight simulator networks offer different features. Those can be enabled and disabled for this specific network.\nParts\nAircraft parts are a VATSIM specific extension of the FSD protocol to synchronize aircraft parts (gear, flaps, engines, lights, etc.). Using the extension on other private FSD networks other than VATSIM might work. Consult the network responsible in case of doubts.\nGnd.Flag\nThis flag configures whether the ground flag is sent as part of a pilot position update. On VATSIM, this is not the case. IVAO and other FSD networks make use of it.\nFast pos.\nA flag that controls whether fast position updates are in use in this FSD network. This generally works only between swift clients.\nText codec\nFSD protocol is pure ASCII. Most FSD networks do not define which minimum string encoding is supported by the server and clients. If another string encoding is required, it can be changed here.\nVoice\nVATSIM only: This setting allows to change the default VATSIM Voice UDP port, in case the default port is already in use or the user would like to change it.\nMatching log\nThe two check boxes enable or disable the creation of matching logs. Those are helpful to understand why a particular remote aircraft is displayed (as for example [A320 DLH]{.title-ref}). The matching log is a very verbose trace of what information was available which decisions have been taken to select the visible aircraft model. See matchmsg{.interpreted-text role=\"ref”} .\nAdvanced login popup =======================  In order to set a partner callsign and/or modify the send network data you can use the advanced login popup, see advloginscreen{.interpreted-text role=\"ref”} .\n","excerpt":"Before a connection to an online flight simulation network is made, …","ref":"/docs/manual/spc/connectnw/","title":"Connect to an online flight simulator network (VATSIM, FSD login page)"},{"body":"Should auto-connect between FS9 and swift not work, you will notice that the status-light on the right side of sim is off and swift is not able to detect the aircraft model that you are currently using in FS9\nIn order to solve this problem you need to change to FS9 and open the menu Multiplayer and choose Connect\nIn the connect-dialogue, swift's multiplayer-session should appear within a few seconds. Select it and then click on Join\nAfter joining swift's multiplayer-session, change back to swift GUI and check that the status-light next to sim is lit and that swift is able to detect your aircraft model\n","excerpt":"Should auto-connect between FS9 and swift not work, you will notice …","ref":"/docs/manual/swiftgeneral/fs9mp/","title":"Connecting FS9 manually through multiplayer"},{"body":"  #td-cover-block-0 { background-image: url(/contact/featured-background_hufe3886a988ff51396d24f1c169407fb0_3656346_960x540_fill_q75_catmullrom_smart1.jpg); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/contact/featured-background_hufe3886a988ff51396d24f1c169407fb0_3656346_1920x1080_fill_q75_catmullrom_smart1.jpg); } }  Contact the swift team          Discord Support offered from other members and developers.\nYou can also search through old message. Most likely someone had the same problem before.\nRead more …\n   E-Mail TBD\n   Teamspeak There is a TS3 server available for team meetings, etc.\n    ","excerpt":"  #td-cover-block-0 { background-image: …","ref":"/contact/","title":"Contact \u0026 Help"},{"body":"swift can send crash reports to our server, so we can check what is going wrong. However, this is also a privacy issue, as we need to send detailed information.\nA crash report includes\n detailed information about your swift installation and runtime environment your IP address information about your computer hardware  We will store the information until we have resolved the issue and then delete it. You can help us a lot if you enable crash reports, but if you have privacy concerns just disable it.\nEnable from the wizard's legal page is also possible:\nswift dump files are located here: findlogfiles{.interpreted-text role=\"ref”}\n","excerpt":"swift can send crash reports to our server, so we can check what is …","ref":"/docs/manual/swiftgeneral/crashreports/","title":"Crash reports / enable crash dumps"},{"body":"= Introduction =\nCrashpad is a library for capturing, storing and transmitting postmortem crash reports from a client to an upstream collection server. Crashpad aims to make it possible for clients to capture process state at the time of crash with the best possible fidelity and coverage, with the minimum of fuss.\nCrashpad also provides a facility for clients to capture dumps of process state on-demand for diagnostic purposes.\nCrashpad additionally provides minimal facilities for clients to adorn their crashes with application-specific metadata in the form of per-process key/value pairs. More sophisticated clients are able to adorn crash reports further through extensibility points that allow the embedder to augment the crash report with application-specific metadata.\nMore information can be found under [[https://chromium.googlesource.com/crashpad/crashpad/+/master/doc/overview_design.md | Crashpad Overview Design]]\n= Supported Platforms =\nCurrently Crashpad supports Windows and Mac OS only. On Windows, the supported compiler is MS Visual Studio. MinGW is not supported.\n= swift Infrastructure =\n== Crash Handler ==\nCrashpad is automatically linked and activated with a release build of swift. A standalone executable called [swift_crashpad_handler]{.title-ref} is monitoring each swift executable. [swift_crashpad_handler]{.title-ref} will collect process information including a full stack trace, in case of a abnormal abort. The collected information is automatically written into a minidump file and uploaded to https://swift-project.sp.backtrace.io\n== swift Breakpad Server ==\nswift Breakpad Server is our fork of \"Simple Breakpad Server\". This fork is currently hosted at https://github.com/emiro85/simple-breakpad-server The implementation is based on nodejs. It accepts minidump crashreports and symbols files needed to create a readable stack trace. Symbol files are automatically uploaded from a Jenkins Release build.\n== Produce Stacktrace Manually ==\nIn case a crash dump was uploaded without its corresponding symbol files (e.g. from a non-release Jenkins job), the stack trace can also created locally. This requires the following:\n # Symbol files: Either download them from the Jenkins job (be careful since only the latest artifacts are kept. As soon as the job runs again, the artifacts are lost). Extract it. # Download executable [minidump_stackwalk]{.title-ref} ## Windows: Link TBD ## Mac OS: Link TBD # Download the dump file from Breakpad Server if you don't have it locally already\n Run the command in a terminal: [minidump_stackwalk \u003cpath to dump file\u003e \u003cpath to symbol files\u003e \u003e stacktrace.txt]{.title-ref}\n","excerpt":"= Introduction =\nCrashpad is a library for capturing, storing and …","ref":"/docs/knowhow/programming/crashpad/","title":"Crashpad"},{"body":" Tutorials: smttutorials{.interpreted-text role=\"ref”} effmappings{.interpreted-text role=\"ref”} cr{.interpreted-text role=\"ref”} maphints{.interpreted-text role=\"ref”} problemsmapping{.interpreted-text role=\"ref”}  ::: {.important} ::: {.title} Important :::\nWe recommend to save your stash after you have create the mappings. If something goes wrong you can reload your work and publish it again. :::\nLogin\nIn order to create mappings you need to login within the swift datastore: In the mapping tool, go to the \"Settings and Login\" tab, and login with the DB. After the login you can see your roles as explained in mappingroles{.interpreted-text role=\"ref”}\nModels with/without mapping\nModels which already have a database mapping are indicated by a database icon. You can see that in the screenshot. Normally you need to create mappings only if it not yet exists.\nIt can also happen, that your data are outdated and in the meantime someone has created a mapping for model, which is not yet shown with the database icon. You can read more about data consolidation here \u003csmt\u003e{.interpreted-text role=\"ref”}.\nAnother good reason to change an existing mapping is if it is wrong. In this case you can correct the mapping. The procedure (for you) is the same, regardless if you create a new mapping or modify an existing one.\nDirect mappings / Change requests\nUsers with \"bulk\" update right and higher (see [[help/datastore/mappingroles/]]) can directly write to the DB. Other users will be able to create change requests. For you as a user there is almost no difference in creating the mapping, only the release process is different.\n Normal users: publish {icon caret-right color=blue} change request {icon caret-right color=blue} confirmed {icon caret-right color=blue} in DB   Direct updates:   new mappings: publish {icon caret-right color=blue} in DB changed mappings: publish {icon caret-right color=blue} change request {icon caret-right color=blue} confirmed {icon caret-right color=blue} in DB  Mapping confirmation\nAfter you have successfully published your mappings you will see a \"confirmation screen\". You can remove those published models (if you like) from the stash. Doing so allows you to publish step by step.\nEqual mappings\nIt does not make sense to publish mappings identical to an existing one in the DB. This would only create unnecessary change requests and work history entries. Therefor publishing identical entries is rejected. You will see a message like this in such a case:\nProblems?\nsee problemsmapping{.interpreted-text role=\"ref”}\n::: {.toctree glob=”” caption=\"Content in this chapter”} ./* :::\n","excerpt":" Tutorials: smttutorials{.interpreted-text role=\"ref”} …","ref":"/docs/manual/smt/createmappings/","title":"Create mappings for swift"},{"body":"::: {.important} ::: {.title} Important :::\nExternal links to 3rd party articles! :::\nIf you encounter swift hanging and NOT responding anymore you could create a crashdump and make this available for the swift team.\nCrash dump files   Here it is described how to do that, easy and simple: \"look for task manager\"\n  see https://kb.sitecore.net/articles/758511 or https://blogs.msdn.microsoft.com/debugger/2009/12/30/what-is-a-dump-and-how-do-i-create-one/     as the dmp file is quite big please zip it (rar it, whatever) and upload it to your shared drive (like Google drive, ...) and send us the link\n  Let us know you have that files: https://discord.gg/R7Atd9A (DISCORD, 3rd party)\n  Hints Hanging can have multiple reasons\n swift has opened a model window but you do not see this window because it has opened up on a different screen. see https://www.technipages.com/bring-off-screen-window-back-onto-screen  ","excerpt":"::: {.important} ::: {.title} Important :::\nExternal links to 3rd …","ref":"/docs/manual/swiftgeneral/createcrashdump/","title":"Creating a Windows crash dump (swift hanging)"},{"body":"Main contributors  Roland W. Mathew S. Klaus B.  Contributors  Lars T. (FG) Peter B. (traffic simulator) Michal G.  Used software libraries See the 3rd party licenses\nUsed icons, graphics etc.  FAMFAMFAM icons used, both in client and on websites, see here DIAGONA icons: © 2013 Yusuke Kamiyamane (site). All rights reserved. These icons are licensed under a Creative Commons Attribution 3.0 License. icondrawer icons: Using icons of http://www.icondrawer.com/ on web site and with client  Screenshots and aviation photos courtesy of:  Lukas E. Timm R. Christoph J. Rainer J. Wolfgang S. Wiki Commons (Creative Commons) images  Misc  Ben S. for X-Plane support Ross C. for joint development of aircraft parts concept and vPilot rules permission Kieran H., Kai K., Christoph N., Dominik S. for support Sascha S. for kicking off the project BitRock for sponsoring a free license for Open Source projects FSC e.V. for testing and ideas  ","excerpt":"Main contributors  Roland W. Mathew S. Klaus B.  Contributors  Lars T. …","ref":"/docs/legal/credits/","title":"Credits"},{"body":" All data stored in the database are legal property of swift. No unauthorized usage or copying allowed. Usage is only allowed within swift software components. When you (“the user”) enter/upload data to this DB, swift can use them now and forever.  ","excerpt":" All data stored in the database are legal property of swift. No …","ref":"/docs/legal/copyright/","title":"Data copyright"},{"body":"The swift model data are stored in the datastore database. This database contains all mappings, ICAO codes etc. used with swift.\nThere are two ways to obtain these data. swift will always download the data and store them locally in cache files.\n the mapping tool will download the data via web services directly from the database the client (pilot client) will download the data as files, we call them shared data file . The files are generated from the database and distributed to different servers. The content of the //shared files// is basically the same as in the web services, but it is a snapshot of the time when they are generated.  Some explanations:\n  for mapping (direct access to swift database)\n  the mapping tool writes directly to the database as all users editing the data always need the latest data. Also they have to work on the same data. if the database is down, users can still use the cached data, but not write data. This is not really a problem as the users can save the stash and continue at a later time there are only a few users concurrently creating mappings. Creating mappings is a specialized task only for power users. Since only few members work directly with the database it is not a performance problem.     for the pilot client (shared files)\n   there are much more users using the pilot client\n  during a flight the model data must not be updated, as this would consume too much time and affect interpolation\n  there are too many users so that not everybody can download directly from the database.\n  the pilot client downloads the shared files. as these files are available on multiple servers:\n  the download is redundant, if one server is down the shared files can be downloaded from another server the traffic is distributed, the swift team can open new download servers and hence share the network traffic        ","excerpt":"The swift model data are stored in the datastore database. This …","ref":"/docs/manual/datastore/dataprovisioning/","title":"Data provisioning (where do the mappings come from?)"},{"body":"Datenaustausch  swift tauscht Daten zwischen seinen einzelnen Web-Anwendungen aus, z.B. dev.swift-project.org und datastore.swift-project.org . swift stellt Daten (“mappings, “aircraft data”) weltweit zum Download zur Verfügung. swift stellt seine Software weltweit zum Download zur Verfügung. swift empfängt Benutzerdaten von VATSIM zur Anmeldung (“Single Sign On”). Diese Anmeldedaten werden aus der VATSIM Infrastruktur übermittelt. VATSIM ist ein weltweites Netzwerk, d.h. EU/außerhalb EU.  Data exchange  swift shares data among its own ecosystem, i.e. the various applications like dev.swift-project.org and datastore.swift-project.org . swift data for flight simulation (“mappings, “aircraft data”) are provided worldwide. swift software can be downloaded worldwide. swift receives and uses user data/credentials for authentication (“Single Sign On”). Those data are transferred from the VATSIM network, which operates worldwide (i.e. EU/non EU).  ","excerpt":"Datenaustausch  swift tauscht Daten zwischen seinen einzelnen …","ref":"/docs/legal/datareceiver/","title":"Datenschutz"},{"body":"Verantwortliche Stelle im Sinne der Datenschutzgesetze ist:\nswift gem.Impressum, siehe hier\nErfassung allgemeiner Informationen Wenn Sie auf unsere Webseite zugreifen, werden automatisch Informationen allgemeiner Natur erfasst. Diese Informationen (Server-Logfiles) beinhalten etwa die Art des Webbrowsers, das verwendete Betriebssystem, den Domainnamen Ihres Internet Service Providers und Ähnliches. Hierbei handelt es sich ausschließlich um Informationen, welche keine Rückschlüsse auf Ihre Person zulassen. Diese Informationen sind technisch notwendig, um von Ihnen angeforderte Inhalte von Webseiten korrekt auszuliefern und fallen bei Nutzung des Internets zwingend an. Anonyme Informationen dieser Art werden von uns statistisch ausgewertet, um unseren Internetauftritt und die dahinterstehende Technik zu optimieren.\nCookies Wie viele andere Webseiten verwenden wir auch so genannte „Cookies“. Cookies sind kleine Textdateien, die von einem Webseitenserver auf Ihre Festplatte übertragen werden. Hierdurch erhalten wir automatisch bestimmte Daten wie z. B. IP-Adresse, verwendeter Browser, Betriebssystem über Ihren Computer und Ihre Verbindung zum Internet.\nCookies können nicht verwendet werden, um Programme zu starten oder Viren auf einen Computer zu übertragen. Anhand der in Cookies enthaltenen Informationen können wir Ihnen die Navigation erleichtern und die korrekte Anzeige unserer Webseiten ermöglichen.\nIn keinem Fall werden die von uns erfassten Daten an Dritte weitergegeben oder ohne Ihre Einwilligung eine Verknüpfung mit personenbezogenen Daten hergestellt.\nNatürlich können Sie unsere Website grundsätzlich auch ohne Cookies betrachten. Internet-Browser sind regelmäßig so eingestellt, dass sie Cookies akzeptieren. Sie können die Verwendung von Cookies jederzeit über die Einstellungen Ihres Browsers deaktivieren. Bitte verwenden Sie die Hilfefunktionen Ihres Internetbrowsers, um zu erfahren, wie Sie diese Einstellungen ändern können. Bitte beachten Sie, dass einzelne Funktionen unserer Website möglicherweise nicht funktionieren, wenn Sie die Verwendung von Cookies deaktiviert haben.\nRegistrierung auf unserer Webseite Bei der Registrierung für die Nutzung unserer personalisierten Leistungen werden einige personenbezogene Daten erhoben, wie Name, Anschrift, Kontakt- und Kommunikationsdaten wie Telefonnummer und E-Mail-Adresse. Sind Sie bei uns registriert, können Sie auf Inhalte und Leistungen zugreifen, die wir nur registrierten Nutzern anbieten. Angemeldete Nutzer haben zudem die Möglichkeit, bei Bedarf die bei Registrierung angegebenen Daten jederzeit zu ändern oder zu löschen. Selbstverständlich erteilen wir Ihnen darüber hinaus jederzeit Auskunft über die von uns über Sie gespeicherten personenbezogenen Daten. Gerne berichtigen bzw. löschen wir diese auch auf Ihren Wunsch, soweit keine gesetzlichen Aufbewahrungspflichten entgegenstehen. Zur Kontaktaufnahme in diesem Zusammenhang nutzen Sie bitte die am Ende dieser Datenschutzerklärung angegebenen Kontaktdaten.\nSSL-Verschlüsselung Um die Sicherheit Ihrer Daten bei der Übertragung zu schützen, verwenden wir dem aktuellen Stand der Technik entsprechende Verschlüsselungsverfahren (z. B. SSL) über HTTPS.\nKommentarfunktion Wenn Nutzer Kommentare im Blog hinterlassen, werden neben diesen Angaben auch der Zeitpunkt ihrer Erstellung und der zuvor durch den Websitebesucher gewählte Nutzername gespeichert. Dies dient unserer Sicherheit, da wir für widerrechtliche Inhalte auf unserer Webseite belangt werden können, auch wenn diese durch Benutzer erstellt wurden.\nNewsletter Bei der Anmeldung zum Bezug unseres Newsletters werden die von Ihnen angegebenen Daten ausschließlich für diesen Zweck verwendet. Abonnenten können auch über Umstände per E-Mail informiert werden, die für den Dienst oder die Registrierung relevant sind (Beispielsweise Änderungen des Newsletterangebots oder technische Gegebenheiten).\nFür eine wirksame Registrierung benötigen wir eine valide E-Mail-Adresse. Um zu überprüfen, dass eine Anmeldung tatsächlich durch den Inhaber einer E-Mail-Adresse erfolgt, setzen wir das „Double-opt-in“-Verfahren ein. Hierzu protokollieren wir die Bestellung des Newsletters, den Versand einer Bestätigungsmail und den Eingang der hiermit angeforderten Antwort. Weitere Daten werden nicht erhoben. Die Daten werden ausschließlich für den Newsletterversand verwendet und nicht an Dritte weitergegeben.\nDie Einwilligung zur Speicherung Ihrer persönlichen Daten und ihrer Nutzung für den Newsletterversand können Sie jederzeit widerrufen. In jedem Newsletter findet sich dazu ein entsprechender Link. Außerdem können Sie sich jederzeit auch direkt auf dieser Webseite abmelden oder uns Ihren entsprechenden Wunsch über die am Ende dieser Datenschutzhinweise angegebene Kontaktmöglichkeit mitteilen.\nKontaktformular Treten Sie per E-Mail oder Kontaktformular mit uns in Kontakt, werden die von Ihnen gemachten Angaben zum Zwecke der Bearbeitung der Anfrage sowie für mögliche Anschlussfragen gespeichert.\nLöschung bzw. Sperrung der Daten Wir halten uns an die Grundsätze der Datenvermeidung und Datensparsamkeit. Wir speichern Ihre personenbezogenen Daten daher nur so lange, wie dies zur Erreichung der hier genannten Zwecke erforderlich ist oder wie es die vom Gesetzgeber vorgesehenen vielfältigen Speicherfristen vorsehen. Nach Fortfall des jeweiligen Zweckes bzw. Ablauf dieser Fristen werden die entsprechenden Daten routinemäßig und entsprechend den gesetzlichen Vorschriften gesperrt oder gelöscht.\nVerwendung von Google Analytics Diese Webseite benutzt Google Analytics, einen Webanalysedienst der Google Inc. (folgend: Google). Google Analytics verwendet sog. „Cookies“, also Textdateien, die auf Ihrem Computer gespeichert werden und die eine Analyse der Benutzung der Webseite durch Sie ermöglichen. Die durch das Cookie erzeugten Informationen über Ihre Benutzung dieser Webseite werden in der Regel an einen Server von Google in den USA übertragen und dort gespeichert. Aufgrund der Aktivierung der IP-Anonymisierung auf diesen Webseiten, wird Ihre IP-Adresse von Google jedoch innerhalb von Mitgliedstaaten der Europäischen Union oder in anderen Vertragsstaaten des Abkommens über den Europäischen Wirtschaftsraum zuvor gekürzt. Nur in Ausnahmefällen wird die volle IP-Adresse an einen Server von Google in den USA übertragen und dort gekürzt. Im Auftrag des Betreibers dieser Webseite wird Google diese Informationen benutzen, um Ihre Nutzung der Webseite auszuwerten, um Reports über die Webseitenaktivitäten zusammenzustellen und um weitere mit der Webseitennutzung und der Internetnutzung verbundene Dienstleistungen gegenüber dem Webseitenbetreiber zu erbringen. Die im Rahmen von Google Analytics von Ihrem Browser übermittelte IP-Adresse wird nicht mit anderen Daten von Google zusammengeführt.\nSie können die Speicherung der Cookies durch eine entsprechende Einstellung Ihrer Browser-Software verhindern; wir weisen Sie jedoch darauf hin, dass Sie in diesem Fall gegebenenfalls nicht sämtliche Funktionen dieser Webseite vollumfänglich werden nutzen können. Sie können darüber hinaus die Erfassung der durch das Cookie erzeugten und auf Ihre Nutzung der Webseite bezogenen Daten (inkl. Ihrer IP-Adresse) an Google sowie die Verarbeitung dieser Daten durch Google verhindern, indem sie das unter dem folgenden Link verfügbare Browser-Plugin herunterladen und installieren: Browser-Add-on zur Deaktivierung von Google Analytics.\nZusätzlich oder als Alternative zum Browser-Add-On können Sie das Tracking durch Google Analytics auf unseren Seiten unterbinden, indem Sie diesen Link anklicken . Dabei wird ein Opt-Out-Cookie auf Ihrem Gerät installiert. Damit wird die Erfassung durch Google Analytics für diese Website und für diesen Browser zukünftig verhindert, so lange der Cookie in Ihrem Browser installiert bleibt.\nVerwendung von Google Maps Diese Webseite verwendet Google Maps API, um geographische Informationen visuell darzustellen. Bei der Nutzung von Google Maps werden von Google auch Daten über die Nutzung der Kartenfunktionen durch Besucher erhoben, verarbeitet und genutzt. Nähere Informationen über die Datenverarbeitung durch Google können Sie den Google-Datenschutzhinweisen entnehmen. Dort können Sie im Datenschutzcenter auch Ihre persönlichen Datenschutz-Einstellungen verändern.\nAusführliche Anleitungen zur Verwaltung der eigenen Daten im Zusammenhang mit Google-Produkten finden Sie hier.\nEingebettete YouTube-Videos Auf einigen unserer Webseiten betten wir Youtube-Videos ein. Betreiber der entsprechenden Plugins ist die YouTube, LLC, 901 Cherry Ave., San Bruno, CA 94066, USA. Wenn Sie eine Seite mit dem YouTube-Plugin besuchen, wird eine Verbindung zu Servern von Youtube hergestellt. Dabei wird Youtube mitgeteilt, welche Seiten Sie besuchen. Wenn Sie in Ihrem Youtube-Account eingeloggt sind, kann Youtube Ihr Surfverhalten Ihnen persönlich zuzuordnen. Dies verhindern Sie, indem Sie sich vorher aus Ihrem Youtube-Account ausloggen.\nWird ein Youtube-Video gestartet, setzt der Anbieter Cookies ein, die Hinweise über das Nutzerverhalten sammeln.\nWer das Speichern von Cookies für das Google-Ad-Programm deaktiviert hat, wird auch beim Anschauen von Youtube-Videos mit keinen solchen Cookies rechnen müssen. Youtube legt aber auch in anderen Cookies nicht-personenbezogene Nutzungsinformationen ab. Möchten Sie dies verhindern, so müssen Sie das Speichern von Cookies im Browser blockieren.\nWeitere Informationen zum Datenschutz bei „Youtube“ finden Sie in der Datenschutzerklärung des Anbieters unter: https://www.google.de/intl/de/policies/privacy/\nIhre Rechte auf Auskunft, Berichtigung, Sperre, Löschung und Widerspruch Sie haben das Recht, jederzeit Auskunft über Ihre bei uns gespeicherten personenbezogenen Daten zu erhalten. Ebenso haben Sie das Recht auf Berichtigung, Sperrung oder, abgesehen von der vorgeschriebenen Datenspeicherung zur Geschäftsabwicklung, Löschung Ihrer personenbezogenen Daten. Bitte wenden Sie sich dazu an unseren Datenschutzbeauftragten. Die Kontaktdaten finden Sie ganz unten.\nDamit eine Sperre von Daten jederzeit berücksichtigt werden kann, müssen diese Daten zu Kontrollzwecken in einer Sperrdatei vorgehalten werden. Sie können auch die Löschung der Daten verlangen, soweit keine gesetzliche Archivierungsverpflichtung besteht. Soweit eine solche Verpflichtung besteht, sperren wir Ihre Daten auf Wunsch.\nSie können Änderungen oder den Widerruf einer Einwilligung durch entsprechende Mitteilung an uns mit Wirkung für die Zukunft vornehmen.\nÄnderung unserer Datenschutzbestimmungen Wir behalten uns vor, diese Datenschutzerklärung gelegentlich anzupassen, damit sie stets den aktuellen rechtlichen Anforderungen entspricht oder um Änderungen unserer Leistungen in der Datenschutzerklärung umzusetzen, z. B. bei der Einführung neuer Services. Für Ihren erneuten Besuch gilt dann die neue Datenschutzerklärung.\nFragen an den Datenschutzbeauftragten Wenn Sie Fragen zum Datenschutz haben, schreiben Sie uns bitte eine E-Mail oder wenden Sie sich direkt an unseren Datenschutzbeauftragten:\nKontaktdaten siehe Impressum\nDie Datenschutzerklärung wurde mit dem Datenschutzerklärungs-Generator der activeMind AG erstellt .\n","excerpt":"Verantwortliche Stelle im Sinne der Datenschutzgesetze ist:\nswift …","ref":"/docs/legal/dsgvo/","title":"Datenschutzerklärung"},{"body":"=== Windows libraries for DBus ===\n[[ knowhow/programming/swiftbuild/dbus/ ]]\n=== QDBusViewer ===\nIn order to use [QDBusViewer]{.title-ref} the [dbus-1.3.dll]{.title-ref} needs to be copied to the same folder as [QDBusViewer]{.title-ref}\n","excerpt":"=== Windows libraries for DBus ===\n[[ …","ref":"/docs/knowhow/programming/dbus/","title":"DBus (swift and DBus)"},{"body":"== QString ==\n Old: [QStringLiteral(\"{ \") % foo % QStringLiteral(\" }\")]{.title-ref} New: [u\"{ \" % foo % u\" }\"]{.title-ref}  When a string is only a single character you can use a UTF-16 character literal:\n Old: [QStringLiteral(\"[\") % foo % QStringLiteral(\"]\")]{.title-ref} New: [u'[' % foo % u']']{.title-ref}  See full detailed info here: [[ knowhow/programming/qt-strings/ ]]\n== Loops ==\nOne more performance point: to loop over the values of a [QHash]{.title-ref} or [QMap]{.title-ref} or [CDictionary]{.title-ref} there is no need to call [.values()]{.title-ref}, just loop over the container itself:\nfor (const auto \u0026value : map.values()) { ... } // old for (const auto \u0026value : map) { ... } // new Calling [.values()]{.title-ref} is just copying them into a [QList]{.title-ref} for no reason. Furthermore, to loop over the keys, we have [makeKeysRange]{.title-ref} in `blackmisc/range.h`:\nfor (const auto \u0026key : map.keys()) { ... } // old for (const auto \u0026key : makeKeysRange(map)) { ... } // new This avoids copying the keys into a [QList]{.title-ref}, as it just adapts the begin and end iterators. And to loop over keys //and// values, we have `makePairsRange`:\nfor (const auto \u0026key : map.keys()) /*********** old */ { doSomethingWithKey(key); doSomethingWithValue(map[key]); } for (const auto pair : makePairsRange(map)) /* new */ { doSomethingWithKey(pair.first); doSomethingWithValue(pair.second); } This avoids copying the keys into a [QList]{.title-ref} //and// performing a lookup for each one. In C++17 we will be able to unpack the pair like this:\nfor (const auto [key, value] : makePairsRange(map)) { doSomethingWithKey(key); doSomethingWithValue(value); } I think I have fixed it to use these everywhere possible in our codebase. Caveat: [makeKeysRange]{.title-ref} and [makePairsRange]{.title-ref} only work with lvalues. You will get a compile error if you try to use them with rvalues, because it would be unsafe.\n","excerpt":"== QString ==\n Old: [QStringLiteral(\"{ \") % foo % QStringLiteral(\" …","ref":"/docs/knowhow/programming/dec2018review/","title":"DEC 2018 C++ review"},{"body":"The entries can be deleted from the launcher tool menu (since 0.9.4).\nIf you want to do that manually, see https://doc.qt.io/qt-5/qsettings.html#locations-where-application-settings-are-stored\nBackground: swift saves screen geometry values (windows positions and sizes) in the registry. If those are corrupt/invalid (new screen, new screen size) it can cause swift to hang.\n From the above Qt source: https://doc.qt.io/qt-5/qsettings.html#locations-where-application-settings-are-stored\n::: {.important} ::: {.title} Important :::\nMySoft and Star Runner are example names from the Qt documentation, would would find swift-project.org and the swift application names instead. :::\nOn Unix systems, if the file format is NativeFormat, the following files are used by default: $HOME/.config/MySoft/Star Runner.conf (Qt for Embedded Linux: $HOME/Settings/MySoft/Star Runner.conf) $HOME/.config/MySoft.conf (Qt for Embedded Linux: $HOME/Settings/MySoft.conf) for each directory \u003cdir\u003e in $XDG_CONFIG_DIRS: \u003cdir\u003e/MySoft/Star Runner.conf for each directory \u003cdir\u003e in $XDG_CONFIG_DIRS: \u003cdir\u003e/MySoft.conf Note: If XDG_CONFIG_DIRS is unset, the default value of /etc/xdg is used. On macOS versions 10.2 and 10.3, these files are used by default: $HOME/Library/Preferences/com.MySoft.Star Runner.plist $HOME/Library/Preferences/com.MySoft.plist /Library/Preferences/com.MySoft.Star Runner.plist /Library/Preferences/com.MySoft.plist On Windows, NativeFormat settings are stored in the following registry paths: HKEY_CURRENT_USER\\Software\\MySoft\\Star Runner HKEY_CURRENT_USER\\Software\\MySoft\\OrganizationDefaults HKEY_LOCAL_MACHINE\\Software\\MySoft\\Star Runner HKEY_LOCAL_MACHINE\\Software\\MySoft\\OrganizationDefaults Note: On Windows, for 32-bit programs running in WOW64 mode, settings are stored in the following registry path: HKEY_LOCAL_MACHINE\\Software\\WOW6432node. If the file format is NativeFormat, this is \"Settings/MySoft/Star Runner.conf\" in the application's home directory. If the file format is IniFormat, the following files are used on Unix, macOS, and iOS: $HOME/.config/MySoft/Star Runner.ini (Qt for Embedded Linux: $HOME/Settings/MySoft/Star Runner.ini) $HOME/.config/MySoft.ini (Qt for Embedded Linux: $HOME/Settings/MySoft.ini) for each directory \u003cdir\u003e in $XDG_CONFIG_DIRS: \u003cdir\u003e/MySoft/Star Runner.ini for each directory \u003cdir\u003e in $XDG_CONFIG_DIRS: \u003cdir\u003e/MySoft.ini Note: If XDG_CONFIG_DIRS is unset, the default value of /etc/xdg is used. On Windows, the following files are used: FOLDERID_RoamingAppData\\MySoft\\Star Runner.ini FOLDERID_RoamingAppData\\MySoft.ini FOLDERID_ProgramData\\MySoft\\Star Runner.ini FOLDERID_ProgramData\\MySoft.ini ","excerpt":"The entries can be deleted from the launcher tool menu (since 0.9.4). …","ref":"/docs/manual/swiftgeneral/registrydelete/","title":"Delete swift registry values (Windows only)"},{"body":"The canonical value class Our value classes all follow a similar pattern of common methods:\n A registerMetadata method to register the class with the metatype system. Stringification methods to generate a string representation of an object. Comparison operators for comparing two objects of the same class. An overload of qHash to generate a hash of an object. Methods to marshal and unmarshal an object as a DBus argument. Methods to serialize to and from a JSON structure. A method to get the icon representing the object. Methods to access the properties of the object by an index.  The most common case, in which the methods are implemented using the metaclass{.interpreted-text role=\"ref”} system, is supported by deriving the class from CValueObject, which is a convenience class template which derives from all the most commonly used mixin classes, using multiple inheritance.\nMeta types and CVariant Any of our value objects can be stored in a [CVariant]{.title-ref}, and the canonical methods of the stored object can be accessed through the methods of CVariant. This is facilitated by a meta type system built on top of Qt's meta type system, using BlackMisc::registerMetaValueType() and duck typing. This allows value objects to be treated polymorphically while retaining value semantics and without introducing virtual methods in the public API.1 It is not neccessary for all of the canonical methods to be present in an object stored in a CVariant; it is a runtime error to attempt to use a method of a CVariant storing an object which doesn't support that method.\nMixin classes ::: {.note} ::: {.title} Note :::\nSome Q\u0026A about mixins from the meetings here. :::\nSometimes it doesn't make sense for a particular value class to implement one or more of the canonical methods. In these cases, instead of deriving from CValueObject, a value class can derive directly from the specific mixin classes which it needs. This allows for extensive code reuse through inheritance without violating the Liskov substitution principle and without coupling together unrelated responsibilities. All of the mixin classes, as well as CValueObject, use the CRTP. Some of the mixins require their template argument type to satisfy particular concepts. This is documented in their Doxygen class documentation. The concepts required when deriving from CValueObject are the union of all the required concepts of the mixins which CValueObject uses.\nInheritance Occasionally, we have value classes which represent specializations of other value classes, and therefore derive from those other value classes. For example, CHeading derives from CAngle, and CAltitude derives from CLength. In these cases, there is a base class which derives from certain mixins, and a derived class which derives from the base class and some other mixins. A base and a derived class might derive from some of the same mixins. For example, CAngle derives from Mixin::MetaType\u003cCAngle\u003e and CHeading derives from Mixin::MetaType\u003cCHeading\u003e. In these cases, it is necessary to use a using declaration to disambiguate which methods should be inherited in the derived class. In this example, the definition of CHeading has a using Mixin::MetaType\u003cCHeading\u003e::registerMetadata; to tell the compiler that it wants to inherit the registerMetadata method of Mixin::MetaType\u003cCHeading\u003e, not the registerMetadata method of CAngle. To reduce duplication of these using declarations, there are macros provided with the mixin classes to automatically introduce the appropriate declarations into a derived class.\n  Virtual methods in frequently-used CRTP class templates have a detrimental effect on compilation times, because they inhibit lazy instantiation of methods. ↩︎\n   ","excerpt":"The canonical value class Our value classes all follow a similar …","ref":"/docs/dev/values/","title":"Design and use of value classes"},{"body":"on MacOS: see http://doc.qt.io/qt-5/osx-deployment.html\nbin plugins swift.app Contents MacOS (same as Qt application Directory) swift lib share Win, Linux\n bin (same as Qt application Directory) plugins lib share ","excerpt":"on MacOS: see http://doc.qt.io/qt-5/osx-deployment.html\nbin plugins …","ref":"/docs/dev/dirstructure/","title":"Directory structure"},{"body":"Good joystick capturing article: https://bell0bytes.eu/directinput/\n [DIDFT_PSHBUTTON]{.title-ref} A push button. A push button is reported as down when the user presses it, and as up when the user releases it. [DIDFT_TGLBUTTON]{.title-ref} A toggle button. A toggle button is reported as down when the user presses it and remains so until the user presses the button a second time.  ","excerpt":"Good joystick capturing article: https://bell0bytes.eu/directinput/ …","ref":"/docs/knowhow/programming/dx/","title":"DirectX and DirectInput"},{"body":"swift has build-in AFV support. If you want to disable it (e.g. because you want to use the external AFV client) you can do.\n From the client:   From swift launcher:   as command line argument [--noaudio]{.title-ref}  ","excerpt":"swift has build-in AFV support. If you want to disable it (e.g. …","ref":"/docs/manual/spc/flightwithswift/disableafv/","title":"Disable AFV"},{"body":"::: {.important} ::: {.title} Important :::\nIf you do not see any models here (press load set) then swift will not work for you. Something is wrong :::\nIf you wish to see your model set in the client, you can go to Models and load set.\n","excerpt":"::: {.important} ::: {.title} Important :::\nIf you do not see any …","ref":"/docs/manual/spc/flightwithswift/modelsetinclient/","title":"Display model set in the client"},{"body":"The distributor preferences can be used to prioritize models if a certain vendor/distributor.\nRead the details under rankmodelset{.interpreted-text role=\"ref”}\n","excerpt":"The distributor preferences can be used to prioritize models if a …","ref":"/docs/manual/smt/distributorprefs/","title":"Distributor preferences"},{"body":"swift allows to control several features via \"dot commands\" like .msg .drv. The easiest way to get an overview of all commands is using the tooltip as shown\nIf you dislike the large tooltip showing all the time you can disable it by typing .tooltip (toggles tooltip help on/off)\n","excerpt":"swift allows to control several features via \"dot commands\" like .msg …","ref":"/docs/manual/swiftgeneral/dotcommands/","title":"dot-commands (.commands), hide dot command tooltip"},{"body":"::: {.important} ::: {.title} Important :::\nalpha/developer versions are early access versions for testing. We recommend to keep a more stable version in parallel. :::\nSee copyswiftdata{.interpreted-text role=\"ref”}\nDownload alpha   To download alpha you need to go here: https://datastore.swift-project.org/\n  Login with your VATSIM SSO account and create an account\n  If already approved, you see the download page, you are good to go! If not, you'll see an info that your account awaits approval If your VATSIM account has expired, get that fixed, see here \u003cqa\u003e{.interpreted-text role=\"ref”}     Now you can ask for a tester account (same as alpha account) - but for that we need at least need your real name or VATSIM id. Otherwise we cannot find you in the user list.\n  You should see a link to the download page (see below). If you DO NOT SEE this link let us know so we can enable you as tester.\n   After we have enabled the link you need logoff -\u003e login again before the link becomes visible  ::: {.important} ::: {.title} Important :::\nWe need your real name, or your VATSIM id, to grant access for developer versions. Just by your nickname (like \"TheFlyingDude\") we can NOT find your account! :::\n","excerpt":"::: {.important} ::: {.title} Important :::\nalpha/developer versions …","ref":"/docs/manual/datastore/downloadalpha/","title":"Download developer and alpha versions from datastore"},{"body":" swift pilot client (C++): [[ https://build.swift-project.org/job/swift_pilotclient_doxygen/Doxygen/ | Doxygen build ]] datastore, the mapping database (LAMP, JavaScript, PHP): [[ https://build.swift-project.org/job/swift_datastore_doxygen/Doxygen/ | Doxygen build ]] [[ help/swiftgeneral/ms/techdetails/ ]]  ","excerpt":" swift pilot client (C++): [[ …","ref":"/docs/knowhow/programming/doxygen/","title":"Doxygen API pages"},{"body":"::: {.warning} ::: {.title} Warning :::\nThis protocol specification is work in progress. Do not yet use it for implementation. :::\nIntroduction This specification is meant to be an extension to the existing propritary VATSIM protocol. This is driven by the fact, that the VATSIM protocol is lacking several important information like the position of gear, flaps, setting of lights or even the an on-ground flag. The idea of this protocol extension is to use JSON objects to have a easy to extend and easy to read paackage. It is sent via the custom packet functionality of FSD. This means, you are able to send each JSON string to a specific callsign.\nWhy JSON?   It is easy for humans to read and write. It is easy for machines to parse and generate.\n  Almost every information can be sent as JSON object\n  Objects can be nested All relevant data types are available     Information are sent as objects. Although we have not yet discussed it, this could be a solution for FSD 2.0 as well.\n  JSON is well supported by frameworks: http://www.json.org/\n  JSON is de facto standard for data transfer via web services\n  Easy to extend without breaking compatibility, new attributes can just be added.\n  Example:\n{ \"strobe\": false, \"landing\": false } could be easily extended to\n{ \"strobe\": false, \"landing\": false, \"taxi\": true, } Very likely the 2nd response is still compliant with legacy systems of the first generation.\n Character encoding (see below) will allow us to use the full unicode set and hence avoids encoding issues as in the current FSD packages.  JSON DataTypes The following tables shows all possible JSON types:\n Type Description\n Number double-precision floating-point format in JavaScript\nString double-quoted Unicode with backslash escaping\nBoolean true or false\nArray an ordered sequence of values\nValue it can be a string, a number, true or false, null etc\nObject an unordered collection of key:value pairs\nWhitespace can be used between any pair of tokens\nnull empty Object Definitions Lights The lights object is used to synchronize the aircraft lights.\n{ \"strobe\": false, \"landing\": false, \"taxi\": true, \"beacon\": false, \"nav\": true, \"logo\": false } Each light can be switched on or off individually.\nValues:\ntrue: Light is switched on.\nfalse: Light is switched off.\ndefault: Light is switched on.\n::: {.note} ::: {.title} Note :::\nRoss: FSX supports toggling the recognition lights. How about adding a \"recog\" property to the lights object? :::\nGear The gear object contains maximum 3 positions.\n::: {.note} ::: {.title} Note :::\nRoss: do we really need three separate gear values? If the three values didn't all have the same value, that would mean a gear malfunction, and that's extremely rare. I don't think it's worth the extra packet size. :::\n::: {.note} ::: {.title} Note :::\nMat: I like the idea of being able to observe asymmetric gear failure. The packet is only sent when something changes. If packet size was such a big deal we wouldn't be using plain text. But the three position maximum is insufficient for all aircraft types (e.g. 747 needs four: left, center, right, and nose). If the choice is between one value and three values, I prefer one. But I also think we could come up with a solution to support an arbitrary number of values, and still have the smaller packet size in the case when all values are equal. (e.g. [{ \"all\": true }]{.title-ref} or [{ \"all\": true, \"nose\": false }]{.title-ref}) :::\n::: {.note} ::: {.title} Note :::\nRoss: Correct me if I'm wrong, but in order to implement the \"all\" value, it would need to be a tri-state. There would need to be a way for the client to know to ignore the value of \"all\" and instead look at the value of the individual gear positions. Remember that we're omitting values that are equal to the default. Personally I don't think this is worth it for the extremely rare event of a gear malfunction. :::\n{ \"center\": true, \"left\": true, \"right\": true } Values:\ntrue: Gear is extended.\nfalse: Gear is retracted.\ndefault: Gear is retracted.\n::: {.note} ::: {.title} Note :::\nRoss: I'm wondering if the default should be gear down, since that will be the case for most of the aircraft you encounter during a flight. :::\n::: {.note} ::: {.title} Note :::\nMat: agreed. :::\nFlaps { \"trailing_edge_flaps\": false, \"leading_edge_flaps\": false } Values:\ntrue: Flap is extended.\nfalse: Flap is retracted.\ndefault: Flap is retracted.\n::: {.note} ::: {.title} Note :::\nRoss: I propose shortening these property names to [trailing_edge]{.title-ref} and [leading_edge]{.title-ref} since the [_flaps]{.title-ref} suffix is redundant. :::\n::: {.note} ::: {.title} Note :::\nMat: [flaps]{.title-ref} and [slats]{.title-ref} would be even shorter. :::\n::: {.note} ::: {.title} Note :::\nRoss: Indeed ... I was suggesting removing the [_flaps]{.title-ref} suffix only to remove the redundancy. I wasn't looking to save length. Changing it to [flaps]{.title-ref} and [slats]{.title-ref} would re-introduce redundancy again since the object name is [flaps]{.title-ref}. Perhaps we just eliminate the [flaps]{.title-ref} object and just have top level [flaps]{.title-ref} and [slats]{.title-ref} properties. (I'm actually still in favor of a flat key/value pair list instead of using nested objects anyway. I feel like the nested object hierarchy just bleeds implementation details into the protocol, but I don't feel all that strongly about it either way.) :::\n::: {.note} ::: {.title} Note :::\nMat: If we go with a single value for landing gear, then it would be consistent to also have a single value covering both flaps and slats. :::\n::: {.note} ::: {.title} Note :::\nRoss: A single [flaps_down]{.title-ref} value works for me, because as far as I know you can't have flaps extended without slats (or vice-versa) unless there's a malfunction. At least that's the case with any aircraft I've flown. That's also supported by the fact that there is no SimConnect event for extending/retracting the slats. (No that that's definitive, just pointing it out.) :::\n::: {.note} ::: {.title} Note :::\nRoss: Once I dug into this a bit more while implementing this functionality in vPilot, I'm realizing that it might make more sense to have the flaps value be an integer (representing the percent of extension, with zero as the default) rather than a boolean. This would allow us to distinguish between takeoff and landing flaps settings. Thoughts? :::\n::: {.note} ::: {.title} Note :::\nRoland: I had thought about it in the very beginning. If we do it, I would recommend to send numbers with low frequency or only steps. {nav Flaps 0 \u003e Flaps 10 \u003e Flaps 15} etc. :::\n::: {.note} ::: {.title} Note :::\nRoss: I considered that as well, but not all aircraft use the same values for degrees when referencing various levels of flap extension. How would the client know which levels are supported by any given aircraft model? Also, FSX/P3D allow reading/writing the flaps value as a percentage, not as a number of degrees. I assume that's because of the fact that not all aircraft use the same number of degrees for various flap settings. I'm not sure how XPlane works in this regard. Should we move this discussion to the forum thread we already have going? Not sure who all has access to that... :::\n::: {.note} ::: {.title} Note :::\nDiscussion continued at https://dev.vatsim-germany.org/boards/11/topics/1592?r=2235 :::\nSpoilers { \"left\": false, \"right\": false } Values:\ntrue: Spoilers are extended.\nfalse: Spoilers are retracted.\ndefault: Spoilers are retracted.\nOn Ground Flag Legacy FSD does not provide information if an aircraft is on ground. This object will add it.\n\"on_ground\": true Values:\ntrue: Aircraft is on ground.\nfalse: Aircraft is flying.\ndefault: Aircraft is flying.\nEngines Running Flag \"engines_running\": true Values:\ntrue: Aircraft engines are running.\nfalse: Aircraft engines are not running.\ndefault: [true]{.title-ref}.\nDefault values Each Object has a defined default value. In case a key is missing in the JSON object, the receiver client shall fill missing key/value pairs with default value. The sending client shall always skip key/value pairs which are identical to default in order to reduce bandwidth.\nProtocol Supporting Clients Since this protocol is quite new, all legacy clients will not understand and ignore aircraft configuration packets. In order to reduce bandwidth and safe CPU time, the client shall send packets only to clients which have support for aircraft configuration packets declared in their [CAPS]{.title-ref} packet. Supporting clients have the following key/value pair defined:\nACCONFIG=1 Packets shall only pushed to clients, which have this [CAPS]{.title-ref} value defined.\nThe list of clients is currently:\n vPilot swift  Range In order to reduce traffic load, the client should send configuration packets only to remote aircrafts in a defined range (recommended are 10 nm, but a client developer might let the user configure it).\nPushing a new Configuration Packet When a callsign/aircraft, which accepts configuration packets (see CAPS value), enters the defined range the first time from a client perspective, the client shall send send a full configuration packet immediately and also a full packet anytime something has changed. To reduce bandwidth and size of the packet, default values shall be taken into account.\n{ \"lights\": { \"strobe\": false, \"landing\": false, \"beacon\": false, \"logo\": false }, \"gear\": { \"center\": true, \"left\": true, \"right\": true }, \"flaps\": { }, \"spoilers\": { }, \"on_ground\": true } Missing pairs in object lights have to be replaced by default values. flaps and spoilers are empty, this means the default value applies to all pairs.\n::: {.todo} Maximum length payload? :::\nCharacter Encoding To avoid conflicts with non-ASCII characters either in FSD or on the client side, all non-ASCII characters inside string values shall be encoded via JSON character escape sequence, defined in the JSON specification (RFC4627 chapter 2.5 Strings):\n If the character is in the Basic Multilingual Plane (U+0000 through U+FFFF), then it may be represented as a six-character sequence: a reverse solidus, followed by the lowercase letter u, followed by four hexadecimal digits that encode the character's code point. The hexadecimal letters A though F can be upper or lowercase. So, for example, a string containing only a single reverse solidus character may be represented as \"\\u005C\".  Examples:\n non-ASCII character Unicode Escaped sequence\n à U+00E0 u00E0\nȹ U+0239 u0239\nŦ U+0166 u0166\ný U+00FD u00FD Most JSON parsers support automatically character escaping.\nExample Qt implementation to escape characters\n#include \u003cQCoreApplication\u003e #include \u003cQDebug\u003e QString convertToUnicodeEscaped(const QString \u0026str) { QString escaped; for (QString::const_iterator it = str.begin(); it != str.end(); ++it) { QChar ch = *it; ushort code = ch.unicode(); if (code \u003c 0x80) { escaped += ch; } else { escaped += \"\\\\u\"; escaped += QString::number(code, 16).rightJustified(4, '0'); } } return escaped; } int main(int argc, char *argv[]) { QCoreApplication a(argc, argv); QString str(\"This is a Test string with ßÜÖЗдравствуй\"); qDebug() \u003c\u003c convertToUnicodeEscaped(str); Output:\nThis is a Test string with \\u00df\\u00dc\\u00d6\\u0417\\u0434\\u0440\\u0430\\u0432\\u0441\\u0442\\u0432\\u0443\\u0439 Open questions Maximum length of payload for such a JSON message. Is the length sufficient? Btw, what is the maximum length anyway?\n","excerpt":"::: {.warning} ::: {.title} Warning :::\nThis protocol specification is …","ref":"/docs/dev/acconfig/","title":"Draft protocol spec: aircraft parts configuration packets for FSD"},{"body":"First of all, swift mapping is about quality, not quantity. So just create a mapping which is wrong is not the goal. However, there are some tricks to speed up the mapping process.\nUse pre-selected models The process becomes much faster if you but models on the stash which have something in common. That can be the \"distributor\", the \"ICAO code\" or even multiple attributes.\nExample:\n Here I select all [B732]{.title-ref} of the [BVAI]{.title-ref} distribution. So I already know I will have only those models on the stash. Stash those   Now on the stash, I select all of the, and assign [BVAI]{.title-ref} by pressing [distributor]{.title-ref} to all selected. So by one click, the distributor is set for all models.   Same for the aircraft ICAO, select [B732]{.title-ref}, [aircraft ICAO]{.title-ref}, and all models have the correct ICAO code   With these 2 simple steps, you have fixed distributor and aircraft ICAO, now only the livery/airline is missing Now we check the airlines one by one, remember it is about quality. A good share will already be correct. Whenever I have found some correct ones, I select and publish them (small steps)   Then I remove them from the stash, so I have only those left which I still need to handle After a few iterations I have one model left I still need to resolve. In my case [ModelConverterX]{.title-ref} could be used to check the model (what it really is)   If you are unable to resolve the livery, you can provide at [temp livery]{.title-ref}. This is a special livery for those aircraft still need a correct livery assigned. In such a case \"specialists\" can select those models and add. the missing information  Summary: This examples shows how you can quickly write mappings for a larger number of aircraft. You do not need to follow each step, it is to give you an idea about mapping techniques.\nUsing models of a arbitrary directory Maybe you want to download models and do the mappings without installing them for your flight simulator. In that case you can use a little trick and use force reload from directory\nSo when I install the [BVAI]{.title-ref} models (for example) in C:\\temp\\BVAI I can load my own models from there. Then you can create the mapping for those models without installing them into you flight simulator directories.\nUnfortunately you have to reload you simulator models again, if you want to have those from the simulator back. But could also save the models to a file (like for a backup), and later load them again.\n","excerpt":"First of all, swift mapping is about quality, not quantity. So just …","ref":"/docs/manual/smt/createmappings/effmappings/","title":"Effectively and efficiently create mappings"},{"body":"If you see another aircraft floating or below ground, this can have multiple reasons. It might make sense to trace the interpolation to see if swift \"thinks\" the plane should be on ground.\nUpfront:\n  aircraft too high or too low is caused by scenery offsets and/or missing/wrong vertical offsets (aka CG), see ongroundscenarios{.interpreted-text role=\"ref”}\n  typical causes may include\n  missing CG/offset, see xplanecg{.interpreted-text role=\"ref”} wrong XPlane elevation missing FSX terrain probe, see fsxprobe{.interpreted-text role=\"ref”} wrong gnd. flag from other party     So checking floating/hovering means to check\n the gnd. flag the offset/CG the elevation  You can debug the issue in two ways:\n \"Live\" as described below, using the interpolation log. display or recorded as described in tracinginterpolation{.interpreted-text role=\"ref”} -\u003e \"Full HTML log.\"  Understanding the ground flag  if other aircraft send aircraft parts with a ground flag or a gnd. flag we know the aircraft should be on ground in all other cases (no gnd. flag) we are guessing if the aircraft is supposed to be on ground.  Starting the log. display Use .drv intdisplay to launch the window. See Interpolation log. display window for details.\n Checking gnd. situation (log. display) =========================================   select the aircraft you want to check   you can check the input situations from the network   unter interpolation you can see the interpolated situation for your simulator   to refresh press   note that the marked text says it is on ground you could also check the loopback situation, which is the last situation we received from the simulator for that aircraft  Checking the CG (aka vertical offset) ========================================  You can check the CG in two ways:\n in the interpolation log. display or in the \"rendered\" aircraft model view.  interpolation log. display\nIn the interpolation tab you can see CG as it is \"really\" used for the interpolated situation\nYou can also check if the simulator CG is available, which is available in the \"Data flow\" tab.\nHere you can see the CG (as stored in the DB) and if an aircraft has parts (which means a ground flag is sent on VATSIM).\nRendered aircraft view\nnull values mean the vertical offset/CG is not available.\n do not confuse [null]{.title-ref} and zero \"0\". [null]{.title-ref} means value is not available, while \"0\" means the values is available. some aircraft have 0 (zero) based offsets (so 0 can be a correct value)  checking the elevation  ::: {.important} ::: {.title} Important :::\nFor performance reasons we do not query elevations all the time :::\n you can set coordinates (e.g. for your own aircraft) and test if the requested elevation is available (means the probe works) you can also check the elevation history and see if there are incoming elevation values. Again: please understand we only query elevations for aircraft supposed to be \"near ground\".  ","excerpt":"If you see another aircraft floating or below ground, this can have …","ref":"/docs/manual/swiftgeneral/tracinginterpolationonground/","title":"Example: Tracing if aircraft should be on ground"},{"body":"Some models are marked as x excluded (meaning in that context here, that the model shall not be used for matching). Typical reasons for that are:\n  XPlane .acf models (flyable aircraft) cannot be used for matching. See xplanemapping{.interpreted-text role=\"ref”} .\n  Some AI models for FSX/P3D do not show valid aircraft and are therefor excluded.\n  Legal reasons might lead to excluded models.\n  Some models exists, but are known to be buggy/malfunctional or consume too many resources\n  It is still useful to create mappings for such models!, see reverselookup{.interpreted-text role=\"ref”}\n  for automatic flight plan information for the login ICAO data for reverse lookup between swift clients (more detailed info used for matching)     ::: {.important} ::: {.title} Important :::\nNormally excluded models are not used in a model set, but there might be exceptions (we cannot verify all cases) :::\n","excerpt":"Some models are marked as x excluded (meaning in that context here, …","ref":"/docs/manual/smt/excludedmodels/","title":"Excluded models in mapping tool"},{"body":"If you need to export your model set (for troubleshooting or just to send it to others) you can do this with the context menu in the mapping tool.\nReasons why you might export a model set\n backup send to someone else to help with matching send model set for debugging having multiple model sets for various purposes such as testing, special flights you wanna try something (like adding some models or remove some), but you want to keep your original set.  ::: {.important} ::: {.title} Important :::\nZipping the exported JSON format can reduce the size dramatically, in case you need to upload the file :::\n","excerpt":"If you need to export your model set (for troubleshooting or just to …","ref":"/docs/manual/swiftgeneral/modelsandmodelset/exportmodelset/","title":"Export model set (backup a model set)"},{"body":"Open source parts of PCSB and VVL http://www.xsquawkbox.net/xsb/developers/\nParts of the pcsb and vvl are open source.\nExternal data providers   Airports:\n http://openflights.org/data.html#airport Roughly 10k entries, getting data from http://ourairports.com/data/ approx. 47k entries    Aircrafts:\n Official ICAO aircraft codes database https://www.icao.int/publications/doc8643/pages/search.aspx    ","excerpt":"Open source parts of PCSB and VVL …","ref":"/docs/knowhow/externalresources/","title":"External Resources / links"},{"body":" Note Boon and bane  Characteristics of the contexts:  Facade for a set of domain functionality Smallest unit registered with DBus, hence smallest unit which can be used remotely  Characteristics of the runtime  Owns the DBus server (if applicable, server side) or the DBus connection (client side) - initDBusServer Factory for contexts Loads the settings (not only for other contexts, but also DBus server) Connects cross context signal / slots (initPostSetup)  Cross context dependency    context / depends on audio app network settings simulator own aircraft     audio         application x  x x x x   network x     x   settings x x x  x x   simulator   x   x   own aircraft x    x     Review (for future swift versions) Know shortcomings:\n Cross dependencies, the ideal design goal is to have independent contexts. The idea was that each context can be enabled/disabled, but the goal was not achieved. DBus communication is not bidirectional. The audio context can run on core or on GUI, but the proxy/implementation object can not just be switched (at least not for peer 2 peer DBus). Our design was planned around the runtime/contexts. But launcher/mapping tool do not need contexts.  Keep in mind for future versions:\n We still transfer mass data (i.e. relatively large amounts of data, like all remote aircraft or models). Therefore we use pull to avoid overloads. Any future distributed objects system needs to consider that. Automatic object distribution might be fatal.  ","excerpt":" Note Boon and bane  Characteristics of the contexts:  Facade for a …","ref":"/docs/dev/facade/","title":"Facade classes (aka contexts)"},{"body":"For swift modelmatching tool (for AI models) add [$FGDATA/AI/Aircraft]{.title-ref} and for flyable aircraft (not for displaying in SIM) select the hangar folder.\nFG Wiki page currently here: http://wiki.flightgear.org/Swift\nAbout This module allows FlightGear to connect to an externally running swift client.\nswift is an open-source pilot client for multiple flight simulators (FSX, P3D, FS9, XPlane, FG) and operating systems (Windows, MacOS, Linux). It allows connections to FSD servers like VATSIM. Further information about swift can be here.\nswift status Beta status\n","excerpt":"For swift modelmatching tool (for AI models) add …","ref":"/docs/knowhow/simandinterpolation/fgintegration/","title":"FG (FlightGear) integration"},{"body":"You can find the settings and cache files from the swift File menu\nThe path is something like here:\n C:\\Users\\JoeDoe\\AppData\\Local\\org.swift-project If you want to backup all your swift data then backup this directory (backup swift). Then some \"magic name\" representing your swift installation, like H%3A%2FProjects%2FQtBuilds%2Fbuild-swift-Desktop_Qt_5_11_1_MSVC2017_64bit2-Debug%2Fout%2Fdebug%2Fbin + settings or data (caches)   Each installation of swift has its own data data. So you can run as many swift installations as you like. If you look at the directory screenshot, you can see that there is one swift data directory as per swift installation. If you want to temp. reset to default settings, you can just rename the directory to a new name ..._MSVC2017_64bit2-Debug%2Fout%2Fdebug%2Fbin.bak, note the [.bak]{.title-ref} at the end. With the next start swift creates a new directory with default settings/data. By renaming the [bak]{.title-ref} file as it was, you will get the settings/data back. swift versions are distinguished by their corresponding install directory. So if you override an existing installation (same directory), it will use the same data. If you install to another place, it will use another data directory. If you need to copy data among multiple swift installations you can use the wizard, see copyswiftdata{.interpreted-text role=\"ref”} See also: findlogfiles{.interpreted-text role=\"ref”} To reset the screen size, see also resetscreen{.interpreted-text role=\"ref”}  Windows Registry (Windows only) Under Windows swift windows geometry data are stored in the registry, see also resetscreen{.interpreted-text role=\"ref”} .\n HKEY_CURRENT_USER\\Software\\swift-project.org HKEY_LOCAL_MACHINE\\Software\\swift-project.org  On other OS you can find the corresponding data here: https://doc.qt.io/qt-5/qsettings.html#platform-specific-notes\n","excerpt":"You can find the settings and cache files from the swift File menu\nThe …","ref":"/docs/manual/swiftgeneral/findcachefiles/","title":"Find cache and settings files (where swift stores its data)"},{"body":"Find the log files The easiest way to find the swift log files is from the file menu:\nThe path is something like here:\n C:\\Users\\JoeDoe\\AppData\\Local\\org.swift-project Then some magic name representing your swift version, like H%3A%2FProjects%2FQtBuilds%2Fbuild-swift-Desktop_Qt_5_11_1_MSVC2017_64bit2-Debug%2Fout%2Fdebug%2Fbin\\` + :code:`logs See also: findcachefiles{.interpreted-text role=\"ref”}  On MacOS, the Path is :code:'~/Library/Application Support/org.swift-project'\nFind files in launcher In the launcher you can just go to [TOOLS]{.title-ref} and open the directory there\nFind the crashpad (aka crash dump) files The crashpad files are located next to the log directory, dmp are most useful file types. See also crashreports{.interpreted-text role=\"ref”}\nInterpolation log. files Interpolation log. files from interpolationdisplay{.interpreted-text role=\"ref”} can also be found in the log. directory, all files for one timestamp belong to the same session. If you want to UPLOAD those files, zip them together in one archive.\n","excerpt":"Find the log files The easiest way to find the swift log files is from …","ref":"/docs/manual/swiftgeneral/findlogfiles/","title":"Find swift log files, crashdump files, interpolation log. files"},{"body":"::: {.important} ::: {.title} Important :::\nThose files are overridden with any update of swift, so you would need to backup your changes :::\nThe swift stylesheet files (aka swift qss files) sever the same purpose as css files for HTML. If you want to change the appearance of swift you could change those files. See also thirdparty{.interpreted-text role=\"ref”} .\nThe qss files are located in the swift install directory in the qss subfolder\n","excerpt":"::: {.important} ::: {.title} Important :::\nThose files are overridden …","ref":"/docs/manual/swiftgeneral/findqss/","title":"Find swift stylesheet files / find qss files"},{"body":"::: {.important} ::: {.title} Important :::\nIf the flight plan window is too small for you, see swiftuiconcepts{.interpreted-text role=\"ref”} . You can display the FP in its own window. And use the tooltips for the various input fields if you need help! :::\nStandard operations   load/send to send or load to /from used network\n  load/save to save or load from disk\n  vPilot format SB4 format swift JSON format     Actions:\n validate checks flighplan strict decides if strict check rules are applied prefill fills flight plan based on current aircraft reset the flight plan  Download from SimBrief Synchronize flight plan with simulator data If your aircraft model (the one you fly) is known in the DB AND the flight plan was NOT sent yet, then your flight plan plan will be automatically updated (ICAO, callsign) whenever you change your aircraft in the simulator.\nIf you wish to override your flight plan data with the simulator data regardless of the state, you can use the \"circle\" icon next to the callsign.\nAltitude popup, metric altitudes You can use the altitude dialog to enter metric altitudes or get help with the altitude entry\nFlight plan numbering The swift numbering is based on the FAA flight plan. Aircraft/equipment (3) is split into 2 fields (swift), remarks (11) are at the bottom.\nRemember remarks As it can be useful to reuse recently sent remarks you can now use the remarks history. Just click the remarks buttons to fill in the remarks fields.\nFlight plan of other Aircraft You can see the flight plan of other aircraft from the aircraft views context menu.\n","excerpt":"::: {.important} ::: {.title} Important :::\nIf the flight plan window …","ref":"/docs/manual/spc/flightplan/","title":"Flight plan"},{"body":"You do not need to download additional models for FlightGear. You can use the existing models from FGDATA/AI/Aircraft.\nTo use them add the $FGROOT/AI/Aircraft/ folder to your swift model directories throught swift data.\n","excerpt":"You do not need to download additional models for FlightGear. You can …","ref":"/docs/installation/downloadmodels/flightgear/","title":"Flightgear models"},{"body":" useswiftchecklist{.interpreted-text role=\"ref”} connectnw{.interpreted-text role=\"ref”} flightplan{.interpreted-text role=\"ref”} metar{.interpreted-text role=\"ref”} textmsg{.interpreted-text role=\"ref”} spcmm{.interpreted-text role=\"ref”} instantmap{.interpreted-text role=\"ref”} settings{.interpreted-text role=\"ref”} sharedcockpit{.interpreted-text role=\"ref”} disableafv{.interpreted-text role=\"ref”}  ::: {.toctree glob=”” caption=\"Content in this chapter”} disableafv modelsetinclient incognito integratecomunit manualchangemodel metar xplanefollow sharedcockpit aircraftviews :::\n","excerpt":" useswiftchecklist{.interpreted-text role=\"ref”} …","ref":"/docs/manual/spc/flightwithswift/","title":"Flying with swift"},{"body":" FS9 has no ground elevation probe and no gnd. flag for MP airplanes  The solution is to use the own aircraft's elevation as field elevation. In order to use that you need to enable this option.\nIn that case you would use your ground elevation within 250meters.\n","excerpt":" FS9 has no ground elevation probe and no gnd. flag for MP airplanes …","ref":"/docs/installation/fs9/fs9elevation/","title":"FS9 elevation (FS9 aircraft too high/low)"},{"body":" WoAI: https://www.world-of-ai.com/ Gliders: http://www.fsglider.de  ","excerpt":" WoAI: https://www.world-of-ai.com/ Gliders: http://www.fsglider.de  ","ref":"/docs/installation/downloadmodels/fs9/","title":"FS9 models"},{"body":"See https://studentweb.uvic.ca/~norrisng/fsd-doc/\n","excerpt":"See https://studentweb.uvic.ca/~norrisng/fsd-doc/\n","ref":"/docs/knowhow/simandinterpolation/fsd/","title":"FSD protocol documentation"},{"body":" VATSIM FLAI: http://flai.bvartcc.com/ WoAI: https://www.world-of-ai.com/  Glider  Freeware: http://www.fsglider.de Payware: https://www.aerosoft.com/de/flugsimulation/flight-simulator-x/flugzeuge/144/discus-glider-x?number=AS11133 Payware: https://www.aerosoft.com/de/flugsimulation/flight-simulator-x/flugzeuge/401/discus-k-glider-x?number=AS11231  ","excerpt":" VATSIM FLAI: http://flai.bvartcc.com/ WoAI: …","ref":"/docs/installation/downloadmodels/fsxp3dv3/","title":"FSX \u0026 P3Dv3 models"},{"body":"P3D: Using aircraft folders outside the simObjects If you need to configure multiple aircraft folders you can do that on the simulator mappings.\n  the settings can be changed\n  in the wizard, the pilot client, or the mapping tool     You can configure multiple model directories\n  default values are shown in gray, if you explicitly set directories those are shown in white\n  Updating the supported simulators (cross simulator updates) Many models work with FSX, FS9, and P3D. It is useful if this information is properly kept, so the wizards and tool work best.\nYou can use the cross simulator tool (FSX, P3D, FS9) to check your local models, find out which simulator they belong to, and then update the flags.\nAfter the run you will see automatically stashed models you can use to update the database models for the changed flags.\n","excerpt":"P3D: Using aircraft folders outside the simObjects If you need to …","ref":"/docs/manual/smt/p3dspecific/","title":"FSX / P3D specific information"},{"body":"SimConnect (communication between swift and FSX/P3D) knows two ways to add an aircraft, see P3D docu.\n SimConnect_AICreateNonATCAircraft: The SimConnect_AICreateNonATCAircraft function is used to create an aircraft that is not flying under ATC control (so is typically flying under VFR rules). SimConnect_AICreateSimulatedObject: The SimConnect_AICreateSimulatedObject function is used to create AI controlled objects other than aircraft  The normal way to create our aircraft is via SimConnect_AICreateNonATCAircraft and works by far for the most AI aircraft. However, some helicopters etc. can only be added as SimConnect_AICreateSimulatedObject.\nUnfortunately this varies over the version (so it might work as \"NonATC\" for P3D, but fails for FSX. So we use trial and error here, if the model fails the first time with \"NoATC\", we use \"Simulated object\". This was not worth mentioning it if both version would behave the same.\n But aircraft added as \"NoATC\" will not show in the aircraft view menu, so you cannot follow those. Also aircraft parts cannot be set on those.  As a result some people do not like to use [SimConnect_AICreateSimulatedObject]{.title-ref}. You can control that by the simulator settings.\nWe recommend:\n  keep that off until you see that issue\n  then you have two options\n  enable it and use such aircraft via SimConnect_AICreateSimulatedObject, but not seeing them in the menu. replace them in the model set by AI aircraft which work.     ","excerpt":"SimConnect (communication between swift and FSX/P3D) knows two ways to …","ref":"/docs/manual/swiftgeneral/fsxaimodel/","title":"FSX/P3D SimConnect\\_AICreateNonATCAircraft fails, models are not rendered"},{"body":"Getting the code  Clone the source-code from Github with git clone https://github.com/swift-project/pilotclient.git (or SSH if you prefer). Run git submodule update --init to clone the submodules. Download and install the latest LTS version of Qt from https://www.qt.io/download-qt-installer. Run Qt Creator and open the project file swift.pro in the root of your git clone.  ","excerpt":"Getting the code  Clone the source-code from Github with git clone …","ref":"/docs/gi/gettingstarteddev/","title":"Getting started as a developer"},{"body":"Git Tips and Tricks\n[git pull --rebase]{.title-ref}\nSuppose you’ve made a small change to the code that you want to [push]{.title-ref} to the remote repository. But before you can do that, you need to [pull]{.title-ref} some other recent changes that other people have made, to synchronise your local repo with the remote. Here’s the situation before the pull:\n* your commit == local HEAD * their commit 2 == remote HEAD | | | * their commit 1 | | +---------------+---------------+ | * common ancestor And here is what the tree would look like after an ordinary `pull`:\n* merge commit == local HEAD | +------------------+ | | * your commit * their commit 2 == remote HEAD | | | * their commit 1 | | +------------------+ | * common ancestor But if you used [pull --rebase]{.title-ref} instead, the tree would look like this:\n* your commit == local HEAD | * their commit 2 == remote HEAD | * their commit 1 | * common ancestor This is good for small changes when you want the git history to be nice and linear, not littered with merges that make it harder to read through and follow. But it is potentially dangerous for anything bigger because it changes the parent commit of your commit, which has the effect of also changing the SHA1 of your commit, an invasive rewriting of history.\nIn particular, you must not use [push --rebase]{.title-ref} if you’ve already pushed your local commit to some other branch; that would be bad because then there would be two different versions of history which would be hard to reconcile. But if your commit only exists in your one local branch, then you should be safe to rebase it. It could be said that it subverts the “branch and merge” philosophy of git, but OTOH it is a better semantic model of your intent, and that’s why it’s provided as an option. See also [[http://stackoverflow.com/questions/2472254/when-should-i-use-git-pull-rebase | SO question]] .\nCommitting individual hunks or lines If you’ve made several logically separate changes in the same file, and you want to put these changes into separate commits so that other developers can more easily make sense of your changes, git-gui can help:\n{F3630}\nThrough the right-click context menu you can choose to commit only certain hunks or lines, instead of entire files. Do be careful, though, that the project should be in a buildable state after each individual commit, so if A depends on B then B should be committed first.\n(A hunk is a block of one or more changes, with a header line at the top which begins with [@]{.title-ref} [@]{.title-ref}.)\nResolving conflicts with diff3 It can be difficult when resolving conflicts, when you don't know the context of the other developer's changes. Traditional git diff only shows your version of the code and the other developer's version of the code, which can lead to conflicts being resolved wrongly and breaking the other developer's work. Git has an option to enable the diff3 conflict style, which also shows the version of the code as it was in the common ancestor of your changes and their changes, which makes it much easier to see exactly what changed:\n[git config --global merge.conflictstyle diff3]{.title-ref}\nFast-forward merge to another branch without touching files It is a common task when working in a feature branch, to merge your branch into the integration branch. Traditionally, you [checkout]{.title-ref} the integration branch, then [merge]{.title-ref} the feature branch, then [checkout]{.title-ref} the feature branch again. If it is a fast-forward merge, then all your files will be exactly as they were before the merge, except their timestamps will have changed, resulting in your IDE unnecessarily rebuilding the code. There is a trick to avoid this:\n[git push . feature/T123_foo:develop/0.9.0]{.title-ref}\n[git push .]{.title-ref} means \"push to my own local repository\" and [feature/T123_foo:develop/0.9.0]{.title-ref} means \"update [develop/0.9.0]{.title-ref} to point to the HEAD of [feature/T123_foo]{.title-ref}\". It will fail if the merge is not a fast-forward, which is good, because we want only fast-forward merges in integration branches.\n","excerpt":"Git Tips and Tricks\n[git pull --rebase]{.title-ref}\nSuppose you’ve …","ref":"/docs/knowhow/programming/git/tips/","title":"git tips and tricks"},{"body":"::: {.toctree glob=”” hidden=”\"} ./* :::\nPlaceholder, see TOC below\n","excerpt":"::: {.toctree glob=”” hidden=”\"} ./* :::\nPlaceholder, see TOC below\n","ref":"/docs/knowhow/programming/git/git/","title":"git version control and arc"},{"body":"To temporarily change label-settings from within X-Plane\n In X-Plane open menu Plugins-\u003exswiftbus, there is a line to toggle aircraft labels. This setting is not permanent, but only valid for your current session of X-Plane.  To //permanently// save label-settings: * in swiftGUI proceed to SETTINGS ** select SIMULATOR and click on [...] next to X-Plane. ** This will open a new window where you can check/uncheck your aircraft label status. ** Changes will be saved when closing swiftGUI.\n","excerpt":"To temporarily change label-settings from within X-Plane\n In X-Plane …","ref":"/docs/manual/spc/settings/hidecallsign/","title":"Hide callsign in XPlane (XPlane labels)"},{"body":"General Across the chapters, the following definitions shall apply:\nHotkey Source (Device): Implementation or device object, which can trigger a hotkey function, e.g. keyboard, joystick, remote event\nHotkey Action: String based object with hierarchical syntax, describing and grouping hotkey purpose, e.g. push-to-talk\nHotkey Receiver Object: Any kind of object which registers one if its methods for a Hotkey Function\nObject Interface Overview Different objects and interfaces are involved and will be explained in details below\nInterface CInputManager vs. Hotkey Receiver Objects First of all a hotkey receiver object is an object which exposes one or more of its methods as hotkey method. Typical examples are CContextAudio for push to talk and GUI for different GUI hotkeys.\nSources and receivers of a hotkey action are not coupled. A receiver does not know which source triggered the hotkey action. The same is applicable the other way round. A source does not know, which hotkey function it might trigger - if any. The mapping logic is done in CInputManager. It is the central node wiring source and receiver together.\nHotkey receiver objects bind a method to a hotkey action. The hotkey action is a string with a hierarchical syntax, e.g. /Test/Message. Test stands for an arbitrary group into which Message belongs. This syntax can be used to logically group hotkeys together. No Hotkey Source is involved at this stage (no keyboard keys, no joystick etc). To the object itself it is transparent which Hotkey Source the call had issued.\nUsage example: BlackCore::CActionBind m_action { \"/Test/Message\", this, \u0026CFoo::bar };\nInterface CInputManager vs. Hotkey Source (Device) CInputManager will feed all configured keys/buttons to the corresponding device interface. Registered CKeyboardKeys will be registered in IKeyboard, joystick buttons will be registered in IJoystick. IKeyboard and IJoystick will signal back if one of the registered keys/buttons have been pressed. No actions are involved at this stage. CInputManager knows, which Hotkey Receiver Objects are registered and will call their functions.\nAdvantages:\n  Only keys need to be registered which have to be monitored locally Can be extended easily by adding a new input device.   Hotkey Action forwarding to Remote Hotkey actions do not have to be limited to local execution. If forwarding is enabled, all triggered actions will be forwarded to a remote process running on any machine. This allows for example to configure a push to talk hotkey on one machine, even though core is running in a different process.\nAdvantages:\n  Only one event type is required, even if more input devices are added Remote CInputManager does not need to know the configuration of the local GUI, it will just react on the given inputs from DBus.   Interface CInputManager vs. Settings CInputManager is interfacing with the settings API. The list of action hotkeys - which is the mapping between a hotkey combination and the hotkey action is loaded during start up and modifications saved to disk.\nSummary The design is conceptual only. It addresses the new requirements of different instead of only one input device. Input has to be transparent (keyboard, joystick, event, anything else) and decoupling of different objects is IMHO good OO design. It hopefully reduces complexity within swift a lot.\n","excerpt":"General Across the chapters, the following definitions shall apply: …","ref":"/docs/dev/hotkeys/","title":"Hotkeys (architecture)"},{"body":"General:  Hotkeys as the push to talk (PTT) button can be defined under settings -\u003e hotkeys Hotkeys can be keyboard keys or joystick buttons Hotkeys are machine dependent , when you use a distributed version of swift the hotkey can originate from your local machine or the remote machine  Troubleshooting and testing:  if a combination is not working delete it and add it again. It can be that the identifier of the key has changed and the code hence is not recognized). if you want to test a particular key combination, you can assign the \"swift hotkey test message\" (see screenshot). You will see a small popup when you press the key combination (indicating the combination works).   you can use the tooltip to see details in the hotkey dialog  ","excerpt":"General:  Hotkeys as the push to talk (PTT) button can be defined …","ref":"/docs/manual/spc/definehotkey/","title":"Hotkeys such as PTT (push to talk), Joystick hotkey not working"},{"body":"See aircraftrange{.interpreted-text role=\"ref”}\n","excerpt":"See aircraftrange{.interpreted-text role=\"ref”}\n","ref":"/docs/manual/swiftgeneral/faq/restrictaircraft/","title":"How can I restrict the number of aircraft?"},{"body":"See swiftmap{.interpreted-text role=\"ref”}\n","excerpt":"See swiftmap{.interpreted-text role=\"ref”}\n","ref":"/docs/manual/swiftgeneral/faq/startmap/","title":"How can i start swift map?"},{"body":"See sharedcockpit{.interpreted-text role=\"ref”}\n","excerpt":"See sharedcockpit{.interpreted-text role=\"ref”}\n","ref":"/docs/manual/swiftgeneral/faq/copilot/","title":"How to fly as co-pilot (copilot)?"},{"body":" If you fail to see other aircraft please check: notrendered{.interpreted-text role=\"ref”} Top 4 XPlane problems:  Based on yesterday's experience, there are 4 top problems using //swift// and XPlane * no models are shown / no other aircraft, in most of the cases the aircraft folder is in the wrong place. see [here](https://swift-project.github.io/docs/manual/swiftgeneral/notrendered/) or you did not create a model set * landing gear not visible or always visible: conflict with other pilot client, remove any other pilot client or AI traffic plugin you have installed, e.g. XSquawkBox, X-IvAp, PilotEdge, WorldTraffic. * aircraft are too high or low: The offset fix is not installed or incorrectly installed. [See here](https://swift-project.github.io/docs/installation/xplane/xplanecg/) * If you **move your model folder you need to reload your models in the mapping tool and recreate the model set** [see](https://swift-project.github.io/docs/manual/swiftgeneral/modelsandmodelset/createms/) ","excerpt":" If you fail to see other aircraft please check: …","ref":"/docs/manual/swiftgeneral/faq/nootherplanes/","title":"I do not see other planes, no other aircraft, no other traffic"},{"body":" If you fail to see other aircraft please check: notrendered{.interpreted-text role=\"ref”} Top 4 XPlane problems: https://dev.swift-project.org/phame/post/view/10/top_4_swift_and_xplane_topics/  ","excerpt":" If you fail to see other aircraft please check: …","ref":"/docs/manual/swiftgeneral/faq/notraffic/","title":"I see no other traffic"},{"body":"  We have (or we target to have) all official ICAO codes www.icao.int of in the database. The ICAO database is one of our main references.\n  Sometime it is hard to understand \"why\" or \"why not\" ICAO creates a new entry for a certain aircraft type. Some entries of the ICAO database are duplicates of others entries. This seems to have technical reasons and we will try to eliminate those duplicates (if they are reported). Rule of thumb: \"All entries of www.icao.int minus duplicates\" are supposed to be in the swift DB     IATA codes: There are cases where IATA distinguishes two aircraft types, while ICAO does not. This means IATA uses are more detailed scheme and we (normally) create those extra entries.\n  Code descriptions:\n   We have 3 description fields which can be used to describe the aircraft. As those fields are searchable such descriptions will help to find the most appropriate entry.\n  Normally we will use those fields to provide the company aircraft types.\n  In cases where there are more detailed company codes (more detailed than the ICAO and IATA entries) we need to decide on a \"case by case\" basis if it makes sense to create multiple entries, or rather use one of the existing entries. This decision depends on many factors:\n  Is there a visual difference among those company types? Is that aircraft frequently used in flight simulation? Are many distributions supporting this aircraft?        Remark: As it is easier to later merge entries (than to split them), sometimes it makes sense to create a new entry if not 100% sure.\n  ::: {.note} ::: {.title} Note :::\nThe above explains why we use a review process to create new ICAO codes :::\n","excerpt":"  We have (or we target to have) all official ICAO codes www.icao.int …","ref":"/docs/manual/datastore/cr/icaohints/","title":"ICAO code hints"},{"body":"Impressum Angaben gemäß §5 TMG\nswift project (privat, nicht kommerziell), vertreten durch: c/o tbd , tbd\nKontakt:\n E-Mail: tbd Datenschutz: tbd  Haftungsausschluss Haftung für Inhalte Die Inhalte unserer Seiten wurden mit größter Sorgfalt erstellt. Für die Richtigkeit, Vollständigkeit und Aktualität der Inhalte können wir jedoch keine Gewähr übernehmen. Als Diensteanbieter sind wir gemäß § 7 Abs.1 TMG für eigene Inhalte auf diesen Seiten nach den allgemeinen Gesetzen verantwortlich. Nach §§8 bis 10 TMG sind wir als Diensteanbieter jedoch nicht verpflichtet, übermittelte oder gespeicherte fremde Informationen zu überwachen oder nach Umständen zu forschen, die auf eine rechtswidrige Tätigkeit hinweisen. Verpflichtungen zur Entfernung oder Sperrung der Nutzung von Informationen nach den allgemeinen Gesetzen bleiben hiervon unberührt. Eine diesbezügliche Haftung ist jedoch erst ab dem Zeitpunkt der Kenntnis einer konkreten Rechtsverletzung möglich. Bei Bekanntwerden von entsprechenden Rechtsverletzungen werden wir diese Inhalte umgehend entfernen.\nHaftung für Links Unser Angebot enthält Links zu externen Webseiten Dritter, auf deren Inhalte wir keinen Einfluss haben. Deshalb können wir für diese fremden Inhalte auch keine Gewähr übernehmen. Für die Inhalte der verlinkten Seiten ist stets der jeweilige Anbieter oder Betreiber der Seiten verantwortlich. Die verlinkten Seiten wurden zum Zeitpunkt der Verlinkung auf mögliche Rechtsverstöße überprüft. Rechtswidrige Inhalte waren zum Zeitpunkt der Verlinkung nicht erkennbar. Eine permanente inhaltliche Kontrolle der verlinkten Seiten ist jedoch ohne konkrete Anhaltspunkte einer Rechtsverletzung nicht zumutbar. Bei Bekanntwerden von Rechtsverletzungen werden wir derartige Links umgehend entfernen.\nUrheberrecht Die durch die Seitenbetreiber erstellten Inhalte und Werke auf diesen Seiten unterliegen dem deutschen Urheberrecht. Die Vervielfältigung, Bearbeitung, Verbreitung und jede Art der Verwertung außerhalb der Grenzen des Urheberrechtes bedürfen der schriftlichen Zustimmung des jeweiligen Autors bzw. Erstellers. Downloads und Kopien dieser Seite sind nur für den privaten, nicht kommerziellen Gebrauch gestattet. Soweit die Inhalte auf dieser Seite nicht vom Betreiber erstellt wurden, werden die Urheberrechte Dritter beachtet. Insbesondere werden Inhalte Dritter als solche gekennzeichnet. Sollten Sie trotzdem auf eine Urheberrechtsverletzung aufmerksam werden, bitten wir um einen entsprechenden Hinweis. Bei Bekanntwerden von Rechtsverletzungen werden wir derartige Inhalte umgehend entfernen.\nDatenschutz Die Nutzung unserer Webseite ist in der Regel ohne Angabe personenbezogener Daten möglich. Soweit auf unseren Seiten personenbezogene Daten (beispielsweise Name, Anschrift oder eMail-Adressen) erhoben werden, erfolgt dies, soweit möglich, stets auf freiwilliger Basis. Diese Daten werden ohne Ihre ausdrückliche Zustimmung nicht an Dritte weitergegeben. Details finden sich hier.\nWir weisen darauf hin, dass die Datenübertragung im Internet (z.B. bei der Kommunikation per E-Mail) Sicherheitslücken aufweisen kann. Ein lückenloser Schutz der Daten vor dem Zugriff durch Dritte ist nicht möglich.\nDer Nutzung von im Rahmen der Impressumspflicht veröffentlichten Kontaktdaten durch Dritte zur Übersendung von nicht ausdrücklich angeforderter Werbung und Informationsmaterialien wird hiermit ausdrücklich widersprochen. Die Betreiber der Seiten behalten sich ausdrücklich rechtliche Schritte im Falle der unverlangten Zusendung von Werbeinformationen, etwa durch Spam-Mails, vor.\nDatenschutz (Kommentarfunktion): Im Rahmen der Kommentarfunktion unseres Blogs erheben wir personenbezogene Daten (z. B. Name, E-Mail) im Rahmen Ihrer Kommentierung zu einem Beitrag nur in dem Umfang wie Sie ihn uns mitgeteilt haben. Bei der Veröffentlichung eines Kommentars wird die von Ihnen angegebene Email-Adresse gespeichert, aber nicht veröffentlicht. Ihr angegebener Name wird veröffentlich. Sie können auch ein Pseudonym benutzen.\nGoogle Analytics Diese Website benutzt Google Analytics, einen Webanalysedienst der Google Inc. (‘‘Google’'). Google Analytics verwendet sog. ‘‘Cookies’’, Textdateien, die auf Ihrem Computer gespeichert werden und die eine Analyse der Benutzung der Website durch Sie ermöglicht. Die durch den Cookie erzeugten Informationen über Ihre Benutzung diese Website (einschließlich Ihrer IP-Adresse) wird an einen Server von Google in den USA übertragen und dort gespeichert. Google wird diese Informationen benutzen, um Ihre Nutzung der Website auszuwerten, um Reports über die Websiteaktivitäten für die Websitebetreiber zusammenzustellen und um weitere mit der Websitenutzung und der Internetnutzung verbundene Dienstleistungen zu erbringen. Auch wird Google diese Informationen gegebenenfalls an Dritte übertragen, sofern dies gesetzlich vorgeschrieben oder soweit Dritte diese Daten im Auftrag von Google verarbeiten. Google wird in keinem Fall Ihre IP-Adresse mit anderen Daten der Google in Verbindung bringen. Sie können die Installation der Cookies durch eine entsprechende Einstellung Ihrer Browser Software verhindern; wir weisen Sie jedoch darauf hin, dass Sie in diesem Fall gegebenenfalls nicht sämtliche Funktionen dieser Website voll umfänglich nutzen können. Durch die Nutzung dieser Website erklären Sie sich mit der Bearbeitung der über Sie erhobenen Daten durch Google in der zuvor beschriebenen Art und Weise und zu dem zuvor benannten Zweck einverstanden.\nEs besteht die Möglichkeit Google Analytics (opt out) durch ein Browser add-on zu verhindern.\nGoogle Maps Diese Webseite verwendet das Produkt Google Maps von Google Inc. Durch Nutzung dieser Website erklären Sie sich mit der Erfassung, Bearbeitung sowie Nutzung der automatisiert erhobenen Daten durch Google Inc., deren Vertreter sowie Dritter einverstanden.\nDie Nutzungsbedingungen von Google Maps finden sie unter “Nutzungsbedingungen von Google Maps”.\nKommentare und Beiträge Wenn Nutzer Kommentare im Blog oder sonstige Beiträge hinterlassen, werden ihre IP-Adressen gespeichert. Das erfolgt zur Sicherheit des Anbieters, falls jemand in Kommentaren und Beiträgen widerrechtliche Inhalte schreibt (Beleidigungen, verbotene politische Propaganda, etc.). In diesem Fall kann der Anbieter selbst für den Kommentar oder Beitrag belangt werden und ist daher an der Identität des Verfassers interessiert.\nZugriffsdaten/ Server-Logfiles Der Anbieter (beziehungsweise sein Webspace-Provider) erhebt Daten über jeden Zugriff auf das Angebot (so genannte Serverlogfiles). Zu den Zugriffsdaten gehören: Name der abgerufenen Webseite, Datei, Datum und Uhrzeit des Abrufs, übertragene Datenmenge, Meldung über erfolgreichen Abruf, Browsertyp nebst Version, das Betriebssystem des Nutzers, Referrer URL (die zuvor besuchte Seite), IP-Adresse und der anfragende Provider. Der Anbieter verwendet die Protokolldaten nur für statistische Auswertungen zum Zweck des Betriebs, der Sicherheit und der Optimierung des Angebotes. Der Anbieterbehält sich jedoch vor, die Protokolldaten nachträglich zu überprüfen, wenn aufgrund konkreter Anhaltspunkte der berechtigte Verdacht einer rechtswidrigen Nutzung besteht.\nKommentarabonnements Die Nachfolgekommentare können durch Nutzer abonniert werden. Die Nutzer erhalten eine Bestätigungsemail, um zu überprüfen, ob sie der Inhaber der eingegebenen Emailadresse sind. Nutzer können laufende Kommentarabonnements jederzeit abbestellen. Die Bestätigungsemail wird Hinweise dazu enthalten\n","excerpt":"Impressum Angaben gemäß §5 TMG\nswift project (privat, nicht …","ref":"/docs/legal/impressum/","title":"Impressum"},{"body":"Links LINK_TEXT\nSee https://gohugo.io/content-management/cross-references/\nBlocks {{%alerttitle=\"Warning\"color=\"warning\"%}} This is a warning. {{%/alert%}} Creating YouTube tutorials  Video capturing: Open Broadcaster Software  ","excerpt":"Links LINK_TEXT\nSee …","ref":"/docs/gi/improvehelp/","title":"Improve help and tutorials"},{"body":"Some people do NOT want to display real names for streaming. You can hide real names at any time with the incognito mode.\nIn that case real names are masked\n","excerpt":"Some people do NOT want to display real names for streaming. You can …","ref":"/docs/manual/spc/flightwithswift/incognito/","title":"Incognito mode (hide names for streaming)"},{"body":"For the 32bit P3D/FSX driver it is recommended to install the FSX terrain probe. The probe allows to query simulator data around your AI aircraft.\nImportant The probe needs to be instelld before you run FSX/P3D  There are 3 ways to install the probe:\n From the settings simulator \"plugin configuration\":   In the wizard:   Or just copy it manually to SimObjects/Misc . The probe is located in your swift share/simulator directory  Testing the probe  You should see the confirmation the probe is added (only for FSX/P3D 32bit drivers)    To fully test the probe, you can open the interpolation display .drv intdisplay\n  go to the elevation tab click own aircraft which should set the coordinates of your own aircraft click set. You should now see a response (2nd line) displaying the gnd. elevation (supposed to be your own aircraft's elevation - CG)     ","excerpt":"For the 32bit P3D/FSX driver it is recommended to install the FSX …","ref":"/docs/installation/fsx/fsxprobe/","title":"Installation of the FSX/P3D terrain probe"},{"body":"Why to install multiple swift versions?  You want to install a 32 and 64-bit version (e.g. for FSX/P3D) You want to keep a stable tested version, but test a new version You want to be able to quickly change between setups. Each swift Installation has its own data/configuration  swift directory concept  You can install as many swift versions in parallel as you like. swift is a directory based installation, no registry entries or such. Each installation has its own settings and cache files (and hence is isolated).  If you have 4 installations as above, you would also have 4 setting directories with individual settings You can always open your directories from the main menu  For Windows: your directory is located here C:\\Users\\\u003cusername\u003e\\AppData\\Local\\org.swift-project We recommend you to keep updates of your model set, as creating a model set is the most time consuming job    Installing a new version There are two ways to install a new swift version\n Override into the same directory  The same data directory is used and there is no need to copy settings or caches. In case you just want to install a bug fix or such, you do not need to run the wizard if you have already setup this version Remark: Some people have reported problems with overriding, in such a case just delete or uninstall swift.   Installation in a new directory  you can keep multiple versions in parallel. swift knows settings and caches (data files, e.g. for downloaded data). You can copy those from other swift versions after the installation.    Copy data from other swift versions You can copy data from other swift versions via the launcher wizard\n Hint: If you have only one swift version installed, there will be no such wizard screen Not all data files can be copied. Most likely you would want to copy your model set and simulator model files You can copy the model set and/or model cache. You can skip the copy, or just press next to get the standard files copied.  ","excerpt":"Why to install multiple swift versions?  You want to install a 32 and …","ref":"/docs/installation/copyswiftdata/","title":"Installing a new version in parallel and copy swift data from other versions"},{"body":"::: {.important} ::: {.title} Important :::\nHaving a mapping of the \"own\" (i.e. the flown) aircraft in the database is a CONVENIENCE feature. You can always manually set the ICAO code for aircraft/airline in the login screen. :::\nYou can directly create a new mapping \u003cmm\u003e{.interpreted-text role=\"ref”} from the login page. So when you see the model you are flying in not yet in the swift database please help us and provide the correct information. Other users will appreciate your support.\nUse the little green swift button to launch the wizard. Go thru the different values and fill in the values. These values will be used as filter values in the following pages.\nOn the aircraft ICAO page you need to select the appropriate entry. The value are filtered by the values from the first page, but you could also clear the filter and search values from the scratch.\nNow there are two options\n you will see an airline based list or a search form the closest color livery  Assigning a distributor will later allow to set preference or filters\nYou are almost done, a last verification to check if the data are correct.\n::: {.note} ::: {.title} Note :::\nIt can take a moment before you see the mapping, see nodbmodel{.interpreted-text role=\"ref”} :::\n","excerpt":"::: {.important} ::: {.title} Important :::\nHaving a mapping of the …","ref":"/docs/manual/spc/instantmap/","title":"Instant mapping (create a mapping before you fly - Quick mapping wizard)"},{"body":" You can enable COM unit synchronization (between simulator and swift) from the simulator settings    Synchronization means\n  volume sync with simulator (not yet implemented) enable/disable COM unit from simulator cockpit transmitting/receiving as set in simulator COM unit (cockpit)     ::: {.important} ::: {.title} Important :::\nIf you use \"synced\" and you see NO (or incorrect) TX/RX values checked, it could mean your COM unit is off in the plane. Especially in XPlane the vendors follow various concepts indicating the COM status in the datarefs.. If you cannot get it working with your plane, you could used the \"un-synced\" default values. :::\n Integration off, all LEDs are blue   Integration on, TX/RX as set in simulator cockpit   use the tooltips for further information on the LEDs with NO integration you will see always the default Rx/Tx values as here   with sync that should change according to your aircraft cockpit  ::: {.important} ::: {.title} Important :::\nYou might see no change of the LEDs before you change a COM frequency :::\nSummary  if you \"sync\" with your cockpit, you can use TX1 or TX2 as set in your COM unit However, especially with XPlane vendors use all kinds of different concepts for the datarefs, so it can happen this does not work properly with some planes, you have to try. without sync. you can manually change TX1/RX1/TX1/RX2 , this is for scenarios where cockpit sync does not work for you Currently we do not permit transmitting at 2 channels at once, this is precautionary. So with a) you can select TX1 or TX2 (if the datarefs are correct)  ","excerpt":" You can enable COM unit synchronization (between simulator and swift) …","ref":"/docs/manual/spc/flightwithswift/integratecomunit/","title":"Integrate COM unit, sync with cockpit COM unit"},{"body":"Although the other client supports \"parts\", if does NOT send gear down, only \"on ground\".\nHere with manually overridden \"GEAR DOWN\" fron internals page (tracingparts{.interpreted-text role=\"ref”} ).\nA client sending gnd on/off causing an oscillating up/down aircraft\n","excerpt":"Although the other client supports \"parts\", if does NOT send gear …","ref":"/docs/manual/swiftgeneral/interpolationexamples/","title":"Interpolation examples (wrong parts etc.)"},{"body":"The interpolation log. display allows to trace interpolation, checking elevations, inbound parts and situations. It is most likely the easiest was to trace interpolations. See also interpolationexamples{.interpreted-text role=\"ref”} .\nInterpolation log. files are here: findlogfiles{.interpreted-text role=\"ref”} -\u003e Interpolation log. files\n Use .drv intdisplay to launch the window   You can start logging by entering a callsign. This is the same as starting logging from interpolation setup or via dot command, only easier.   You can also request the scenery ground elevation from the simulator. On the \"inbound page\" you are seeing the incoming situations and parts from the network   Especially the altitude information and the used elevation is a useful information there The calculate aircraft change states can be checked from the next page   On the \"interpolation page\" you can check the latest interpolation or inject a scenery ground elevation for testing  Examples Other side sending no gnd. flag, no gear .….\nnow the other side updating gear and gnd. and sending some lights\n","excerpt":"The interpolation log. display allows to trace interpolation, checking …","ref":"/docs/manual/swiftgeneral/interpolationdisplay/","title":"Interpolation log. display window"},{"body":"In the interpolation settings the interpolation behaviour for all (global) or specific aircraft (callsign) can be changed.\n select if you want to change the global or specific settings   change the settings as required SAVE the settings  ","excerpt":"In the interpolation settings the interpolation behaviour for all …","ref":"/docs/manual/spc/settings/interpolationsettings/","title":"Interpolation settings"},{"body":"see https://discordapp.com/channels/539048679160676382/695961646992195644/707915838845485187\nEs dürfte jetzt nur ein Protokolltyp übrig sein, der von X-IVAP kommt und mit dem SWIFT nix anfangen kann. Dieser stamm aus der Protokollrevision \"B\" (IVAO)\nBeispiel: MDMDN0104:262396:262396:262396, dieser beinhaltet binär codiert 3 mal die gleichen (hier 262396) in der nachfolgenden Struktur angegeben Parameter.\nunsigned long pp; pp =(unsigned int)strtoul(array[2],(char **)NULL,10); // array[2] steht für den zweiten Parameter thisclient-\u003eparams.gear =(pp\u0026(unsigned)1); thisclient-\u003eparams.landLight =(pp\u0026(unsigned)2)\u003e\u003e1; thisclient-\u003eparams.navLight =(pp\u0026(unsigned)4)\u003e\u003e2; thisclient-\u003eparams.strobeLight =(pp\u0026(unsigned)8)\u003e\u003e3; thisclient-\u003eparams.beaconLight =(pp\u0026(unsigned)16)\u003e\u003e4; thisclient-\u003eparams.taxiLight =(pp\u0026(unsigned)32)\u003e\u003e5; thisclient-\u003eparams.engine1Running =(pp\u0026(unsigned)64)\u003e\u003e6; thisclient-\u003eparams.engine2Running =(pp\u0026(unsigned)128)\u003e\u003e7; thisclient-\u003eparams.engine3Running =(pp\u0026(unsigned)256)\u003e\u003e8; thisclient-\u003eparams.engine4Running =(pp\u0026(unsigned)512)\u003e\u003e9; Da der per broadcast verteilt wird, trifft er auch Clients mit SWIFT. Aus diesen Informationen erzeuge ich aber auch die json-Struktur für SWIFT und sende diese ebenfalls an alle. Ihr könntet also \"-MD\" ignorieren oder wie oben beschrieben auswerten. Negative Auswirkungen auf SWIFT haben die \"-MD\"-Protokolle nicht.\n","excerpt":"see …","ref":"/docs/knowhow/simandinterpolation/ivaoparts/","title":"IVAO parts"},{"body":"Scripted Jenkinsfile DSL (domain-specific language) is based on the [Apache Groovy](http://www.groovy-lang.org/documentation.html) language.\nDocumentation resources:\n [Steps reference](https://build.swift-project.org/job/swift/pipeline-syntax/html) (you need to be logged in to Jenkins) [Global variables](https://build.swift-project.org/job/swift/pipeline-syntax/globals) (you need to be logged in to Jenkins) [Online book](https://jenkins.io/doc/book/pipeline/) (includes more complete [steps reference](https://jenkins.io/doc/pipeline/steps/) including plugins) [Jenkins Java API](https://javadoc.jenkins.io/) can be used in Jenkinsfiles  ","excerpt":"Scripted Jenkinsfile DSL (domain-specific language) is based on the …","ref":"/docs/knowhow/programming/jenkinsfile/","title":"Jenkinsfile"},{"body":"In general, there are three things to consider:\n Don't add any [Ref]{.title-ref} in git comments. libxplanemp is shared by other projects where it would not make sense. Style guide: in swift we indent by 4 spaces, but libxplanemp uses tabs. Comply to avoid huge white space changes and unreadable diffs. Our {icon code} repository is just a read-only monitor of [https://github.com/swift-project/libxplanemp]{.title-ref}. Changes must be pushed here.  ","excerpt":"In general, there are three things to consider:\n Don't add any …","ref":"/docs/knowhow/programming/git/xpmprepo/","title":"libxplanemp repo - commit changes to libxplanemp"},{"body":"Sending log messages Simple generic messages The qDebug, qWarning, and qCritical macros can be used for sending quick and simple messages for development purposes. By default, they are always emitted to the console. They can also be picked up by BlackMisc::CLogHandler, just like the categorized messages can.\nCategorized messages ::: {.todo} See also: CLogMessage doxygen link. :::\nGiving each message a category allows it to be handled more intelligently. Qt provides native support for logging categories. BlackMisc::CLogMessage is a wrapper around QDebug with a slightly different API. The normal use case is based around creating a temporary instance of CLogMessage. When the temporary is destroyed at the end of the full expression, the message is sent, which is similar to how QDebug works.\nThe default category If CLogMessage is used without specifying a category, then the value CLogMessage::defaultMessageCategory() is used (\"swift\").\nThis will send a debug message created by concatenating the streamed values:\nCLogMessage() \u003c\u003c \"the time is\" \u003c\u003c time \u003c\u003c \"and there are\" \u003c\u003c planes.size() \u003c\u003c \"planes in the sky\"; This will send an info message created by substituting the %1, %2,... placeholders for the streamed values: (see QString documentation)\nCLogMessage().info(\"The time is %1 and there are %2 planes in the sky\") \u003c\u003c time \u003c\u003c planes.size(); Similarly these will send a warning or error message:\nCLogMessage().warning(\"%1 is not a valid ICAO code\") \u003c\u003c icao; CLogMessage().error(\"%1 is not a valid ICAO code\") \u003c\u003c icao; Specifying a category An explicit category string can be specified when using CLogMessage.\nThis will send a debug message created by concatenating the streamed values:\nCLogMessage().debug(\"swift.planes.counter.timed\") \u003c\u003c \"the time is\" \u003c\u003c time \u003c\u003c \"and there are\" \u003c\u003c planes.size() \u003c\u003c \"planes in the sky\"; This will send an info message created by substituting the %1, %2,... placeholders for the streamed values:\nCLogMessage().info(\"swift.planes.counter.timed\", \"The time is %1 and there are %2 planes in the sky\") \u003c\u003c time \u003c\u003c planes.size(); Similarly these will send a warning or error message:\nCLogMessage().warning(\"swift.icao.validation\", \"%1 is not a valid ICAO code\") \u003c\u003c icao; CLogMessage().error(\"swift.icao.validation\", \"%1 is not a valid ICAO code\") \u003c\u003c icao; Parameterizing the category Hard-coded category strings are hard to maintain and easy to get wrong. Instead of passing an explicit string, it is possible to pass a pointer to any object of class type, and the category string will be obtained by calling -\u003egetMessageCategory() on that pointer.\nA class which sends log messages should define its own category string method:\nclass CTimedPlaneCounter { public: static QString getMessageCategory() { return \"swift.planes.counter.timed\"; } //... }; Then this will send a debug message created by concatenating the streamed values:\nvoid CTimedPlaneCounter::count() { //... CLogMessage().debug(this) \u003c\u003c \"the time is\" \u003c\u003c time \u003c\u003c \"and there are\" \u003c\u003c planes.size() \u003c\u003c \"planes in the sky\"; } This will send an info message created by substituting the %1, %2,... placeholders for the streamed values:\nvoid CTimedPlaneCounter::count() { //... CLogMessage().info(this, \"The time is %1 and there are %2 planes in the sky\") \u003c\u003c time \u003c\u003c planes.size(); } Similarly these will send a warning or error message:\nvoid CIcaoValidator::validate() { //... CLogMessage().warning(this, \"%1 is not a valid ICAO code\") \u003c\u003c icao; CLogMessage().error(this, \"%1 is not a valid ICAO code\") \u003c\u003c icao; } Directly returning log messages CLogMessage is implicitly convertible to CStatusMessage. This means that a CLogMessage expression can appear in a return statement of a method which returns CStatusMessage, so the caller of the method can have direct, synchronous access to the message which was the result of the method:\nCStatusMessage CFoo::doSomething() { //... return CLogMessage() \u003c\u003c \"something went wrong\"; } The message is still emitted and can still be handled by CLogHandler as normal. See \"Implementation challenges\" below for information on avoiding double handling of such messages.\nReceiving log messages Signals for all messages ::: {.todo} See also: CStatusMessage doxygen link. :::\nCLogHandler is a class for subscribing to log messages in different categories. The singleton pointer is obtained from CLogHandler::instance().\n::: {.warning} ::: {.title} Warning :::\nCLogHandler can not be used in plugins, because of the singleton pattern. :::\nThe application's main function should call CLogHandler::instance()-\u003einstall() to tell the handler to install itself as the Qt message handler using qInstallMessageHandler.\nCLogHandler has two signals which can be connected to: localMessageLogged which is emitted when a message is logged in this process, and remoteMessageLogged which is emitted when a message is relayed from a different process via DBus.\nSignals for specific message categories ::: {.todo} See also: CStatusMessage doxygen link. :::\nCLogHandler has a method handlerForCategory which takes a QString prefix and returns a pointer to a CLogCategoryHandler which associates itself with all messages whose category strings start with the given prefix.\nCLogCategoryHandler has one signal which can be connected to: messageLogged which is emitted whenever a message is logged whose category string starts with the associated prefix.\nConsole output By default, all log messages are forwarded to the Qt default message handler which prints them to the console. CLogHandler has a method enableConsoleOutput(bool) for disabling this behaviour. CLogCategoryHandler also has a method enableConsoleOutput(bool) for enabling or disabling this behaviour at the category level.\nRelaying over DBus The application context is responsible for relaying the log messages between the CLogHandler instances of different processes.\nSubscribing You can create a CLogPattern to match various kinds of messages, and then pass the CLogPattern to CLogHandler to obtain a handler whose messageLogged signal will be emitted when a message matching your CLogPattern is logged.\nA CLogPattern can match messages by severity, category, combinations of categories and severities, category prefixes, suffixes and substrings.\nUsage examples\n// a pattern which matches all warnings auto pattern = CLogPattern().withSeverity(CStatusMessage::SeverityWarning); // subscribe to all warnings auto *handler = CLogHandler::instance()-\u003ehandlerForPattern(CLogPattern().withSeverity(CStatusMessage::SeverityWarning)); connect(handler, \u0026CLogPatternHandler::messageLogged, this, \u0026CFoo::mySlot); // subscribe to all errors auto *handler = CLogHandler::instance()-\u003ehandlerForPattern(CLogPattern().withSeverity(CStatusMessage::SeverityError)); connect(handler, \u0026CLogPatternHandler::messageLogged, this, \u0026CFoo::mySlot); // subscribe to all warnings and errors auto *handler = CLogHandler::instance()-\u003ehandlerForPattern(CLogPattern().withSeverityAtOrAbove(CStatusMessage::SeverityWarning)); connect(handler, \u0026CLogPatternHandler::messageLogged, this, \u0026CFoo::mySlot); // subscribe to all validation warnings and validation errors auto *handler = CLogHandler::instance()-\u003ehandlerForPattern(CLogPattern::exactMatch(CLogCategory::validation()).withSeverityAtOrAbove(CStatusMessage::SeverityWarning)); connect(handler, \u0026CLogPatternHandler::messageLogged, this, \u0026CFoo::mySlot); // convenience to get the handler and connect the signal in the same step CLogHandler::instance()-\u003ehandlerForPattern(CLogPattern::exactMatch(CLogCategory::validation()).withSeverityAtOrAbove(CStatusMessage::SeverityWarning))-\u003esubscribe(this, \u0026CFoo::mySlot); // convenience for validation messages CLogHandler::instance()-\u003ehandlerForValidation()-\u003esubscribe(this, \u0026CFoo::mySlot); CLogPattern uses QSet internally, which made it difficult to use the meta tuple. I had to implement some of the CValueObject methods by hand. I didn't bother trying to find a clever workaround as I'm going to be refactoring CValueObject soon anyway.\nThe topologicalSort and isProperSubsetOf stuff allows CLogPattern to be sorted by generality, so more specific patterns come first. For example, CLogPattern::startsWith(\"foo\") is more general than CLogPattern::startsWith(\"foobar\") because the latter matches a proper subset of the messages which the former matches. This is not compatible with the standard sorting algorithms, because in the case of CLogPattern::startsWith(\"foo\") and CLogPattern::startsWith(\"bar\") neither one is a subset of the other, so it is unspecified which should come first. This functionality is used by the mechanism for selectively enabling console output. If console output is enabled for messages matching CLogPattern::startsWith(\"foo\") but disabled for messages matching CLogPattern::startsWith(\"bar\") then the setting for the more specific pattern will win.\nImplementation challenges Qt only supports three standard message severities: QtDebugMsg, QtWarningMsg, and QtCriticalMsg. It is necessary to map these to our four message severities: Debug, Info, Warning, and Error.\nCLogMessage is implicitly convertible to CStatusMessage for directly returning from the method which generated it (see \"Directly returning log messages\" above). In order to avoid double handling of such messages, we need a way to mark messages as having been already potentially handled by direct return value.\nThe solution to both of the above two problems is category suffix codes. When the message is being passed through Qt's message logging framework, we add suffixes to the category string to mark these flags. When handling the message, the suffixes are removed, so the user of CLogMessage and CLogHandler are not aware of them.\nThe isRedundant method of CStatusMessage can be used in a slot connected to one of the CLogHandler or CLogCategoryHandler signals, to detect if the message was already potentially handled by a direct return value from the method which generated it.\n","excerpt":"Sending log messages Simple generic messages The qDebug, qWarning, and …","ref":"/docs/dev/logging/","title":"Logging"},{"body":"You can keep and save multiple model sets. The idea is that you can create specialized model sets for events, or just tryout a new set.\nThe model set can be saved from the context menu.\nThe model set can be loaded from the context menu or the \"load button\" beneath the model set view\n","excerpt":"You can keep and save multiple model sets. The idea is that you can …","ref":"/docs/manual/smt/maintainmultiplemodelsets/","title":"Maintain multiple model sets"},{"body":"You can manually change a model.\n select the model you want to change   select the new (target) model string   SAVE the new model If you want to alter back, you can use RESET (which will run through the matching process again)  ::: {.important} ::: {.title} Important :::\nThis changes the model for this session, it does NOT save the change or permanently change it. :::\n","excerpt":"You can manually change a model.\n select the model you want to change …","ref":"/docs/manual/spc/flightwithswift/manualchangemodel/","title":"Manually change model (\\\"by hand\\\")"},{"body":"swift database roles\n+——–+————————————————————-+ | role | meaning | +========+=============================================================+ | - | normal user without role. Such user only see self | | | adminstration in the web UI | +——–+————————————————————-+ | alpha | can access alpha program downloads | +——–+————————————————————-+ | bulk | can directly add model mappings, but not change. In order | | add | to directly edit bulk role is required | +——–+————————————————————-+ | bulk | can perform direct uploads from swift mapping tool | +——–+————————————————————-+ | m | can create new liveries, aircraft ICAOs, airline ICAOs | | apping | | | admin | | +——–+————————————————————-+\nWhen you login in the mapping tool, you will see your roles here:\n","excerpt":"swift database roles\n+——–+————————————————————-+ | role | meaning | …","ref":"/docs/manual/swiftgeneral/mapping/dbroles/","title":"Mapping DB roles"},{"body":"::: {.important} ::: {.title} Important :::\n\"Standard models\" means the aircraft delivered with a standard FS9, FSX or P3D installation :::\n  Distributor: Some models come with multiple installations, set the distributor of the earliest installation\n  For models coming with FS9 and something else, use FS9 For models coming with FSX and P3D, set FSX     Set the model flags according to the supported simulators\n  ","excerpt":"::: {.important} ::: {.title} Important :::\n\"Standard models\" means …","ref":"/docs/manual/swiftgeneral/mapping/mapfsstandardmodels/","title":"Mapping FS9 FSX and P3D standard models"},{"body":"Hints: ::: {.important} ::: {.title} Important :::\nAlways save your stashing data (then you recover it in case of a crash) :::\n  Always check if the aircraft already has a mapping (DB icon)\n  If you see an existing mapping, which is wrong, we appreciate very much if you fix it. Otherwise, create mappings for non existing aircraft entries. see here, entries with and without icon     New ICAO codes: cr{.interpreted-text role=\"ref”}\n  effmappings{.interpreted-text role=\"ref”}\n  Which mappings do we need?   We cannot tell you exactly what mappings to create, as we do not know which models you have installed\n  However, it is always good to create mappings for payware aircraft (as we definitely can not buy all those).\n  All Libraries we would like to have in the DB\n  VATSIM FLAI World of AI: http://www.world-of-ai.com/ FAIB: http://fsxaibureau.com/ Juergen Baumbusch: http://www.juergenbaumbusch.de Flying carpet: http://www.flyingcarpet75.com     Q\u0026A:   Should I use the P3D for P3D v1-3 or also for v4? We are currently evaluating P3D v4, for now use it for all P3D versions.\n  I have the same model installed, but from another distributor, what should I do? This can happen, many models are part of multiple distributions. Normally there is not need to update the distributor.\n  I have a model, but the distributor is missing? Request the distributor, you can already do the mapping and save your stash. Later you can fix the distributor. Or you can use ZZZZ, publish and later change/fix the distributor\n  How can I efficiently create mappings?\n  If you place random models on the stash, it will be more work. Try to assign multiple attributes at once, e.g. select all aircraft of an airline and assign those at once You can filter your aircraft and stash the filtered only (example: Filter by aircraft, push result to stash, assign aircraft ICAO in one step)     How do we set the distributor for FS, FSX, P3D standard models? See mapfsstandardmodels{.interpreted-text role=\"ref”}\n  What are excluded models? See excludedmodels{.interpreted-text role=\"ref”}\n  XPlane\n  Why are some models excluded ([CSL]{.title-ref} vs [.acf]{.title-ref} models)? See xplanemapping{.interpreted-text role=\"ref”} and excludedmodels{.interpreted-text role=\"ref”} Do we need mappings for [ACF]{.title-ref} models? Yes, see excludedmodels{.interpreted-text role=\"ref”}     Problems? see problemsmapping{.interpreted-text role=\"ref”}\n","excerpt":"Hints: ::: {.important} ::: {.title} Important :::\nAlways save your …","ref":"/docs/manual/swiftgeneral/mapping/maphints/","title":"Mapping hints and FAQs"},{"body":"Mapping tool tabs:\n Mapping editor, see below Database data, all data from the mapping database data Settings and login, credentials and setup of mapping tool Logging, log. messages  1 - Mapping editor tabs\n  \"Model set\", here you define your model set, those are the models used for model matching, see also mm{.interpreted-text role=\"ref”} .\n  \"Own models\", these are the models available for your simulator. The models here correspond with the settings \"model directories\" (see below)\n  \"Workbench\", here you can load temporary data and use them for further actions. This tab allow to load data without affecting your data of \"own models\", \"own model set\".\n  Example: An other user can save some models from \"his model set/his models\", you can load and stash them from here. Removed models: swift pilot client allows to save models which cannot be rendered (this corresponds with \"remove from set\", see below). This allows to later investigate them and remove them from the model set, if required. If such \"removal lists\" are saved, you will see them in the directory browser.     \"Stashed models\", here you modify and prepare mappings for the database, and eventually upload them to the database.\n  \"Model matcher\" allows you to test you model set, so you can provide various data as they would be received from the FSD protocol and test what model would be selected.\n  Mapping tab related functions and settings\nThose settings decide which models you use and how the models are used with matching.\n Model directory settings:   Matching settings:  2 - Database tab\nDisplays all database data, and allows to reload DB data. See reloaddbdata{.interpreted-text role=\"ref”} .\n::: {.toctree glob=”” caption=\"Content in this chapter”} ./* :::\n","excerpt":"Mapping tool tabs:\n Mapping editor, see below Database data, all data …","ref":"/docs/manual/smt/mttabs/","title":"Mapping tool tabs"},{"body":"Own stored models If you run your simulator (XPlane, P3D, ...) you will install aircraft models to display other pilots. In XPlane those are the BlueBell or XCSL models, in P3D/FSX the FLAI or WoAI models for instance.\nThose models we call \"stored own models\", and they are located on your hard drive. Such a directory structure may look like here (FSX/XPlane examples):\nNow swift wants to create a list of your installed models (to know where and what they are). Normally we search the default directories, but you can also specify the directories in the settings.\nIn the same step we will use the mapping data (explained below, metadata from the DB) to further annotate your models (i.e. provide more details). This list may look like here in the mapping tool. The ones with the DB icon are those having a mapping in the DB, the other ones do not.\nSo in a nutshell:\n the \"own models\" are those you have installed plus the database data if available. if you move your installed models, you need to redo this step.  The model set Now you need to tell swift which of the own models you want to use for model matching (explained below). You simply pick those from \"own models\" and move them into the model set.\nThose models you see here are the ones use for model matching. This explains why your model set needs to be updated when you move your model directories, see createms{.interpreted-text role=\"ref”} . Also modelset{.interpreted-text role=\"ref”} .\nMatching Matching is the process of finding the most suitable aircraft model of your simulator to represent the other parties aircraft. Hint: If everyone would have the same simulator with the same models installed, matching was not needed.\nMapping Mapping is the process of assigning metadata to a simulator model (i.e. a model used for air traffic in your simulator). It describes the model in a way it can be used for model matching.\nWhy do we need such metadata (and not just use the data from the aircraft files)?\n the data in the model files are a) often wrong, b) unstructured (different attributes used) or c) missing. This is at least true for P3D/FSX models not all attributes (e.g. colors) are covered, and we can not extend those metadata for future features different simulators (i.e. XPlane, P3D, .…) use different concepts, namings, etc., so we need to unify there is no existing concept to structure liveries and maintenace is a nightmare. If an airline changes its name, ICAO code or such, we have to modify simulator files.  Mapping is \"objective\" and describes the model as what it is, never ever change the description to just change what you want to see in your simulator. A \"DLH A320\" is a \"DLH A320\" and not a \"BAW A320\". So do not change mapping data just to see that very plane in a scenario where another pilot flies a \"BAW A320\".\nEntities (of a mapping)   Aircraft ICAO: Each simulator model has an aircraft ICAO code assigned. An aircraft ICAO is not unique (means there are usually multiple similar codes). Always use the most appropriate one (normally decided by manufacturer).\n  Distributor: The package or software vendor the model belongs to. Mostly needed for filtering and sorting, but also use for personal preferences (i.e. the model of higher preference will be used first)\n  Livery: Describes how the model looks like. There are two types of liveries:\n  Airline liveries: The livery belongs to an airline (identified by an airline ICAO code). There are 1..n airline liveries per airline. So it is important to understand an airline can more than one livery. Color livery: Not all aircraft belong to an airline. Smaller aircraft such as [C172]{.title-ref} will be described by it primary (normally fuselage) and secondary color (normally tail). There is a set of predefined color liveries and the closest combination is to be used.     Role of airline ICAO codes: #. Mainly used to identify or search the airline livery #. swift distinguishes between real an virtual airlines (VA). We use pseudo codes for virtual airlines (e.g. VDLH for virtual Lufthansa) #. Important: Airline ICAO codes are not unique, there can be ambiguous codes.\nSee also: maphints{.interpreted-text role=\"ref”} and reverselookup{.interpreted-text role=\"ref”} .\n","excerpt":"Own stored models If you run your simulator (XPlane, P3D, ...) you …","ref":"/docs/manual/swiftgeneral/mm/","title":"Mapping, matching and model set explained (theory and concepts)"},{"body":"Enable matching logs ::: {.important} ::: {.title} Important :::\nYou need to enable the matching messages before you login to the network :::\nYou can enable matching logs before you login on the login page (matching log tab) or on the model matching log tab age. Both ways are shown below. In recent *swift* version a simplified log is enabled as per default.\nUsing matching logs Then you can obtain a detailed information about the mapping steps per callsign. In case you need to report a bug please paste the matching messages.\nHint: The matching result also depends on the settings: matchingsettings{.interpreted-text role=\"ref”}\nIf you need a quick overview you can use the model view to see how the aircraft and livery a mapped.\nUploading a matching log If you want to discuss results on our Discord channel, copy the matching log in a file and upload it for further analysis. Make sure you copy the whole matching log. Upload as file.\n","excerpt":"Enable matching logs ::: {.important} ::: {.title} Important :::\nYou …","ref":"/docs/manual/swiftgeneral/matching/matchmsg/","title":"Matching log/messages (which model is displayed?)"},{"body":"::: {.important} ::: {.title} Important :::\nMatching script is an advanced topic, which means you write your own logic for matching in JavaScript. This code is your own responsibility, we cannot help you debugging and fixing it. :::\nThere are many cases where users want to apply their own model matching logic. Many cases can be configured in the settings, see matchingsettings{.interpreted-text role=\"ref”} . Matching script allow to write your own matching logic beyond the scope of the settings.\n=== How matching works in swift ===\n When we received aircraft data from the network (we receive aircraft ICAO and airline strings, the callsign, maybe the model string or livery) we try to turn these data into swift database ICAO data. By that we validate the network data, unify them and turn them into our objects. This is what we call reverse lookup. Then we use these unified data and try to find the best match in your model set, see mm{.interpreted-text role=\"ref”} . This is what we call model matching.  swift exposes some of its APIs to matching script:\n A wrapper for the swift database web services A wrapper for the model set (of the user) In/Out objects for the network data and the matching state  Matching script You can modify the results of both steps in swift matching script. There are 2 independent scripts for that as you can see, so you can use the stage most suitable for your needs.\nThe results of a matching script may vary depending on\n your model set your matching settings  Testing matching script A good way to test matching script is in the mapping tool, you can enable and change your script there and see the output.\nTechnical details techdetails{.interpreted-text role=\"ref”}\nSome general information about using matching script  with matching script you can define your individual matching logic, but the code for that is your responsibility (you maintain it, you debug it) Matching script is meant for smaller adjustments, not re-writing the whole matching logic! You need to know JavaScript to write matching script, but you need to be no JavaScript expert. Place your matching script files outside the //swift //folders so they are not overridden/deleted when you install/uninstall swift. Use your favorite text editor to write your own matching script (JavaScript) code. You matching script might be specific for your model set, i.e. if you change your model set or give the code to others it might not work as intended.  ","excerpt":"::: {.important} ::: {.title} Important :::\nMatching script is an …","ref":"/docs/manual/swiftgeneral/matching/ms/","title":"Matching script"},{"body":"This document covers some technical details for matching script programmers\nMatching script interacting with swift There are classes, which may be used as objects in Matching script (i.e. JavaScript). Those classes start with a MS`prefix (matching script). Those classes can be found in :code:`BlackMisc::Simulation and BlackCore. You can find the latest documentation here: Doxygen build\n MSInOutValues MSModelSet MSWebServices  Best to check the latest Doxygen build for these classes as there may be various changes for each version.\nUsing properties MS class properties as below\n//! MSNetworkValues properties @{ Q_PROPERTY(QString callsign READ getCallsign WRITE setCallsign NOTIFY callsignChanged) Q_PROPERTY(QString callsignAsSet READ getCallsignAsSet) Q_PROPERTY(QString flightNumber READ getFlightNumber) Q_PROPERTY(int dbAircraftIcaoId READ getDbAircraftIcaoId WRITE setDbAircraftIcaoId NOTIFY can be used in matching script as follows\noutObject.aircraftIcao = \"C172\"; outObject.modified = true; // tell we changed something Some properties are read only, and you can see the type from property definition.\nUsing functions Functions of MS classes can be used if they are marked as Q_INVOKABLE (only those you can invoke from matching script).\n//! Functions calling the web services @{ Q_INVOKABLE int countAircraftIcaoCodesForDesignator(const QString \u0026designator) const; Q_INVOKABLE int countAirlineIcaoCodesForDesignator(const QString \u0026designator) const; //! @} or\n//! Model string of model with closest color distance Q_INVOKABLE QString findCombinedTypeWithClosestColorLivery(const QString \u0026combinedType, const QString \u0026rgbColor) const; Those you can call those as functions in matching script\nvar mscl = modelSet.findCombinedTypeWithClosestColorLivery(combinedType, white);\nExamples Check out the [matchingscript]{.title-ref} directory for examples, like \\swift-0.9.2-64bit\\share\\matchingscript.\n","excerpt":"This document covers some technical details for matching script …","ref":"/docs/manual/swiftgeneral/matching/techdetails/","title":"Matching script technical details and matching script examples"},{"body":"Back to settings{.interpreted-text role=\"ref”} .\nMatching settings In the matching settings you can configure how matching works/your preferences. If you want to test your settings you can use the model matcher, see mapping tool testmodelset{.interpreted-text role=\"ref”} .\nReset matching script Reset your settings (reset all) and save your settings.\nMatching script Matching script allows to apply your own matching logic, see ms{.interpreted-text role=\"ref”}\nUsing models without DB entry Using models without DB entries (i.e. without mappings) is not the recommend way. You can create mapping like described here: createmappings{.interpreted-text role=\"ref”} .\nHowever, if you want to use models without mappings:\n allow those to be used in the model set, so enable it in the mapping tool. This allows those models to be added in the model set   add the models you want to use in the model set and in the pilot client enable those models to be considered in the matching  ","excerpt":"Back to settings{.interpreted-text role=\"ref”} .\nMatching settings In …","ref":"/docs/manual/spc/settings/matchingsettings/","title":"Matching settings, using models without mapping entry / no DB entry"},{"body":"Fundamentals   mm{.interpreted-text role=\"ref”} , understand the fundamentals\n  Matching depends on the settings: matchingsettings{.interpreted-text role=\"ref”}\n  Without model set model matching is not possible. So check that you have created a model set:\n  Model set in spc{.interpreted-text role=\"ref”}   Model set in smt{.interpreted-text role=\"ref”}     Analyze your models and matching   Use the matching messages to understand how a particular aircraft is matched. See matchmsg{.interpreted-text role=\"ref”}\n    You can also see some mapping details in the models view. You can see how the ICAO code of the aircraft is mapped or how the livery is mapped from -\u003e to or [=] (same code).\n   In the statistics view you can check if you have a model for a particular ICAO code combination installed    In the mapping tool you can check the coverage of your model set:\n  Create matrix   Example matrix     ","excerpt":"Fundamentals   mm{.interpreted-text role=\"ref”} , understand the …","ref":"/docs/manual/swiftgeneral/matching/matchinghints/","title":"Matching tips (or why model matching fails)"},{"body":"See * aircraftrange{.interpreted-text role=\"ref”} * configuresim{.interpreted-text role=\"ref”}\n","excerpt":"See * aircraftrange{.interpreted-text role=\"ref”} * …","ref":"/docs/manual/spc/settings/maxaircraft/","title":"Max. aircraft to be shown or max. distance of aircraft to be shown"},{"body":" TODO This document is outdated and needs to be updated to reflect recent evolution of the design.  Abstract We use a system based around std::tuple to attach declarative metadata to the data members of value classes. The intention is to minimize the number of places where the data members must be listed. Without this system, each class would need separate lists of its data members for operator\u003c, operator==, stringification, streaming to DBus, streaming to JSON, etc. The tuple system maintains one list of members for each class, with optional metadata, and the methods can refer back to this one list.\nUsage TODO Link to Doxygen  In order for a class or class template to use the tuple system, it must include the BLACK_ENABLE_TUPLE_CONVERSION macro somewhere in its private: section. The macro expects one argument: the name of the class or class template.\nThe list of data members is placed in the same header file, outside of any namespace, using the BLACK_DECLARE_TUPLE_CONVERSION macro. The macro expects two arguments: first, the fully qualified name of the class or class template; second, a parenthesized, comma-separated list of expressions, each one identifying a different data member. The expected syntax of these expressions is described below, under \"Attribute Expressions\".\nTo refer back to this list in a function implementation, call TupleConverter\u003cT\u003e::toMetaTuple(*this), where T is the name of the class or class template. This returns a std::tuple of reference wrappers of the data members of *this, which can be operated on by various free functions; standard C++ already provides overloaded comparison operators for std::tuple which perform lexicographical comparisons of the elements, and blackmisc/tuple.h defines several more, for streaming std::tuple element-by-element to DBus, JSON, etc.\nOnly member functions of T may call TupleConverter\u003cT\u003e::toMetaTuple, otherwise this would break encapsulation.\nAttribute Expressions Each item in the parenthesized, comma-separated list of data members is a C++ expression following a certain format. The permitted format is composed of the functions and types defined in TupleConverterBase.\nIn the expression, o is the object of type T which was passed as the argument to toMetaTuple. The simplest possible attribute expression is just o.m_foo, where m_foo is the name of a data member of T. This expression will result in the data member being entered into the list of tuple elements with default metadata attached.\nMetadata can be added to an element through the attr function. attr(o.m_foo) is identical to o.m_foo; metadata is added by passing additional arguments to the attr function.\nMetadata These are the kinds of metadata which can be attached to the tuple elements:\n Flags  Flags are used to conditionally eliminate particular members from participating in certain operations. For example, the flag DisabledForDBus will cause the member to be ignored when streaming to DBus. The default flags is zero, meaning that a member with default metadata will participate in all operations using toMetaTuple.   JSON name  Every member has an associated name which is used when serializing to/from JSON. The default is the name of the member with the m_ prefix removed.    Example BLACK_DECLARE_TUPLE_CONVERSION(BlackMisc::CFoo, ( o.m_apple, // default metadata  attr(o.m_orange, \"lemon\"), // with explicit JSON name  attr(o.m_banana, flags\u003cDisabledForHashing\u003e()) // with a flag )) In this example, m_apple has default metadata, m_orange has a JSON name of lemon, and m_banana will not participate in hashing.\nCompatibility with previous versions The following functions are provided for API compatibility with an earlier version of the tuple system:\n TupleConverter\u003cT\u003e::toTuple  This works like toMetaTuple, but it ignores all metadata.   TupleConverter\u003cT\u003e::jsonMembers  This returns a QStringList of the JSON names of all the members. This is no longer necessary when using toMetaTuple.    ","excerpt":" TODO This document is outdated and needs to be updated to reflect …","ref":"/docs/dev/metaclass/","title":"Meta classes"},{"body":" swift has no hot plug and play yet, the microphone needs to be plugged in/on before starting swift In newer Windows versions you need to allow swift to use your microphone   Then you will see will see swift enabled to use the Microphone  ","excerpt":" swift has no hot plug and play yet, the microphone needs to be …","ref":"/docs/manual/swiftgeneral/nomiconwindows/","title":"Microphone not working on Windows"},{"body":"When does it happen?  swift receives aircraft information over the network then it tries to find the most suitable model in the model set. This is called model matching. You can check model matching, see matchmsg{.interpreted-text role=\"ref”} . next swift sends the found model to the simulator. Here something goes wrong and the model is not rendered, You can enable model set validation to check the set each time swift starts, see modelsetvalidation{.interpreted-text role=\"ref”} .  What is the problem?   All aircraft are not rendered. Something is entirely wrong.\n  Have you moved your models (folder)? If so, reload the models and re-create the model set, see createms{.interpreted-text role=\"ref”} . For XP11, are your models located in the XPlane folder? did model validation pop-up? Then swift already tells you your model set is broken. You can run the validator in the mapping tool or the swift pilot client, see modelsetvalidation{.interpreted-text role=\"ref”} . check the paths of your model set, make sure this path represents where your models are, it looks like here     Some aircraft are not rendered (very few)\n  Do you have models in the set which no longer exist? Another possible reasons: A single model is broken, you could remove that ne from the model set. Have you disabled rendering from the model page?     General reasons why a model fails to be rendered   X-Plane's new Vulkan graphics engine is not supported yet\n  An aircraft is intentionally disabled. If you did dot disable it on purpose, see below.\n  Check the log page to see if there are errors\n  Have you restricted range/number of aircraft? See aircraftrange{.interpreted-text role=\"ref”} for details\n  Have you models in your (model) set for which no liveries/installed models exist?\n  See modelsetvalidation{.interpreted-text role=\"ref”} . Model set rules, see createms{.interpreted-text role=\"ref”}     XPlane specific  Make sure NO OTHER pilot client plugin is present XPlane models in model set, but not rendered. Solution: CSL files need to be inside the XPlane folder. Example of a working folder structure:   If you have installed the vertical offsets, make sure you did not end up with a cascaded folder structure. Make sure you only have one xsb_aircraft.txt per folder. ..  image:: http://img.swift-project.org/xpdirstructure.png\n Technical reason: X-Plane plugin SDK: XPLMLoadObject The path for the object must be relative to the X-System base folder. https://developer.x-plane.com/sdk/XPLMScenery/#XPLMLoadObject Static libraries like Fruit Stand do not work with swift The Fruit Stand is not a CSL package, they are static scenery models, so that won't work with a pilot client like swift.  FSX/P3D specific   The aircraft model is broken. You can test that by\n  modelsetvalidation{.interpreted-text role=\"ref”} assigning that same model to another callsign, if this fails it is likely to be broken crosscheck by manually assigning another aircraft to the originally failing one, That should work now. Possible solution: Manually assign a different model and remove the broken model from the model set.     fsxaimodel{.interpreted-text role=\"ref”}\n  The other side sends a position with a considerable negative offset (below ground)\n  You see a model failing that normally works You can try to enable the selected aircraft or use re-enable     You can find models removed by swift (because they cannot be rendered) in the mapping tool workbench\n  See mttabs{.interpreted-text role=\"ref”} under workbench Show removed models in workbench     Check the driver version for P3D (in swift' s simulator settings)\n  Is the simulator running as ADMINISTRATOR, but swift not? Or vice versa.\n  Re-Enable You can try to re-enable un-rendered aircraft and see if the issue is gone.\n","excerpt":"When does it happen?  swift receives aircraft information over the …","ref":"/docs/manual/swiftgeneral/notrendered/","title":"Model / aircraft not rendered (possible reasons and solutions)"},{"body":"You can view models directly with MCX. MCX is an external tool, see here. It is not part of swift and you have to install it on your own. We will not be able to provide support for the tool!\n::: {.warning} ::: {.title} Warning :::\nSometimes liveries will not be shown correctly (no idea why) :::\nIn order to enable MCX set its binary (i.e. exe) in the settings, then you can call it from the context menu. We have tested with the latest dev. version of MCX.\n","excerpt":"You can view models directly with MCX. MCX is an external tool, see …","ref":"/docs/manual/smt/mcx/","title":"Model Converter X (P3D/FSX family)"},{"body":"mm{.interpreted-text role=\"ref”}\n::: {.toctree caption=\"Content in this chapter” glob=”\"} ./* :::\n","excerpt":"mm{.interpreted-text role=\"ref”}\n::: {.toctree caption=\"Content in …","ref":"/docs/manual/swiftgeneral/mapping/","title":"Model mapping"},{"body":"::: {.toctree caption=\"Content in this chapter”} matchmsg ms techdetails matchinghints matchreport reverselookup tracingmatching whyb74f matchingresult :::\n","excerpt":"::: {.toctree caption=\"Content in this chapter”} matchmsg ms …","ref":"/docs/manual/swiftgeneral/matching/","title":"Model matching"},{"body":"If you are unhappy with a matching result it is possible to investigate what is going on. But please understand that model matching depends on many factors\n your model set, see createms{.interpreted-text role=\"ref”} the login data of the other party your model matching settings, seer settings{.interpreted-text role=\"ref”}  So we have seen many cases where fantasy ICAO codes are used, or user login under mismatching credentials (like using DLH123`as callsign, but login as :code:`BAW)\nTo investigate of what is going on we need a matching log. swift can show en detail what happens during matching we need a matching log: matchmsg{.interpreted-text role=\"ref”}\nOnly this will tell us what has happend. Discussions without a log are NOT productive.\nSome hints:\n If you are just unhappy with a matching during a flight just change it manually, see manualchangemodel{.interpreted-text role=\"ref”} You can add more models to your set to cover more cases. But just adding models is pointless, you have to add models missing. Use the statistics to see your coverage. Validate your model set to see if there are issues, see modelsetvalidation{.interpreted-text role=\"ref”} and modelsetvalidationexample{.interpreted-text role=\"ref”}  ","excerpt":"If you are unhappy with a matching result it is possible to …","ref":"/docs/manual/swiftgeneral/matching/matchreport/","title":"Model matching - reporting issues"},{"body":"If you have installed new models there is no need to re-create your model set. In case you want to completely re-create your set you can find that here: createms{.interpreted-text role=\"ref”}\nThere are 2 steps involved:\n  update your stored models, in most cases it is the easiest way just to force a reload\n  In the mapping tool, go to the \"Own models\" tab.   If you need to reload your models you can use the [FORCE RELOAD]{.title-ref} context menu.     then you find the new models ad add them to the model set\n  you can sort by column to find the latest models   or you filter if you know what you are looking for   You can add the models by {key ALT+A}     Do NOT forget to save your model set\n  ","excerpt":"If you have installed new models there is no need to re-create your …","ref":"/docs/manual/swiftgeneral/modelsandmodelset/addtoms/","title":"Model set - add new models"},{"body":"Which models to use? This is up to you, but maybe some hints:\n  For XPlane:\n  BlueBell is a good option, see examplemsbbxcsl{.interpreted-text role=\"ref”} You can mix BlueBell with XCSL, use it alone, use BlueBell alone etc.     For VATSIM and FSX/P3D FLAI is a good choice\n  For instance start with FLAI and the standard FSX/P3D models     For Flightgear:\n  Models within \"FGDATA/AI/Aircraft\" can be used.     Some general tips:\n Do not simply add a huge bunch of models to your set, choose wisely Add the default simulator models (if applicable) as models so they can be used if no other model is found Start with one additional model library on top of that Gradually add for specialized models as needed.  Installed models vs. model set If you do not understand the difference (i.e. what a model set is), see mm{.interpreted-text role=\"ref”} .\nCreating a model set or recreate model set ::: {.warning} ::: {.title} Warning :::\nIt is the users responsibility to check if he is entitled to use the models in the set for online flights with a particular network. swift is an open source client for multiple networks, but this does not mean you are allowed to use it with all the networks. :::\n In the mapping tool, go to the \"Own models\" tab. The models here depend on your model directories, see modelsetandsettings{.interpreted-text role=\"ref”}   If you need to reload your models you can use the [FORCE RELOAD]{.title-ref} context menu.   You can add to your model set via the context menu.   If you want to clear/re-create your model set: go to the model set where can delete your models by CTRL+A then DEL (as one of many possibilities). If possible, only use models with DB mapping (see DB icon) You can filter the models, and then add all filtered models   Excluded models are normally not used with a model set, see excludedmodels{.interpreted-text role=\"ref”} . As you can see here, the excluded model is ignore when adding to the model set:    Advanced topics:\n  modelsetduplicates{.interpreted-text role=\"ref”} rankmodelset{.interpreted-text role=\"ref”}     Do not forget to save your model set\n: - You can have as many sets as you like - Each set needs to be saved - Each simulator has its own set\n  Model set rules  Do not add models to a set which do not work or really exist If you install new models you need to update your model set and add the new models you want to use If you uninstall a model you need to remove it from the set, see modelsetvalidation{.interpreted-text role=\"ref”} If you move your models around (i.e. change the model folder) you need to recreate the set to provide the new location.  Check the model set in the client You can load the model set in the client to see if you have model set. If this view is empty AFTER you have pressed \"LOAD MODEL SET\" then something is wrong. Especially if you are using the distributed swift version (i.e. core and distributed GUI) this is a good check.\nYou can also validate from there: modelsetvalidation{.interpreted-text role=\"ref”} .\nExamples and tutorials  See also smttutorials{.interpreted-text role=\"ref”} examplemsbbxcsl{.interpreted-text role=\"ref”}  Sorting and cleaning a model set  rankmodelset{.interpreted-text role=\"ref”} and modelsetduplicates{.interpreted-text role=\"ref”} modelsetvalidation{.interpreted-text role=\"ref”}  Keep you data up to data See consolidation{.interpreted-text role=\"ref”}\nMultiple model sets\nSee maintainmultiplemodelsets{.interpreted-text role=\"ref”}\n","excerpt":"Which models to use? This is up to you, but maybe some hints:\n  For …","ref":"/docs/manual/swiftgeneral/modelsandmodelset/createms/","title":"Model set - creating or recreate a model set"},{"body":" downloadbluebell{.interpreted-text role=\"ref”} Loading the models for XPlane, for this example assuming we have BlueBell and XCSL models installed   loading starts, this may take a while   loading messages, can be ignored as long as there are only warnings   filter by BlueBell {F27390}   add to model set   filter by XCSL   add to model set, you have now all [BB]{.title-ref} and [XCSL]{.title-ref} models in the set (not yet saved) go to set tab, reduce dialog   reduce, making [BB]{.title-ref} my preferred package   reduce completed, confirm by [OK]{.title-ref}   do not forget to [SAVE]{.title-ref}  ","excerpt":" downloadbluebell{.interpreted-text role=\"ref”} Loading the models for …","ref":"/docs/manual/swiftgeneral/modelsandmodelset/examplemsbbxcsl/","title":"Model set example BlueBell and XCSL (XPlane, reduce model set)"},{"body":"General\nswift assumes that the models in your set are properly installed and working for your simulator. If not, it can happen that swift uses a model (as result of the matching procedure) which then fails to render.\n::: {.important} ::: {.title} Important :::\nThe normal situation should be that there are no validation errors. Fix your model set if models are removed or changed. So it is your responsibility to keep your model set up to date. However there are some tools helping you. :::\nIt can happen that models fail even though there is no validation error, see disabledmodels{.interpreted-text role=\"ref”}\nReasons for validation errors\n have you moved your model directories? have you deleted models? have you run updates that might have changed the models?  All that requires updating the own models and the model set. Check the model file path of the models in your model set, then you can see where swift expects the models. If you want to fix the path, you can re-create the model set, see createms{.interpreted-text role=\"ref”} .\nHow to enable validation?\nFrom the settings (use SHIFT + settings button to get to the first page), click matching, scroll down a bit\nPilot client validations\nIn the matching settings you can setup how swift handles validation.\n Verify set at startup: Checks your model set after swift was started.  this requires swift can access the model files (disk access to the model files) this takes a while before completed (and runs in background) models failing will be temporarily disabled swift gives up if there are too many files failing, because it then assumes there is a general issue   temporarily remove models failing. This means if a model fails during the matching process it will not be used anymore this session and the model will be disabled in order to avoid seeing a disabled model you can select the \"use other model option\". swift then tries to use another model before it fails, but gives up after some time  This is how the result dialog looks like. There you can temp. disable such models.\nAfter you have disabled models you wold see them \"in red\" in the model view (might be you have to press \"load set\" to refresh the view).\nBtw, you can also temp. disable a model from the context menu.\nTrigger validation in pilot client\nFrom the model page in the client, click the [validate]{.title-ref} button,\nIn the validation popup you either see messages already (if there are results already), or press [trigger validation]{.title-ref} to start the validation (which takes a while before there are results)\nValidation in mapping tool\n::: {.important} ::: {.title} Important :::\nThis does a live check (unlike the background check of the pilot client above). In case the files are not accessible on a remote drive it can cause the mapping tool to hang before a timeout is reported. :::\nIn the mapping tool just select the models to be checked and run the validation.\nIf there was a previous validation in the swift pilot client yielding some invalid models, those can be also highlighted in the mapping tool.\nA real world example\nsee modelsetvalidationexample{.interpreted-text role=\"ref”}\n::: {.toctree caption=\"Content in this chapter”} modelsetvalidationexample disabledmodels whyvalidationerrors :::\n","excerpt":"General\nswift assumes that the models in your set are properly …","ref":"/docs/manual/spc/modelsetvalidation/","title":"Model set validation"},{"body":"see also modelsetvalidation{.interpreted-text role=\"ref”} and disabledmodels{.interpreted-text role=\"ref”} .\nValidation In the client a validation error is shown, here one model is shown as invalid.\nIt is also a good idea to check the messages/warnings\nResolve issues Let's check the messages first, we deal with the invalid model later. But there is also a warning about missing DB data. This means you have used models in your set without DB metadata. This is possible but not recommended.\nAs you can see there are entries without DB data, as you can see by the missing DB icon.\nThere are three options now:\n someone creates mapping for those you remove them from the model set you ignore the warnings, which can lead to undesired matching results  Now we deal with the model\nAs a first step I do disable the invalid model (validation dialog)\nThen I can highlight the invalid model in the mapping tool\nOr you can exclude those models from the model set via the context menu\n","excerpt":"see also modelsetvalidation{.interpreted-text role=\"ref”} and …","ref":"/docs/manual/spc/modelsetvalidation/modelsetvalidationexample/","title":"Model set validation example"},{"body":"Model sets for testing\nTODO Add FG model matching test file  ","excerpt":"Model sets for testing\nTODO Add FG model matching test file  ","ref":"/docs/dev/testmodelsets/","title":"Model sets for testing"},{"body":"::: {.toctree caption=\"Content in this chapter”} exportmodelset addtoms createms examplemsbbxcsl modelsetandsettings modelsetduplicates nodbdata testmodelset tuningset modelset whentoupdatems xpmodeldirectories :::\n","excerpt":"::: {.toctree caption=\"Content in this chapter”} exportmodelset …","ref":"/docs/manual/swiftgeneral/modelsandmodelset/","title":"Models (own installed models) and model set"},{"body":"If you see a message, \"models not accessible\", check the page:\n whyvalidationerrors{.interpreted-text role=\"ref”} modelsetvalidation{.interpreted-text role=\"ref”} modelsetvalidationexample{.interpreted-text role=\"ref”}  ","excerpt":"If you see a message, \"models not accessible\", check the page: …","ref":"/docs/manual/swiftgeneral/faq/modelsnotaccessible/","title":"Models not accessible"},{"body":"If you want to use a model for model matching (mm{.interpreted-text role=\"ref”} ) you need to add it to the model set. Only models in the model set will be used for model matching. If you install/uninstall models on your disk you might need to update your model set (whentoupdatems{.interpreted-text role=\"ref”} ).\n How does swift know where my models are installed? =======================================================  If you do NOT know where to place (install) your models, see xpmodeldirectories{.interpreted-text role=\"ref”} . You can change the simulator directories as described here: modeldirectories{.interpreted-text role=\"ref”} . Please understand that changing these settings values does not automatically change your model set!\n::: {.important} ::: {.title} Important :::\nXPlane CSL models have to be inside the XPlane folder structure :::\nWhat are the model directories are used for? The model list! ===============================================================  Depending on the model directories you can create a list of all your models installed, this can be done\n  in the wizard here\n  the model list here you can display via display the models here are NOT the model set, the model set is a subset of those models you want to use for matching the list here is the SAME list as in the mapping tool     or the mapping tool, see createms{.interpreted-text role=\"ref”}\n  The model set ================  The model set is a list of those models you want to use for matching: matching{.interpreted-text role=\"ref”} .\n  you can create your model set in the wizard by selecting the distributors list\n  this picks those models from your model list (see above) and adds it to the model set in this step we do not care about the simulator settings, only the list generated is considered     the model set can also be generated in the mapping tool\n  you can do much more things in the mapping tool, e.g. arbitrarily mixing models from distributors, see examplemsbbxcsl{.interpreted-text role=\"ref”} Here is shown how to update or re-create your model set, see addtoms{.interpreted-text role=\"ref”} and createms{.interpreted-text role=\"ref”}     Hint:: If you use models of multiple providers in your set, we recommend to remove duplicates, see modelsetduplicates{.interpreted-text role=\"ref”} and examplemsbbxcsl{.interpreted-text role=\"ref”} .\n  Why do we need all this?  modelset{.interpreted-text role=\"ref”}\n","excerpt":"If you want to use a model for model matching (mm{.interpreted-text …","ref":"/docs/manual/swiftgeneral/modelsandmodelset/modelsetandsettings/","title":"Models, model set and settings - how does it fit together?"},{"body":"see also nodbdata{.interpreted-text role=\"ref”} and matchingsettings{.interpreted-text role=\"ref”}\nThe DB icon You can see by the database icon if a model has already database data or not. The concept is the same for all view. Here you can see 2 examples, in the pilot client view every model has a DB entry, in the mapping view not.\n::: {.note} ::: {.title} Note :::\nTo use a model without DB data you need to enable this in your settings. :::\nI do not see my mapping, why? I have created a mapping, but still do not see a DB icon? This can have several reasons:\n  depending on your DB role you can only create change requests, see dbroles{.interpreted-text role=\"ref”} . Change requests have to be released, before that you do not see the very model.\n  Actually it is easy to check, you can just go to the datastore model view and check if the model is there. Just sort by date latest first, then you should see your model at top. If not, it has to be released first. you can also check your roles on the login page.     If the model is in the DB, either the shared files are not yet generated, or in the mapping tool you just have to update the view.\n  In the mapping tool you can also update to the latest DB data via the context menu   If you really want to see the details of the data, you can check them in the launcher's update view. There you can see en detail the status of the shared data, the cache, and the DB data. The cache data are the ones you are using in swift.  NOTE: If you really need to update to very last data for testing, you could do it here.\n   Once you have latest DB data in your cache, you need to consolidate your models and model set. If you do not know what consolidation is, see whydataconsolidation{.interpreted-text role=\"ref”}\n  You can consolidate via the background updater which automatically consolidates from time to time   You can consolidate with the context menu   swift pilot client can consolidate when you download new models, see updatemodeldata{.interpreted-text role=\"ref”}     ","excerpt":"see also nodbdata{.interpreted-text role=\"ref”} and …","ref":"/docs/manual/swiftgeneral/mapping/nodbmodel/","title":"No DB model - I do not see my DB model, why?"},{"body":" swift has no audio hot plug and play yet, audio device needs to be \"on\" when swift is started Check that the notification sound is enabled in the settings   Check the notification sound volume You can test each sound by check/uncheck the sound, that will play it On Windows you can check if sound for swift is enabled  ","excerpt":" swift has no audio hot plug and play yet, audio device needs to be …","ref":"/docs/manual/swiftgeneral/nonotification/","title":"No notification sounds"},{"body":"Make sure you have the MIC (microphone) enabled for swift.\n There is a bug currently being investigated. MacOSX seems to be very picky about app bundle info.plist. No matter what we add to it, it just won’t work without any warning. Workaround: Open the swiftguistd application bundle content and drag the internal binary into console. That should work  ","excerpt":"Make sure you have the MIC (microphone) enabled for swift.\n There is a …","ref":"/docs/manual/swiftgeneral/macosnosound/","title":"No sound on macOS (loopback not working)"},{"body":"You can enable notification sounds for various events. To use your own sounds see notificationsounds_spc{.interpreted-text role=\"ref”} .\nTesting notification sounds You can test the sounds by un-checking and checking the notification sounds. This should play this sound.\n","excerpt":"You can enable notification sounds for various events. To use your own …","ref":"/docs/manual/spc/settings/notificationsounds/","title":"Notification sounds and text message sounds (and testing sounds)"},{"body":"\u003ctable\u003e \u003ctr\u003e \u003cth\u003eScenario\u003c/th\u003e \u003cth\u003ewith altitude sent only\u003c/th\u003e \u003cth\u003ewith ground flag\u003c/th\u003e \u003cth\u003ewith elevation from own sim\u003c/th\u003e \u003c/tr\u003e \u003ctr\u003e \u003cth\u003esame elevation {F4093, width=50%}\u003c/th\u003e \u003c/tr\u003e \u003ctr\u003e \u003cth\u003eown sim's elevation lower {F4092, width=50%}\u003c/th\u003e \u003ctd\u003elooks like aircraft is hovering while taxiing\u003c/td\u003e \u003ctd\u003efixes hovering, but as soon [ground -\u003e false]{.title-ref} the aircraft is lifting\u003c/td\u003e \u003ctd\u003eallows to place on elevation + CG (offset)\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003cth\u003eown sim's elevation higher {F4089, width=50%}\u003c/th\u003e \u003ctd\u003elooks like aircraft is below surface, bumpy taxiing\u003c/td\u003e \u003ctd\u003eunderflow fixed, but when [ground -\u003e false]{.title-ref} it can happen the aircraft sinks into ground before taking off\u003c/td\u003e \u003ctd\u003eunderflow fixed, as used altitude will never below scenery elevation\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003cth\u003esame elevation {F4091, width=50%}\u003c/th\u003e \u003c/tr\u003e \u003ctr\u003e \u003cth\u003eown sim's elevation lower {F4094, width=50%}\u003c/th\u003e \u003ctd\u003eaircraft never touching ground, hovering\u003c/td\u003e \u003ctd\u003efixes hovering, but as soon [ground -\u003e true]{.title-ref} the aircraft is suddenly dragged to ground\u003c/td\u003e \u003ctd\u003eallows to place on elevation + CG (offset)\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003cth\u003eown sim's elevation higher {F4090, width=50%}\u003c/th\u003e \u003ctd\u003elooks like aircraft is crashing into ground\u003c/td\u003e \u003ctd\u003eunderflow fixed, but depending on when [ground -\u003e true]{.title-ref} the aircraft crashes into ground, then is lifted back to ground level\u003c/td\u003e \u003ctd\u003eunderflow fixed, as used altitude will never below scenery elevation\u003c/td\u003e \u003c/tr\u003e \u003c/table\u003e\n","excerpt":"\u003ctable\u003e \u003ctr\u003e \u003cth\u003eScenario\u003c/th\u003e \u003cth\u003ewith altitude sent only\u003c/th\u003e …","ref":"/docs/knowhow/simandinterpolation/ongroundscenarios/","title":"On ground? Using different sceneries overview"},{"body":"  Invisible AI objects: https://www.fsdeveloper.com/forum/threads/invisible-or-very-small-ai-object.442575/\n  FSUIPC: https://forum.simflight.com/topic/85329-ground-elevation-at-arbitrary-latlng-position/\n  Teamspeak integration: https://forum.teamspeak.com/threads/135618-First-time-using-SDK-some-questions\n  P3D forum:\n Updating P3D to a new version: https://www.prepar3d.com/forum/viewtopic.php?t=120861 Switch to views: https://www.prepar3d.com/forum/viewtopic.php?f=6310\u0026t=129879 Ground elevation: https://www.prepar3d.com/forum/viewtopic.php?f=6310\u0026t=129174    AVI tab:\n AviTab thread: https://forums.x-plane.org/index.php?/forums/topic/180270-vision-for-the-future-of-avitab/\u0026do=findComment\u0026comment=1673585    ","excerpt":"  Invisible AI objects: …","ref":"/docs/knowhow/openresearch/","title":"Open research questions (other forums)"},{"body":"Here you find some high level tasks (besides open issues and fixes) you could work on\nas C++ programmer, swift pilot client See Github Issues\nswift pilot client UI design tasks Requires: less C++ skills than the above, but still installation of Qt Creator, more focused on the UI builder, stylesheets\n Improve the layout of the text message parts. Currently this is layouted via a CSS, and mostly shown as table view. This could somehow look cooler Also the popup error and warning messages look a bit crude and could be refined (more 3D looking). So this could be fine tuned as well. This screenshot shows what we mean   CPDLC: create the UI for the CPDLC integration  as PHP/JavaScript programmer  allow to request (change request) new liveries allow to upload airline icons notification services (push messages) when relevant data change (e.g. from datastore to slack)  no programming skills required  help with the efforts to create mappings, see Mapping hints help us to complete the airline icons. Provide us with airline icons we can integrate, see here . Mind the copyright! ATC icons: We are using icons to represent the different ATC stations. Those icons currently have a low resolution. We could use them in higher resolutions and streamlined.  ","excerpt":"Here you find some high level tasks (besides open issues and fixes) …","ref":"/docs/gi/opentasks/","title":"Open tasks"},{"body":"::: {.important} ::: {.title} Important :::\nRemote SimConnect allows you to run a \"standalone\" GUI connecting to a remote FSX/P3D via a \"remote SimConnect\" configuration. This is something different as a distributed swift GUI connected with a core. :::\nIf you want to read about remote swift UI: distributedswift{.interpreted-text role=\"ref”}\nEnable the server side (where FSX or P3D runs)  From the official P3D documentation Another remote [SimConnect]{.title-ref} config tutorial is here. In %APPDATA%\\Lockheed Martin\\Prepar3D v4 (or Microsoft/FSX) create a SimConnect.xml file Example: My path looks like this for FSX: C:\\Users\\[username]\\AppData\\Roaming\\Microsoft\\FSX This file is only needed when remote access is required For me the file is identical for P3Dv4 and FSX In case one needs to create [SimConnect]{.title-ref} log files, the [.ini`file is here: `C:Users[username]DocumentsFlight Simulator X FilesSimConnect.ini]{.title-ref}  Example file: TODO ADD\nEnable the client side (where swift runs)  On the client machine, go to the Documents folder, something like this: C:\\Users\\[username]\\Documents In the documents folder place a SimConnect.cfg file corresponding with the above server  Example file: TODO ADD\nYou can alternatively use the config option from the swift settings\nLogging SimConnect https://forum.simflight.com/topic/45074-fsx-help-logging-simconnect/\n","excerpt":"::: {.important} ::: {.title} Important :::\nRemote SimConnect allows …","ref":"/docs/manual/spc/p3dremote/","title":"P3D and FSX remote SimConnect access"},{"body":"The ideal choice for using P3D with swift is the 64bit version. However, for P3D before V4.2 you need to use the 32bit version. You can try the 64bit version, but likely the driver will not connect.\nYou can also use the 32bit version with the newer P3D versions, but then always the legacy FSX driver will be used. (as you can see in the screenshot).\n The swift x64 {64bit} version uses the latest P3D SimConnect API and library The swift x86 (32bit) version uses the FSX SimConnect API and [dll]{.title-ref}  Hint: use the correct P3D version or use the one comes closest.\nWhy would I want to use the P3D x64 version?  First of all, because you can use a x64 version not having the memory restrictions of a x86 version. But that does not really matter for normal users. So if you use P3D and FSX and you only want to use the x86/32bit version you are fine (time will tell if this remains true). Also, because in the mid and long term the new SimConnect uses newer P3D API functions not available in legacy SimConnect. So far the difference between old and new API is minor, but steadily increasing. As of 4.2 we already use newer functions, and we also will use even better ones available in 4.3 and later.  ","excerpt":"The ideal choice for using P3D with swift is the 64bit version. …","ref":"/docs/manual/spc/p3d32vs64bit/","title":"P3D and swift - 32 or 64 bit?"},{"body":"Currently collecting info about P3D\n P3D SDK v3/2 does not come with a [simconnect.dll]{.title-ref} only [simconnect.lib]{.title-ref} P3D still seems to distribute the FSX simConnect version, see here For P3D, the simconnect.msi is located in the P3D REDIST folder instead of SDK (use the XPACK/SP2 version).   For simConnect network configuration The P3D lib seems to be a VS2013 lib, and some people are creating their own simconnect.dll out of it, see here, The lib was made in VS2013, so you need VS2013 if you're trying to link against it. My personal approach is to create my own P3D SimConnect DLL from their SimConnect.h/lib (using VS2013's command line tools and a couple scripts to generate the DEF and then to invoke the linker) and then link to the resulting DLL (when appropriate) using LoadLibrary/GetProcAddress so that I can build a unified module (in VS2008, actually) that loads in everything from FSX:SP2 through P3D v3.2. Creating \"an own simconnect.dll \" is also used by FSUIPC, see here.  ","excerpt":"Currently collecting info about P3D\n P3D SDK v3/2 does not come with a …","ref":"/docs/knowhow/simandinterpolation/p3d/","title":"P3D scratchpad"},{"body":" VATSIM FLAI: http://flai.bvartcc.com/  Glider   Freeware: http://www.fsglider.de\n  Payware: https://www.aerosoft.com/de/flugsimulation/flight-simulator-x/flugzeuge/401/discus-k-glider-x?number=AS11231\n  ","excerpt":" VATSIM FLAI: http://flai.bvartcc.com/  Glider   Freeware: …","ref":"/docs/installation/downloadmodels/p3d/","title":"P3Dv4+ models"},{"body":"== Introduction ==\nPrepar3D in contrast to Microsoft, ships SimConnect only as static libraries. This has several problems: * It requires two different libraries for Release and Debug builds * One has to know exactly what other dependencies are necessary during linking * It is not possible to load and resolve the libraries at runtime * ...\nIn order to avoid the problems above, the static libraries can be linked to shared libraries by some manual preparation and invoking MSVC compiler at command line.\nWARNING: I have not found a way to create a simple project (neither qmake nor Visual Studio Project) to perform the linking. So the linker has to be called manually in a cmd.\n== Directories ==\n  client\\externals\\common\\include\\simconnect\\P3D-v4 header file\n  The header file is generated by us (swift) and version dependent. The original headers are in the sub directories.     client\\externals\\win32-msvc\\64\\lib here we keep the generated dlls like SimConnect.P3D-v4.3.dll\n  == Header file ==\nThe header file is a swift specific version. We keep the old header files so we can also find them if needed. For informational purposes we keep a list of files containing the diffs.\nSteps: - Copy new P3D files to the respective sub-directory - Find out about the differences: [diff.exe -u 430/SimConnect.h 440/SimConnect.h \u003e SimConnect430_440.txt]{.title-ref} - Update the swift version [SimConnect.h]{.title-ref}\n== Link static library into shared library ==\nIn order to link the SimConnect static libraries into a shared one, we need two inputs:\n The shared library itself. The release version is enough - we don't need to convert the debug library since the API is pure C The list of symbols to export from the shared library. Those are defined in a module definition file (.def).  === Dump SimConnect API Symbols ===\nRegarding point 2, we are interested only in the SimConnect API functions. They usually start with [SimConnect_]{.title-ref}. Use the following command to build a list of SimConnect API functions that are implemented in the static library:\n[dumpbin /LINKERMEMBER:1 SimConnect.lib | findstr SimConnect_ \u003e symbols.dat]{.title-ref}\nThe resulting [symbols.dat]{.title-ref} file will look similar to this:\n6CBA2 SimConnect_AICreateEnrouteATCAircraft 6CBA2 SimConnect_AICreateNonATCAircraft 6CBA2 SimConnect_AICreateObjectWithExternalSim 6CBA2 SimConnect_AICreateParkedATCAircraft From this symbol list, we can now create our module definition file `SimConnect.def`:\nLIBRARY SimConnect.P3D-v4.0.dll EXPORTS SimConnect_AICreateEnrouteATCAircraft SimConnect_AICreateNonATCAircraft SimConnect_AICreateObjectWithExternalSim SimConnect_AICreateParkedATCAircraft === Link shared library ===\nFinally, we can run our linker command. It requires several input like the machine type, several other dependent Windows libraries, our created SimConnect.def and an output filename that should be equal to the [LIBRARY]{.title-ref} name specified in [SimConnect.def]{.title-ref}.\nIf you are running the command from a MSVC command prompt, you won't have the necessary Windows SDK library path configured. To do this, you need to add the required path manually to the %LIB% environment variable. It is fine to use the latest Windows 10 SDK. In my case that was:\n[set LIB=%LIB%C:Program Files (x86)Windows Kits10Lib10.0.16299.0umx64;C:Program Files (x86)Windows Kits10Lib10.0.16299.0ucrtx64;]{.title-ref}\nFinally run the linker command: [cl.exe SimConnect.lib User32.lib Advapi32.lib Ole32.lib Shell32.lib /link /DLL /MACHINE:X64 /def:SimConnect.def /out:SimConnect.P3D-v4.0.dll]{.title-ref}\n","excerpt":"== Introduction ==\nPrepar3D in contrast to Microsoft, ships SimConnect …","ref":"/docs/knowhow/programming/p3dsimconnect/","title":"Prepar3D SimConnect Libraries"},{"body":"Cookies Cookies are small text files that are stored on your computer when you visit some websites. We use cookies created by ourselves and by third parties on swift websites and in swift applications to help identify your computer so we can tailor your user experience and remember your preferences. You may disable cookies in you browser settings, but some functions may not work correctly.\nPrivacy Statement For the purposes of enabling online flight simulation, virtual aviation, and related services, and improving these services, we may collect information about your use of swift. Except where expressly noted, we will not share any personally identifying information with third parties. See the data exchange page for details.\nGoogle Analytics We use Google Analytics to track usage statistics for our websites. For this to work, we must share with Google some cookies that we store on your computer. These cookies will not give Google any personally identifying information or information that could be correlated with any other data held by Google. The information will be subject to Google’s privacy policy.\nGoogle Maps We use Google Maps to display online flights. For this to work, we must share with Google some cookies that we store on your computer. These cookies will not give Google any personally identifying information or information that could be correlated with any other data held by Google. The information will be subject to Google’s privacy policy.\nVATSIM For online flights on VATSIM (external) please see VATSIM’s privacy policy\n","excerpt":"Cookies Cookies are small text files that are stored on your computer …","ref":"/docs/legal/privacy/","title":"Privacy and Cookies"},{"body":"Mapping overlay messages  Use the context menu in the mappings overlay message window to resize the messages if you cannot read them You can save the messages (context menu since 0.8.3) and attach the save messages to a bug report if needed  Models are already in DB, but not shown as such There are 3 model views: * Own model (you models installed/on disk) * Own model set, a subset of of your own models * The database view\nThere are 2 potential problems: * A user has created/updated a model very recently, and you have not a local copy yet. So this new model is not yet shown in the database view. This issue will be resolved after a data consolidation, a restart of the mapping tool, or when you update the database view. * A model is shown in the DB tool, but not in own model set/own models. Check out backupdate{.interpreted-text role=\"ref”} and consolidation{.interpreted-text role=\"ref”}\n","excerpt":"Mapping overlay messages  Use the context menu in the mappings overlay …","ref":"/docs/manual/smt/problemsmapping/","title":"Problems creating mappings? Some hints"},{"body":"Missing topics from original documentation: - Backend technical docu (PHP/SQL)\n","excerpt":"Missing topics from original documentation: - Backend technical docu …","ref":"/docs/knowhow/programming/","title":"Programming know how"},{"body":"swift can display airline icons in its views. This is optional, but a nice eye catcher. If you want to add missing icons please consider the following rules:\nNote we keep different icon formats in parallel. The using application can choose the most appropriate one    ideally use a 4:1 ratio, such as 300:75px\n  maximum size approx. 300:75px (see hint about hires below)\n  use png format\n  name is supposed to be the 5 digit id plus airline ICAO code, e.g. 03221_DLH.png\n you can see the id in the mapping tool or in the datastore ICAO view here    if the airline is not yet available, request the airline first: Change request\n  do not use copyright protected icons! Hint, check Wikipedia, they show you the copyright for each icon\n  Naming scheme:\n We might use higher resolutions in the future, you can also add a high res version like 1024:205px. In that case naming is same as above, but [hi]{.title-ref} in the middle, 06461_LHA.hi.png, 03221_DLH.hi.png Dark optimized icons (for a black background for instance) will be using .do in the name. Examples:  03221_DLH.png lowres version (approx 300:75) 03221_DLH.do.png lowres version, dark optimized (approx 300:75) 03221_DLH.hi.png hires version 03221_DLH.do.hi.png hires version, dark optimized      ","excerpt":"swift can display airline icons in its views. This is optional, but a …","ref":"/docs/gi/airlineicons/","title":"Providing airline icons (VA icons, military organization icons)"},{"body":"== Qt Strings Overview ==\nThe best way to know which code construct to use in a given situation is to understand the API of the facilities you use, and what they provide.\n===== String producers =====\n  !!*`QString`*!!\n  `QString` is a class that owns a shared, dynamically-allocated UTF-16 string. The sharing is detached (so the string data is copied) when any non-const operation is performed (copy-on-write). When constructing a [QString]{.title-ref} from a string literal, the data is always copied.     !!*`QStringLiteral`*!!\n  `QStringLiteral` is a macro that \"returns\" a `QString`. The internal shared data of the [QString]{.title-ref} is prepared at compile-time, not dynamically allocated, and not copied. If you have a string literal, and you need a [QString]{.title-ref}, then [QStringLiteral]{.title-ref} is what you want. But you don't always need a [QString]{.title-ref}. In situations where you //don't// need a [QString]{.title-ref}, it is a waste of time to use [QStringLiteral]{.title-ref}.     !!*`QLatin1String`*!!\n  `QLatin1String` is a class that holds a `const char*` pointing to a string literal. Its use cases are limited, as converting it to a [QString]{.title-ref} involves converting the Latin-1 data into UTF-16. Certain Qt functions are overloaded for [QLatin1String]{.title-ref} because they can directly use the Latin-1 data without converting it to UTF-16. For example, JSON keys can be passed as [QLatin1String]{.title-ref}. In such cases, using a [QString]{.title-ref} would perform an unnecessary allocation and convertion from Latin-1 to UTF-16 and back again.     !!*`QStringView`*!!\n  `QStringView` is a class that holds a `const char16_t*` pointing to some UTF-16 string. It is often useful as a function parameter type. If you write a function that takes a string parameter, which it uses and then discards, it can be beneficial to declare the parameter as [QStringView]{.title-ref}. The caller can then choose to pass a string to your function using whatever type is most convenient to them. If they had a [char16_t*]{.title-ref} then they would not be forced to construct an unnecessary [QString]{.title-ref} just to be able to pass it to your function. If your function really does need a [QString]{.title-ref}, don't use [QStringView]{.title-ref} as it would inhibit the implicit sharing feature of [QString]{.title-ref}. Because [QStringView]{.title-ref} is such a simple class, it is more efficient to pass it by value, not reference.     !!*`QStringRef`*!!\n  `QStringRef` is a class that references a substring of an existing `QString` without copying it. This can be useful when working with substrings, where you would otherwise be allocating unnecessary temporary [QString]{.title-ref} instances to copy substrings into them. For example, [s.leftRef(3).trimmed()]{.title-ref} instead of [s.left(3).trimmed()]{.title-ref}. Of particular note is [QString::splitRef]{.title-ref}, which is like [split]{.title-ref} except that it returns a [QVector\u003cQStringRef\u003e]{.title-ref} instead of a [QStringList]{.title-ref}. Using [QStringList]{.title-ref} would be very inefficient if you just want to loop over the parts, as it would reallocate and copy every single one for no reason. Just make sure that the [QStringRef]{.title-ref} gets destroyed //before// its referenced [QString]{.title-ref}, otherwise this would be a dangling reference.     !!*`QChar`*!!\n  `QChar` is a class that contains a single UTF-16 character.     !!*`QLatin1Char`*!!\n  `QLatin1Char` is a class that contains a single Latin-1 character.     ===== String consumers =====\n  !!*QString::arg*!!\n  `arg` is a member function of QString, so obviously if you want to call [arg]{.title-ref} then you need a [QString]{.title-ref} to call it on. So if you want to call [arg]{.title-ref} on a string literal, then you almost always want [QStringLiteral]{.title-ref}. The same goes for other member functions of [QString]{.title-ref}. But note that [QStringView]{.title-ref} and [QStringRef]{.title-ref} provide many of the same methods.     !!*operator %*!!\n  The % operator provides more efficient string concatenation when [\u003cQStringBuilder\u003e]{.title-ref} is included. Instead of using lots of temporary [QString]{.title-ref} objects to store each subexpression (like [+]{.title-ref} does) it collects the parts together and concatenates them all in one go. You should look in the [qstringbuilder.h]{.title-ref} header to see which types can be concatenated. The class template [QConcatenable]{.title-ref} is specialised on each concatenable type: [QString]{.title-ref}, [QStringRef]{.title-ref}, [QStringView]{.title-ref}, [char16_t*]{.title-ref}, etc. So for string literals, these can be concatenated directly as UTF-16 literals, without any [QString]{.title-ref}-based intermediary. One rare exception to the above rule: if every type in a given concatenation is a fundamental type like [char*]{.title-ref} or [char16_t*]{.title-ref}, it will fail to compile. This is because operators can obviously not be overloaded on built-in types. At least one of the parts of the concatenation must be a class type. The best workaround is [QStringView]{.title-ref} as it is the most lightweight.     == TL;DR ==\nIt can take time and experience to cement the understanding in the brain so that it becomes intuitive (to become \"fluent\"). Therefore when working with string literals you can use the following cheat sheet that should cover most situations:\n  Empty string Single character Multiple characters   Store in a QString QString() QStringLiteral QStringLiteral\nConcatenate with % u'' u\"\"\nAs QLatin1String QLatin1String QLatin1String QLatin1String param\nAs QStringView param u\"\" u\"\" u\"\" ","excerpt":"== Qt Strings Overview ==\nThe best way to know which code construct to …","ref":"/docs/knowhow/programming/qt-strings/","title":"Qt Strings (QString)"},{"body":"pilot client\n \"My hotkey PTT does not work\", see hotkeys{.interpreted-text role=\"ref”} No sound/void on macOS: macosnosound{.interpreted-text role=\"ref”}  doing mappings\n What is that \"stash\" in why do I need it? It is your workbench doing mappings, you can mess around there before you publish models Doing mappings is complex! Yes, it takes a little getting used to. But for each model/livery we only have to do it once, then everyone else can use it. It is also more a power user feature, people just flying swift will not need to do that. But we need more mappings for testing now! How can I see my mappings? See [here \u003cseemymapping\u003e]{.title-ref}  other swift questions\n Do I need to add models before I can fly? Yes, you need to create a model set before you can fly swift. This gives you full control about which models you use. Could I use models not in the database yet in my model set? You could, but it is not recommended. Our goal is to have reliable data, not fantasy ICAO codes or such. How can I find the log. and data directories: From the \"File menu\"  ::: {.toctree caption=\"Content in this chapter”} atcfailedtoconnect choosecs restrictaircraft startmap copilot nootherplanes notraffic modelsnotaccessible tempdisablemodel xpgear :::\n","excerpt":"pilot client\n \"My hotkey PTT does not work\", see …","ref":"/docs/manual/swiftgeneral/faq/","title":"Questions and answers (aka FAQs)"},{"body":"See also createms{.interpreted-text role=\"ref”} , tuningset{.interpreted-text role=\"ref”}\nSorting (ranking) a model set Depending on the settings (matchingsettings{.interpreted-text role=\"ref”} ), it can be configured if two models have the same matching score, which one is taken.\nJust a few hints at the very beginning\n Sorting order of the model set only applies if two models are calculated \"as equal\" by the algorithm. It depends on the settings how the calculation is done. In general you should ask yourself why you have the same models multiple times in your set, e.g. why did you add 2 [ B747]{.title-ref} of [DLH]{.title-ref}, so what do you try to achieve by that? See [[ help/smt/modelsetduplicates/ ]].  Remove duplicates If you have no duplicates there is no real need for ranking, see modelsetduplicates{.interpreted-text role=\"ref”} . Ranking is needed if more than one model have the same score, but if you have only one aircraft/livery combination it is not very likely that this happens.\nManually ranking  You can manually apply a rank by the context menu   The rank is displayed in the first column   If you sort by another column it does mean the ranking has changed   However, if you like a certain sort order to become your current ranking, just use \"freeze order\". After you will see that the rank column will change order accordingly  Make filtered data my model set  If you filter a model set, this is a temporary action and the model set will not be changed If you want to keep the filtered data as your new model set, just use \"materialize\" from the context menu  Rank by distribution order In order to create a sorted order by distributor you can apply a distributor ranking\n First you need to create preferences by distributor in the settings of the mapping tool   Then you can apply these preferences   Now you have a sort column for distributors and you can use to \"sort by distributors\"   Once you are happy with your sorting, you can use \"freeze order\"  === Matching ===\nIn order to use the rank you need to enable the setting!\n","excerpt":"See also createms{.interpreted-text role=\"ref”} , …","ref":"/docs/manual/smt/rankmodelset/","title":"Ranking (sorting) a model set"},{"body":"From [[https://dev.vatsim-germany.org/boards/22/topics/2236?r=2251#message-2251 | Redmine]]\nAs a result of working through the branch in the live session yesterday I think I got a bit closer to understanding the reasons for the conflict issues which have occurred with Klaus’ previous two branches, so I think I can try to offer some lessons learned, in the form of a kind of standard model for doing rebasing.\n### The branch\n The purpose of pushing branches is so that changes can be reviewed before being merged. Therefore, a branch has done its job well if it is easy to review, and a branch that is easier to review can be merged sooner. The more changes are in a branch, the more potential there is for conflicts, so avoid making a branch any bigger than it needs to be.  ### The first version\n Throughout the process of making changes in a branch, keep one eye on the git log which you are creating, and try to see it from the point of view of a reviewer. With each change that you make, ask yourself “am I changing something which I already changed in an earlier commit in the same branch?” If yes, then it is very likely to make sense for it to be fixed-up onto that earlier commit, instead of making a separate commit for something which is just a continuation of it. This will mean that the reviewer doesn’t waste time reviewing several different versions of your code. A reviewer must review changes, but he really only cares about the final state of your code, not the intermediate states. Applying this model continuously at every step of the coding process is much easier than trying to do the fixing-up all at the very end. Use the [fixup! message]{.title-ref} to create a commit which should fix-up an earlier commit of the same branch, to utilize the “autosquash” facility of [git rebase -i]{.title-ref}. There is no need to change the message of the earlier commit if it still makes sense.  ### Rebasing on the latest master\n It can commonly take up to a couple of weeks (sometimes longer) to finish the first version of a branch. In that time, it is likely that [master]{.title-ref} will have changed, so that the base of your branch is out-of-date. Another use of [git rebase]{.title-ref} (without the [-i]{.title-ref}) is to bring the base of a branch up-to-date with the latest [master]{.title-ref}. This will need to be done before the merge anyway, so it makes sense to do it before the review, so that any resulting problems can be caught by the review. After rebasing onto the latest [master]{.title-ref}, if you find that you need to make some changes to resolve some issues arising from conflicts, then those changes should be fix-ups onto the commits in your branch which triggered the conflicts. This will avoid triggering the same conflicts again if you need to rebase onto the latest [master]{.title-ref} again. As described above, [git rebase -i]{.title-ref} and [git rebase]{.title-ref} (without the [-i]{.title-ref}) are used for two different purposes. You shouldn’t try to do both in a single step. Always do [git rebase -i]{.title-ref} to apply any @fixup! message  ","excerpt":"From …","ref":"/docs/knowhow/programming/git/rebase/","title":"Rebasing and conflicts"},{"body":" If you are a VATSIM user: Register for SSO (Single-Sign-On) with your VATSIM account, then you can use your VATSIM credentials with the swift mapping database. After you have registered here (SSO) a swift admin will approve your account. Problems with VATSIM SSO \u003cqa\u003e{.interpreted-text role=\"ref”}? If you are not a VATSIM member use the the chatroom to request an account You can register your email with swift datastore to allow a reset of your password and receive notifications. However, as best practice we advice you to use a secondary email in case something goes wrong (but this general advice is true for all public services and not swift only).  ::: {.important} ::: {.title} Important :::\nAfter you have registered with SSO the 1st time, an administrator needs to approve your account first :::\n","excerpt":" If you are a VATSIM user: Register for SSO (Single-Sign-On) with your …","ref":"/docs/manual/datastore/registerdatastore/","title":"Register for the swift datastore"},{"body":"Intent Take an event triggered by an object in one of any number of processes, and pass it to objects in any number of other processes using DBus, without requiring those objects to make explicit use of any other class.\nMotivation Consider two or more processes, each one having a CValueCache which must be kept in sync with the CValueCache in the other processes. An change in one of the values in a CValueCache is an event which must be passed to all the other processes. All processes must observe the events occurring in the same order, to ensure that each CValueCache remains consistent with the others.\nInterprocess communication via QtDBus is achieved using concrete Facade (\"context\") classes and associated Proxy classes. Slots in the concrete class can be remotely invoked by calling the corresponding slot of the proxy class, and signals emitted by the concrete class will be sympathetically emitted by the proxy class. Within this framework, events must be able to flow in any direction, from any process to any other process or set of processes.\nThe concrete class acts as central router. Using CSettingsCache as an example, an event enters the system when the slot IContextApplication::changeSettings is called. The slot arguments describe the content of the event. If the slot is called in a proxy class, the call will be forwarded to the concrete class as usual. The slot in the concrete class will emit the signal IContextApplication::settingsChanged with the same arguments that were passed to the slot. The corresponding signal will, as usual, be emitted by all proxy classes in all connected processes. Successive emissions of the signal will be always be observed in the same order by all processes, ensuring consistency. A CIdentifier parameter can be used to identify the process which triggered an event, and to detect round trips.\nThe class which ultimately sends and receives the events in this example is CValueCache. The facade classes are responsible for establishing the signal/slot connections, so CValueCache has no knowledge of the facades.\nApplicability Use the Relay Event pattern when a message must be sent between two or more distributed processes in arbitrary directions. If the signal/slot connections are established by the facades, then the classes which ultimately send and receive the events can be completely independent of the mechanism of interprocess communication.\nStructure Participants   Abstract Facade (IContextApplication)\n  Declares a pure virtual slot (changeSettings) and a signal (settingsChanged). Responsible for connecting its slot to the Endpoint's signal (CValueCache::valueChangedByLocal), and for connecting its signal to the Endpoint's slot (CValueCache::changeValueFromRemote).     Concrete Facade (CContextApplication)\n  Provides an implementation of the virtual slot, which emits the signal.     Proxy Facade (CContextApplicationProxy)\n  Following the usual pattern of a facade proxy class, provides an implementation of the virtual slot which forwards the call to the slot of the Concrete Facade via DBus.     Endpoint (CValueCache)\n  A class which calls the slot and/or receives the signal of the Abstract Facade.     Collaborations Endpoint classes (like CValueCache) in different processes can share events with each other when they are connected via this pattern.\nConsequences Endpoint classes need no knowledge of the mechanism by which their events are passed around. They are not coupled to the Facade classes, nor to DBus.\nThe pattern results in the facades exposing a signal and a slot which are not intended to be called directly, and should be thought of as protected.\nA large number of events could lead to an undesirable DBus performance issue. This could be mitigated by more intelligently controlling which events should be relayed.\nImplementation Be aware that processes may join or leave the distributed process environment at any time. A new process joining may need special handling to synchronize it with the processes already connected.\nUse a CIdentifier parameter to identify the process which triggered an event. CIdentifier::isFromSameProcess() will return true in the case of a round trip. There is a choice to be made, whether round trip detection should be the responsibility of the Facade or of the Endpoint. If the Endpoint requires confirmation that its event was received by the Concrete Facade, then it can obtain this by doing its own round trip detection, in which case the Facade should not do the detection.\nIf events should be received only by Proxy Facades and not by the Concrete Facade (e.g. log messages) then the Facade signal should only be connected to the Endpoints served by the Proxy Facades. The the signal of the Concrete Facade should be left unconnected.\nKnown Uses  cache{.interpreted-text role=\"ref”} logging{.interpreted-text role=\"ref”} Hotkey events  Related Patterns Relay Event may be seen as a variation on the Mediator pattern. It could also be thought of as a multidirectional Observer pattern in which each Endpoint is an observer of every other Endpoint.\nEndpoint classes are often Singletons. Facade classes of course use the Facade pattern, and Facade Proxies use the Proxy pattern.\nThe Command pattern suggests encapsulating event properties into a single value class, to avoid signals and slots with large numbers of parameters.\n","excerpt":"Intent Take an event triggered by an object in one of any number of …","ref":"/docs/dev/relayevent/","title":"Relay event pattern"},{"body":"\u003ctable\u003e \u003ctr\u003e \u003cth\u003eID\u003c/th\u003e \u003cth\u003eType\u003c/th\u003e \u003cth\u003eDescription\u003c/th\u003e \u003cth\u003eStatus\u003c/th\u003e \u003cth\u003eFix Target\u003c/th\u003e \u003cth\u003eSeverity\u003c/th\u003e \u003cth\u003eComments\u003c/th\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e[QTBUG-49870](https://bugreports.qt.io/browse/QTBUG-49870)\u003c/td\u003e \u003ctd\u003eBug\u003c/td\u003e \u003ctd\u003eOn Windows, any application using QtDBus will hang when exiting\u003c/td\u003e \u003ctd\u003eFixed\u003c/td\u003e \u003ctd\u003e5.6\u003c/td\u003e \u003ctd\u003ehigh\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e[I596358eb](https://codereview.qt-project.org/#/c/168405/)\u003c/td\u003e \u003ctd\u003eBug\u003c/td\u003e \u003ctd\u003eUnintended implicit conversion from [QLatin1String]{.title-ref} to [QString]{.title-ref} in [QJsonObject]{.title-ref}\u003c/td\u003e \u003ctd\u003eFixed\u003c/td\u003e \u003ctd\u003e5.7.1\u003c/td\u003e \u003ctd\u003ehigh\u003c/td\u003e \u003ctd\u003eFor JSON performance\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e[QTBUG-57696](https://bugreports.qt.io/browse/QTBUG-57696)\u003c/td\u003e \u003ctd\u003eBug\u003c/td\u003e \u003ctd\u003eBuild with Clang on Windows is broken (Qt 5.7.1)\u003c/td\u003e \u003ctd\u003eReported\u003c/td\u003e \u003ctd\u003e5.8.1\u003c/td\u003e \u003ctd\u003elow\u003c/td\u003e \u003ctd\u003e[Workaround](https://codereview.qt-project.org/#/c/180240/)\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e[QTBUG-57695](https://bugreports.qt.io/browse/QTBUG-57695)\u003c/td\u003e \u003ctd\u003eBug\u003c/td\u003e \u003ctd\u003eVisual Studio IDE only: [moc]{.title-ref} always regenerates all files even if nothing changed (Qt 5.8.0)\u003c/td\u003e \u003ctd\u003eFixed\u003c/td\u003e \u003ctd\u003e5.8.0\u003c/td\u003e \u003ctd\u003elow\u003c/td\u003e \u003ctd\u003e[Workaround](https://bugreports.qt.io/browse/QTBUG-57695)\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003eFeature\u003c/td\u003e \u003ctd\u003e[QJsonObject::insert]{.title-ref} and [operator[]]{.title-ref} not optimized for [QLatin1String]{.title-ref}\u003c/td\u003e \u003ctd\u003eReported\u003c/td\u003e \u003ctd\u003e{icon question}\u003c/td\u003e \u003ctd\u003ehigh\u003c/td\u003e \u003ctd\u003eFor JSON performance\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e[QTBUG-53031](https://bugreports.qt.io/browse/QTBUG-53031)\u003c/td\u003e \u003ctd\u003eBug\u003c/td\u003e \u003ctd\u003eWindows application deadlocks on exit when unloading a library connected to DBus\u003c/td\u003e \u003ctd\u003eFixed\u003c/td\u003e \u003ctd\u003e5.8.1\u003c/td\u003e \u003ctd\u003elow\u003c/td\u003e \u003ctd\u003eFixed in 5.6 but regressed again in 5.8.0\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e[QTBUG-51543](https://bugreports.qt.io/browse/QTBUG-51543)\u003c/td\u003e \u003ctd\u003eBug\u003c/td\u003e \u003ctd\u003e[QNetworkAccessManager]{.title-ref} spuriously becomes [NotAccessible]{.title-ref} on Windows, app must be restarted\u003c/td\u003e \u003ctd\u003eFixed {icon question}\u003c/td\u003e \u003ctd\u003e5.8.1\u003c/td\u003e \u003ctd\u003ehigh\u003c/td\u003e \u003ctd\u003eFix awaiting confirmation\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e[QTBUG-75361](https://bugreports.qt.io/browse/QTBUG-75361)\u003c/td\u003e \u003ctd\u003eBug\u003c/td\u003e \u003ctd\u003eStylesheets not applied to all widgets\u003c/td\u003e \u003ctd\u003eOpen\u003c/td\u003e \u003ctd\u003e5.12.4, 5.13\u003c/td\u003e \u003ctd\u003ehigh\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003c/table\u003e\n","excerpt":"\u003ctable\u003e \u003ctr\u003e \u003cth\u003eID\u003c/th\u003e \u003cth\u003eType\u003c/th\u003e \u003cth\u003eDescription\u003c/th\u003e …","ref":"/docs/knowhow/programming/qtbugs/","title":"Relevant known Qt bugs"},{"body":"You can reload the latest DB data with the context menu of the database tabs.\nYou can also refresh the DB data from the configuration wizard or pilot client\n","excerpt":"You can reload the latest DB data with the context menu of the …","ref":"/docs/manual/smt/mttabs/reloaddbdata/","title":"Reload DB data - force reload from backend"},{"body":"Duplicates Normally it does not make sense to keep more than one aircraft/livery combination in your set. You can find out more about your model coverage from the statistics, see tuningset{.interpreted-text role=\"ref”} .\nRemove duplicates You can remove duplicates from the model set context menu.\n Select your preferred distributor. \"Run\" -\u003e now you see a list of possible remove candidate in the list view. You could remove entries from that list if you like.   If you now press \"Ok\", the models from that list will be removed your set, however the changes are not saved yet. To finalize you need to \"Save\",  If you are unhappy with the changes, you can just \"refresh\" with the currently save data. This will discard the changes.\n","excerpt":"Duplicates Normally it does not make sense to keep more than one …","ref":"/docs/manual/swiftgeneral/modelsandmodelset/modelsetduplicates/","title":"Removing duplicates from a model set (reduce set)"},{"body":"Voice ATIS Voice ATIS (if available) behaves like any other ATC station\nText ATIC/METAR You can request METAR and ATIS from the ATC stations tab.\nConsider the tooltips if you do not know what a button means. swift provides useful tooltips in many cases.\n","excerpt":"Voice ATIS Voice ATIS (if available) behaves like any other ATC …","ref":"/docs/manual/spc/flightwithswift/metar/","title":"Requesting METAR, ATIS, voice ATIS"},{"body":"swift saves the screen size in order to restore size and location of its window. If you need to reset to a default location and size you can use\n select \"reset window\" in the launcher   alternatively press SHIFT + ALT during startup (you can try this first, it is the \"easiest\" solution) alternatively use the command line --resetsize or -r, like swiftguistd.exe --resetsize or delete the GUI settings. To find those check out for a line like \"GUI settings are here\" in the log. On Windows OS you find them here: \\HKEY_CURRENT_USER\\Software\\swift-project.org\\swift pilot client GUI You can also delete all registry entries from the launcher tools:  ","excerpt":"swift saves the screen size in order to restore size and location of …","ref":"/docs/manual/spc/settings/resetscreen/","title":"Reset the screen size"},{"body":"Reverse lookup means we use the mapping data (aka \"mappings\") to conclude from a model to ICAO data or. liveries. Normally we use ICAO data and livery information to find a model (this is called \"model matching\", see also mm{.interpreted-text role=\"ref”} ).\nIn reverse lookup we use the model string\n to fill in the flight plan fill in the login ICAO data  and send it to other swift clients, the other swift will lookup the correct ICAO and livery information from that model as those are more detailed and accurate\n as we can distinguish liveries, and not just airlines and also can distinguish virtual from real airlines, furthermore we can also use the color information for GA aircraft  ","excerpt":"Reverse lookup means we use the mapping data (aka \"mappings\") to …","ref":"/docs/manual/swiftgeneral/matching/reverselookup/","title":"Reverse lookup"},{"body":" Warning There is also a YouTube video about this, see here  Overview swift can be run distributed. That means the core (see swift core) and the GUI (swift front end) are split up. A normal scenario would be to run the core on the same machine where the flight simulator (e.g. XPlane) is started, and the UI runs on a second (remote) computer. However, you can also run core and (distributed) UI on the same machine.\nAs you can see in the launcher you have 3 options:\nStandalone: This means swiftguistd is running standalone and includes swift core. No other application needs to be started. Don't start swiftcore as extra process in that case.\nGUI and Core - Audio on GUI side: Use this configuration, if you want to run gui and core in separate applications (possibly also on two different machines in the network). All Audio (inkluding VATSIM voice) will stay within the GUI process.\nGUI and Core - Audio on Core side: Use this configuration, if you want to run gui and core in separate applications (possibly also on two different machines in the network). All Audio (inkluding VATSIM voice) will stay within the core process.\nHow to run swift on two different machines in the network Prerequisites  core and UI must be of the same version, do not mix different versions Both machines need a stable network connection and DBus connections between the two machines need to be possible (check firewall settings etc.)  Instructions  Launch swift launcher on core machine first. Select Core mode \"GUI and core\" depending on which machine you want audio. Select DBus peer to peer server and select the LAN IP interface from the combobox that is reachable from the GUI machine. For example 127.0.0.1 would not be reachable. 192.168.0.100 would be in some case. This is the IP core will be listening on. It is very important to not use session server in that case since session server is limited to local machine connections only. Launch swift launcher on GUI machine. Select t*he same core mode* as you selected on the core machine. Select again** DBus peer to peer server** and type in the LAN IP address you selected in step 2. GUI will try to connect now to core.  As an alternative, one can use linkcommand line arguments to setup shortcuts to launch GUI and core more quickly. swift launcher does the same (calling GUI and core process with specific arguments).\nWhat happens where?  model matching \"runs\" in the core, there your model set needs to reside GUI needs no model set, it will use the one from the core Core talks to the flight simulation network, so the connection from that machine to VATSIM (FSD server) needs to be enabled Core is connected to the simulator (e.g. by SimConnect, or XSwiftBus) Core and GUI talk to each other on the port set in the DBus settings (do NOT confuse this connection with the XSwiftBus connection) Audio can run on either side, and requires the AFV port enabled to the Internet  Simulator on a different machine As an alternative to running core on the simulator machine, one can also setup a connection to a simulator in local network.\nIn order to create the model set in those scenarios you need remote access (shared drive etc.) to the model directory.\nFSX/P3D swift using a remote SimConnect configuration: See here. This allows to connect a remote FSX/P3D from a standalone swift GUI.\nSo there are two ways to setup a distributed scenario\n Distributed swift UI on computer 1, swift core on computer 2 (where the simulator runs) and core using a local SimConnect connection. Standalone swift UI on computer 1, connected via a remote SimConnect to computer 2. No core!  FS9 You can also use WideFS for remote connection, and run swift as standalone GUI. Same as with SimConnect. Also the DirectPlay connection needs to be setup for remote access.\n","excerpt":" Warning There is also a YouTube video about this, see here  Overview …","ref":"/docs/manual/distributedswift/","title":"Running a distributed swift (remote core)"},{"body":"See also swiftuiconcepts{.interpreted-text role=\"ref”}\nIf a window is floating the state can be saved\nSuch a state can be later restored\n","excerpt":"See also swiftuiconcepts{.interpreted-text role=\"ref”}\nIf a window is …","ref":"/docs/manual/swiftgeneral/savewindow/","title":"Save Window"},{"body":"","excerpt":"","ref":"/search/","title":"Search Results"},{"body":"If you have created mappings you might wonder how you can see them:\n::: {.important} ::: {.title} Important :::\nNormal users creating change request have to wait before we accept the changes. Before that the are still invisible for you. :::\nNew DB data can always be downloaded via context menu (right mouse)\nIf you want to update your models or model set, try \"Consolidate\". This will go to the DB, check for new/changed data and update your entries.\n","excerpt":"If you have created mappings you might wonder how you can see them: …","ref":"/docs/manual/smt/seemymappings/","title":"See and use done mappings"},{"body":"By default your distro (hopefully) has read/write access to the input devices disabled on user accounts. If these were allowed it would be a tremendous security hole, as any user on the system could see every input event (including keyboard events such as you typing your banking password, etc).\nOne may be inclined to run swift as root, or to chmod 777 /dev/input/event*, however this is not advisable for the aforementioned reasons.\nThe approach we will take is to create an co`input` group, add yourself to it, and then create a udev rule that provides the necessary settings.\nCreating an Input Group This is simple stuff. Create a group and add yourself to it:\nsudo groupadd input sudo gpasswd -a username input Now log out of your shell, and log back in, so that you are part of the input group. You can verify that the change took place by running the groups command.\nCreating a udev Rule Unfortunately this may vary by distro, however the concepts will likely be exactly the same or highly similar - this method is known to be true for openSUSE. You need to locate the udev rules.d directory, which is usually in [/etc/udev/rules.d]{.title-ref}. Next create a rule file for the input device nodes. Your distro may already have a rule file for this purpose, however we still want to create our own since their file may get replaced during a distro upgrade. Make sure that the new file has a priority higher than that of any other file with an event rule in it. For example as root, create the file `/etc/udev/rules.d/99-input.rules`:\nKERNEL==\"event*\", NAME=\"input/%k\", MODE=\"660\", GROUP=\"input\" KERNEL==\"js*\", NAME=\"input/%k\", MODE=\"664\", GROUP=\"input\" In Ubuntu, you need to add colons like this:\nKERNEL==\"event*\", NAME=\"input/%k\", MODE:=\"660\", GROUP=\"input\" KERNEL==\"js*\", NAME=\"input/%k\", MODE:=\"664\", GROUP=\"input\" Then you just need to reload udev rules so that the permissions get updated.\nudevadm control --reload-rules udevadm trigger Note that on my system, reloading udev had no effect. I ended up having to reboot, which did the trick. If anyone knows of a way to make the changes take place without a reboot, please fix this section!\nNow check the permissions on /dev/input/event* and verify that the group ownership on the device nodes are set to `input`:\n$ ls -al /dev/input/ total 0 drwxr-xr-x 4 root root 440 Jun 6 12:32 . drwxr-xr-x 21 root root 4480 Jun 10 09:00 .. drwxr-xr-x 2 root root 120 Jun 6 12:32 by-id drwxr-xr-x 2 root root 140 Jun 6 12:32 by-path crw-rw---- 1 root input 13, 64 Jun 10 09:00 event0 crw-rw---- 1 root input 13, 65 Jun 10 09:00 event1 crw-rw---- 1 root input 13, 74 Jun 10 09:00 event10 crw-rw---- 1 root input 13, 75 Jun 10 09:00 event11 crw-rw---- 1 root input 13, 76 Jun 10 09:00 event12 crw-rw---- 1 root input 13, 77 Jun 10 09:00 event13 crw-rw---- 1 root input 13, 78 Jun 10 09:00 event14 crw-rw---- 1 root input 13, 79 Jun 10 09:00 event15 crw-rw---- 1 root input 13, 66 Jun 10 09:00 event2 crw-rw---- 1 root input 13, 67 Jun 10 09:00 event3 crw-rw---- 1 root input 13, 68 Jun 10 09:00 event4 crw-rw---- 1 root input 13, 69 Jun 10 09:00 event5 crw-rw---- 1 root input 13, 70 Jun 10 09:00 event6 crw-rw---- 1 root input 13, 71 Jun 10 09:00 event7 crw-rw---- 1 root input 13, 72 Jun 10 09:00 event8 crw-rw---- 1 root input 13, 73 Jun 10 09:00 event9 crw-r----- 1 root root 13, 63 Jun 10 09:00 mice crw-r----- 1 root root 13, 32 Jun 10 09:00 mouse0 ","excerpt":"By default your distro (hopefully) has read/write access to the input …","ref":"/docs/troubleshooting/linuxinputdevicepermissions/","title":"Setting input device permissions / Creating an udev rule"},{"body":"::: {.important} ::: {.title} Important :::\nAfter changing the version restart swift :::\nSince swift 0.8.7 it is possible to set the correct P3D version in the driver settings.\n Relevant for the 64bit version only, NOT the 32bit legacy FSX version We intend to support the latest 2-3 P3D versions After changing the version swift requires a restart  ","excerpt":"::: {.important} ::: {.title} Important :::\nAfter changing the version …","ref":"/docs/manual/spc/settings/p3dversion/","title":"Setting the correct P3D version (x64 only)"},{"body":"Pilot client settings\nYou can get to the settings page via the \"settings\" button. Two important hints:\n the pages have shortcuts, check them out by reading the tooltip pressing SHIFT {key SHIFT} + settings will always get you to the overview page  Settings:\n configuresim{.interpreted-text role=\"ref”} , also to configure max. aircraft to be shown/max. distance of aircraft to be shown, see aircraftrange{.interpreted-text role=\"ref”} audio{.interpreted-text role=\"ref”} , see also notificationsounds_spc{.interpreted-text role=\"ref”} hotkeys{.interpreted-text role=\"ref”} remoteptt{.interpreted-text role=\"ref”} matchingsettings{.interpreted-text role=\"ref”} [interpolationsettings{.interpreted-text role=\"ref”} weathersettings{.interpreted-text role=\"ref”} simmessages{.interpreted-text role=\"ref”}  XPlane:\n xswiftbussettings{.interpreted-text role=\"ref”}  P3D/FSX:\n sbareasettings{.interpreted-text role=\"ref”} p3dversion{.interpreted-text role=\"ref”}  ::: {.toctree caption=\"Content in this chapter”} remoteptt aircraftrange configuresim hidecallsign interpolationsettings matchingsettings maxaircraft notificationsounds resetscreen p3dversion sbareasettings simmessages modeldirectories weathersettings xplanedriversettings xswiftbussettings :::\n","excerpt":"Pilot client settings\nYou can get to the settings page via the …","ref":"/docs/manual/spc/settings/","title":"Settings (pilot client)"},{"body":"What is the bootstrap file? The bootstrap file contains fundamental setup information for swift. Without those data swift cannot work properly. Normally the data are loaded / updated from the internet each time swift starts, in case no connection can be established at this very moment cached data are used.\nThe bootstrap resolution screen If the bootstrap file cannot be loaded a resolution screen is displayed. Possible reasons why bootstrap file loading might fail are:\n typo in the URL swift servers are down (please understand we keep copies of the file at multiple locations) network problem on user's side if the bootstrap file has been loaded before the locally stored (cached) version is used if the user provides an explicit URL (command line) only this URL is used  Options to resolve the problems\n ignore the bootstrap URL and hence use the cached data (requires at least one successful load before that) use the local file copy (from the swift installer) use the cache file of another swift installation  ","excerpt":"What is the bootstrap file? The bootstrap file contains fundamental …","ref":"/docs/troubleshooting/bootstrapfile/","title":"Setup data / bootstrap file"},{"body":"Shared State BlackMisc::SharedState is a hierarchical library of reusable building blocks for composing subsystems for sharing transient data between objects, potentially in different processes.\nEndpoint Layer The middle layer contains the mutators and observers. Mutators and observers correspond to commands and queries in the CQRS design pattern. Mutators and observers can be passive and/or active, as seen in this 2x2 matrix:\n     Passive Active     Mutator publishes events handles requests   Observer subscribes events submits requests    Events are fire-and-forget signals sent by passive mutators and received by passive observers. Requests are stateful signals that expect replies; requests are sent by active observers and received by active mutators, which send replies back to the observers that sent the requests.\nEvents and requests are sent across “channels”. Each channel can have multiple mutators and multiple observers. Each mutator and each observer is on exactly one channel. For an observer to communicate with a mutator, they must both be on the same channel. Conceptually, a channel is just a unique key string.\nThese concepts are implemented by concrete QObject subclasses: CPassiveMutator, CPassiveObserver, CActiveMutator, CActiveObserver. Instances of these classes are created by calling their static create() method, which returns a QSharedPointer pointing to the new object. Their channel is determined by the BLACK_SHARED_STATE_CHANNEL macro in the class of their parent object, combined with the name of their parent object.\nTransport/Datalink Layer The middle layer is completely decoupled from the mechanism for transporting events and requests. This mechanism is the responsibility of the bottom layer. IDataLink is an abstract interface that is implemented by concrete subclasses to provide different transport mechanisms. A mutator is connected by passing it to the IDataLink::publish method. An observer is connected by passing it to the IDataLink::subscribe method.\nContent/Subject Layer The middle layer is also completely decoupled from the payloads carried by the events, the requests, and the replies, which are handled by the top layer. A payload is a CVariant, and its contents are opaque to the mutators and observers. It is for the parent objects of the mutators and observers to confer meaning upon the events and requests that they send and receive.\nReferences  CQRS design pattern:  http://codebetter.com/gregyoung/2010/02/16/cqrs-task-based-uis-event-sourcing-agh/ http://cqrs.nu/Faq/command-query-responsibility-segregation http://martinfowler.com/bliki/CQRS.html    Endpoints Diagram ","excerpt":"Shared State BlackMisc::SharedState is a hierarchical library of …","ref":"/docs/dev/sharedstate/","title":"Shared State"},{"body":" In general all models in the model set should have a DB entry, only those have correct data assigned   The default matching settings even ignore the models without DB entries  However, there can be reasons where it make sense to include non DB models. If you write your own matching script, then you might want to use raw models (see ms{.interpreted-text role=\"ref”} ) .\nTo use models without DB data, see matchingsettings{.interpreted-text role=\"ref”} .\n","excerpt":" In general all models in the model set should have a DB entry, only …","ref":"/docs/manual/swiftgeneral/modelsandmodelset/nodbdata/","title":"Should I use models without DB data in my model set?"},{"body":"Using the SB4 offsets In order to synchronize your transponder (XPDR) ident and mode values with swift, you need to enable the SB area (event though your client is swift). Also the feature needs to be enabled by your aircraft, as PMDG or Leonardo do.\nIf you want to see if you receive data from the SB4 offsets you can use. You can see if the SB4 are is enabled and if data are received. Once data are received packets is \u003e 0 and increasing.\nTesting SB4 offsets If you want to test the SB4 offsets you can send them via FSUIPC keys for testing. Do NOT get that wrong, you do not FSUIPC for the SB4 XPDR area, but you can use FSUIPC if you want to test swift SB4 integration.\n","excerpt":"Using the SB4 offsets In order to synchronize your transponder (XPDR) …","ref":"/docs/manual/spc/settings/sbareasettings/","title":"SimConnect SB4 offsets settings (P3D/FSX XPDR synchronization)"},{"body":"swift uses 4 altitude related values\n Elevation (scenery elevation) Scenery altitude, aka true altitude Scenery AGL, altitude above ground Pressure altitude see also altitude{.interpreted-text role=\"ref”}  FSX/P3D SimConnect variables http://msdn.microsoft.com/en-us/library/cc526981.aspx SimConnect events http://msdn.microsoft.com/en-us/library/cc526980.aspx P3D vars http://www.prepar3d.com/SDKv3/LearningCenter/utilities/variables/simulation_variables.html\n SimConnect_AddToDataDefinition(hSimConnect, CSimConnectDefinitions::DataOwnAircraft, \"PLANE ALTITUDE\", \"Feet\") SimConnect_AddToDataDefinition(hSimConnect, CSimConnectDefinitions::DataOwnAircraft, \"PLANE ALT ABOVE GROUND\", \"Feet\") SimConnect_AddToDataDefinition(hSimConnect, CSimConnectDefinitions::DataOwnAircraft, \"PRESSURE ALTITUDE\", \"Meters\") SimConnect_AddToDataDefinition(hSimConnect, CSimConnectDefinitions::DataOwnAircraft, \"GROUND VELOCITY\", \"Knots\") SimConnect_AddToDataDefinition(hSimConnect, CSimConnectDefinitions::DataOwnAircraft, \"GROUND ALTITUDE\", \"Feet\") SimConnect_AddToDataDefinition(hSimConnect, CSimConnectDefinitions::DataOwnAircraft, \"SIM ON GROUND\", \"Bool\")  Although documentation says the indicated altitude is send as pressure altitude, changing the QNH (altimeter know) does not have any effect. Also failures have no effect.\nQNG: Hg 29,92 (1013,20mbar)\nChanging weather to thunderstorms, Hg 29,21 (989,2mbar) Pressure altitude changes from 320 to 1026ft\nFSUIPC  Ground altitude: FSUIPC_Read(0x0020, 4, \u0026groundAltitudeRaw, \u0026dwResult) Altitude: FSUIPC_Read(0x0570, 8, \u0026altitudeRaw, \u0026dwResult) Pressure altitude: FSUIPC_Read(0x34B0, 8, \u0026pressureAltitudeRaw, \u0026dwResult)  Flightgear - True altitude from FG property /position/altitude-ft - Pressure altitude from FG property /instrumentation/altimeter/pressure-alt-ft. When /instrumentation/altimeter/servicable == false, as fallback the true altitude /position/altitude-ft is send.\n","excerpt":"swift uses 4 altitude related values\n Elevation (scenery elevation) …","ref":"/docs/knowhow/simandinterpolation/simalts/","title":"Simulator altitudes"},{"body":"Why do we need the elevation? Having the real elevation in the used simulator with the used scenery we can\n calculate the AGL (\"above ground\") avoid model underflows, see also ongroundscenarios{.interpreted-text role=\"ref”} xivapclamp{.interpreted-text role=\"ref”}  There are 2 general concepts From 0.8.4 onward we use \"probing\" for all incoming network positions (likely to be \"near gnd. relevant\")\n  Probing the elevation at a given position (like we do it for XPlane, since 0.8.4. also possible with P3D/FSX)\n  Pro: Accurate elevation at a given position Con: \"Slow\" (means slow in the context of interpolation)     Using the elevation at the current AI (remote) aircraft position (as in P3D, FSX)\n  Pro: Fast, as it can be retrieved in the SimConnect loop Con: Only at the current (interpolated) position, not at the next or previous situation     see also openresearch{.interpreted-text role=\"ref”}\n","excerpt":"Why do we need the elevation? Having the real elevation in the used …","ref":"/docs/knowhow/simandinterpolation/simelevation/","title":"Simulator elevation"},{"body":"Simulator settings control which messages are shown in the simulator window (in simulator).\n this requires the attached simulator has a simulator window the way how the messages are displayed may vary from simulator to simulator  ","excerpt":"Simulator settings control which messages are shown in the simulator …","ref":"/docs/manual/spc/settings/simmessages/","title":"Simulator messages (messages relayed to simulator)"},{"body":"The model directories can be configured under simulator settings here:\n you can change these settings in the pilot client, mapping tool and the launcher note the grayed out entries, in the settings, these are the values use if you DO NOT change (override) those, the default values are used changing the values here does NOT automatically update the model list and model set, the new values are affecting the paths in the model set when you re-create it. See createms{.interpreted-text role=\"ref”} . See modelsetandsettings{.interpreted-text role=\"ref”} XPlane example: xpmodeldirectories{.interpreted-text role=\"ref”}  ","excerpt":"The model directories can be configured under simulator settings here: …","ref":"/docs/manual/spc/settings/modeldirectories/","title":"Simulator model directories"},{"body":"Simulator Weather Scope This page collects different information regarding weather creation and injection into an arbitrary simulator. The first version is a collection of information which was gathered over the last couple of weeks/months. It contains weather and METAR sources, API information and techniques required to implement a sophisticated weather engine. For the time being this page is a central place to store and share knowledge.\nRoadmap Currently a very basic and simple version of a weather engine is implemented in swift. We do not plan to implement a sophisticated weather engine, but a simple one for those who have no other engine.\nYou can enable/disable swift weather from settings{.interpreted-text role=\"ref”} .\nWeather Sources The following real weather sources exist and can be used to retrieve real time data. They are listed in the order of priority how they should be used.\nGlobal Forecast System (GFS) Model The Global Forecast System (GFS) is a global numerical weather prediction system containing a global computer model and variational analysis run by the US National Weather Service (NWS).\nThe mathematical model is run four times a day, and produces forecasts for up to 16 days in advance, but with decreased spatial resolution after 10 days. The forecast skill generally decreases with time (as with any numerical weather prediction model) and for longer term forecasts, only the larger scales retain significant accuracy. It is one of the predominant synoptic scale medium-range models in general use.\nGFS products are available for any position on earth and can be retrieved via http://www.nco.ncep.noaa.gov/pmb/products/gfs/. This turns it into a perfect weather source candidate for areas with no ICOA stations available (areas above the oceans, etc.)\nVATSIM METAR It is generally possible to query the METAR string for a given ICAO airport. METAR is only valid for a small area around the airport and has a lot less information compared to the layers described above.\n### VATSIM Weather\nVATSIM server provide the ability to request detailed weather information for ICAO stations around the globe. On request it will provide the following information.\nWind Data (4 layers):\n .Ceiling .Floor .Direction .Speed .Gusting .Turbulence\n Cloud Data (2 layers):\n .Ceiling .Floor .Coverage .Icing .Turbulence\n Cloud Data (4 layers):\n .Ceiling .Temperature\n !!This data is produced from a simple extrapolation from the airport METAR. It is therefore very inaccurate and usage is not recommended.!!\nSimulator Interfaces Microsoft Flight Simulator Family The Microsoft Flight Simulator family offers several ways to inject used defined weather into the simulator.\nFSUIPC - New Weather Interface (FSX and FS2004): The NWI allows to write weather details per station into the simulator. Usually you should set GLOB weather first and then every ICAO station in the range of 40 nm.\nhttp://www.schiratti.com/dowson.html\nSimConnect (FSX): SimConnect allows to set weather per station via an extended METAR string. https://msdn.microsoft.com/en-us/library/cc526983.aspx\\#SimConnect\\_WeatherSetObservation\nWeather Theme Files (FSX and FS2004): Weather theme files (WTB) are binary files which contain a very detailed description of the weather around the user aircraft. It is independent from any ICAO station. In the first place weather theme files were used to save used defined weather, created inside the simulators itself. The user was able to setup a scenario on his own and load it. Actually all saved conditions (CAVOK, storm, etc.) which you can choose when starting MSFS are stored as WTB files. The FS2004 Weather Themes Software Development Kit is a Visual Basic application which allows the user to also setup weather scenarios outside of MSFS. Luckily both simulators - FSX and FS2004 - support these WTB files and even better they can be loaded at runtime via FSUIPC (TBC) and SimConnect ([SimConnect_WeatherSetModeTheme]{.title-ref}). This files can be created and loaded by any external application and then loaded into FS. The file format is proprietary but is successfuly reversed engineered and a library to read and write these files is available ([libwtb]{.title-ref} - written by me, so we have full control).\nX-Plane DataRefs (X-Plane): The weather in X-Plane can be configured via the datarefs in sim/weather/. Unfortunately it does have only 1D vertical layers, which means you can configure only global weather with different altitude layers.\n Reference Implementation    XplaneNoaaWeather A python based X-Plane weather plugin licensed under GPLv2.   ","excerpt":"Simulator Weather Scope This page collects different information …","ref":"/docs/knowhow/simandinterpolation/simulatorweather/","title":"Simulator weather, where does the swift weather come from?"},{"body":"","excerpt":"","ref":"/docs/knowhow/simandinterpolation/","title":"Simulator, interpolation, and matching"},{"body":"Clarification  all swift code written by the swift team is licensed as GPLv3 The vatlib for the VATSIM network is closed source. It requires a NDA with VATSIM if you want to see that code In order to connect to VATSIM servers you need your own VATSIM client key. You have the following options:  you can build and run swift with your own FSD servers, or you can ask VATSIM for your own key, or you can join the swift team and participate - by that you will use our key.   Furthermore swift uses it own database for model matching (i.e. datastore model metadata, no model objects). We allow VATSIM users and smaller FSD server operators to use the Web Services for those cases. If you want to use swift on your network please ask us for permission to download from these web services, or run your own server. All data in the swift database are property of the swift team.  All swift software programs are licensed under the GPL v3 license. You can find the details here\nThe following terms apply to all swift programs:\nswift pilot client suite Copyright (C) 2016, 2017, 2018 swift Team This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses/. and\nswift pilot client suite Copyright (C) 2016, 2017, 2018 swift Team This program comes with ABSOLUTELY NO WARRANTY; for details see see here https://datastore.swift-project.org/page/legal.php. This is free software, and you are welcome to redistribute it under certain conditions; for details see here https://datastore.swift-project.org/page/legal.php. For the copyright of our data (ie. the data in the database and caches) see the terms here. ","excerpt":"Clarification  all swift code written by the swift team is licensed as …","ref":"/docs/legal/software_license/","title":"Software License"},{"body":" TODO Need examples.  Style Conventions Whitespace and Minutiae   Indent with 4 spaces. Don't use tabs.\n  Don't indent braces. Indent code inside braces.\n  Put braces on a separate line.\n  Exception: closing brace of a lambda, braced-initializer, or do while block hugs the code on its right side. Exception: braces surrounding a braced-initializer or a single-statement block can go all on a single line.     When braces are not on a separate line, put a space between them and adjacent tokens.\n  No spaces around parentheses, square brackets, or angle brackets.\n  Put a space after a compound statement keyword (if, for, while, etc.) and its opening parenthesis.\n  Always use braces in a compound statement, even if they only enclose zero or one statement. (This helps avoid terrible mistakes.)\n  Put a space between a binary operator and its operand. No space between a unary operator and its operand.\n  When declaring a pointer or reference, put a space before the * or \u0026.\n  Write const char not char const\n  Naming  Use camel case. Namespaces, classes, and enums start with a capital letter. Functions and variables starts with a lower-case letter. Classes begin with a C, except traits classes which begin with a T. Data members begin with m_. Static data members begin with s_. Const static data members begin with c_. Avoid underscores elsewhere. Use American English spelling.  Documentation   Use //! and /*! style Doxygen comments.\n  Each header and source file has a //! \\file.\n  Document classes and non-member functions with /*!. Document members with //!.\n  Document everything that is public or protected.\n  Exception: it is not necessary to document a function that overrides a documented virtual function.     Use \\cond, \\private, or \\internal for undocumented implementation details at namespace scope.\n  Use \\copydoc to avoid duplication.\n  Tooling  astyle can be used with the following options:  --style=allman --indent=spaces=4 --indent-cases --indent-namespaces --indent-labels --indent-preprocessor --min-conditional-indent=2 --pad-oper --pad-header --unpad-paren --keep-one-line-blocks --keep-one-line-statements --convert-tabs --align-pointer=name Coding Standard Basics  Headers have include guards that are uppercase transformations of the header path with non-alphanumeric characters transformed to underscores. Include all needed headers before any substantive line of code. Include files in order from most specific to most generic. The first header included in a source file must be its corresponding header file. Include swift headers with #include \"\". Include other headers with #include \u003c\u003e. Always use the full path of swift headers. Use forward-declaration to avoid excessive includes. Don't using namespace in headers. Don't optimize prematurely. Don't pessimize prematurely. Utilize Qt and the standard library liberally. Prefer Qt containers. Use the Qt5 pointer-to-member syntax for connecting signals to slots. Respect const correctness. Avoid top-level const on by-value parameter types and return types of function declarations. Fix all compiler warnings. Pass small, trivial arguments by value. Pass large or non-trivial arguments by const reference. Don't allow uninitialized variables. Use RAII effectively. Use C++ features that are supported by all of our compilers (currently all of C++11 and 14). Don't use NULL. Use nullptr instead. Use auto at your discretion. Use override when overriding a virtual function. Don't use dynamic_cast or C-style casts. Avoid global variables. Static member variables are global variables.  Class Design  Avoid excessive coupling. Follow SOLID principles. Favor simplicity. Follow the rule of three/five/one/zero. A constructor should be explicit if it does anything more than just initialise members from arguments. If a class has a virtual function, its destructor must be virtual or protected. Avoid long-distance friends. Self-assignment must be safe. mutable imposes a responsibility to ensure thread-safety. Avoid virtual functions in class templates. They cause long compile times. If they are implemented, move and swap must be noexcept if possible.  Error Handling  Report errors and warnings to the user with CLogMessage and CStatusMessage. Be exception-agnostic. Avoid throwing exceptions in general, except for particular use cases where they are well suited. Validate data coming from outside the executable. Use Q_ASSERT to document and enforce unrecoverable logical invariants. Use BLACK_VERIFY to document and enforce recoverable logical invariants.  Strings TODO Missing sections  ","excerpt":" TODO Need examples.  Style Conventions Whitespace and Minutiae …","ref":"/docs/dev/style/","title":"Style and Coding Standard"},{"body":" For //swift //+ FS9 FSUIPC is required (mandatory) For //swift //+ FSX/P3D is normally not needed and optional (you could use it to query XPDR state/ident). but normally the SimConnect SB4 synchronization should already work, see sbareasettings{.interpreted-text role=\"ref”}  ","excerpt":" For //swift //+ FS9 FSUIPC is required (mandatory) For //swift //+ …","ref":"/docs/manual/spc/fsuipc/","title":"swift and FSUIPC"},{"body":"swift over network with FS9\nExternal link: http://757simulator.com/FS2004/swift.htm\n","excerpt":"swift over network with FS9\nExternal link: …","ref":"/docs/manual/swiftgeneral/fs9remote/","title":"swift and remote FS9"},{"body":"See also:\n nonotification{.interpreted-text role=\"ref”} notificationsounds_spc{.interpreted-text role=\"ref”} troubleshootvoice{.interpreted-text role=\"ref”}  Audio settings Audio settings to select devices and notification sounds\n","excerpt":"See also:\n nonotification{.interpreted-text role=\"ref”} …","ref":"/docs/manual/spc/audio/","title":"swift audio"},{"body":"seel also swiftdevcmdargs{.interpreted-text role=\"ref”}\nRunning with core  Starting core on session bus: --dbus session Client: --core coreexternalaudiogui --window normal --dbus session  Launcher display cmd. args Just press shift and the corresponding icon to display the command line arguments instead of starting the application.\nHelp Just use --help to see a help screen. You can use \"help\" with all executables, as launcher, core and client might have different arguments.\n","excerpt":"seel also swiftdevcmdargs{.interpreted-text role=\"ref”}\nRunning with …","ref":"/docs/manual/swiftgeneral/swiftcmdargs/","title":"swift command line arguments"},{"body":"see also distributedswift{.interpreted-text role=\"ref”}\nThe swift core   the swift core is containing the central pilot client functionality\n  connect to the network (e.g. VATSIM, local FSD server etc.) connect to the simulator (via a plugin driver) doing the model matching voice connectivity     Operations:\n  The swift pilot client can be run as one executable together with the UI (core included) or the core runs independently from the UI (2 executables), interacting with the UI via DBus     ","excerpt":"see also distributedswift{.interpreted-text role=\"ref”}\nThe swift core …","ref":"/docs/manual/spc/core/","title":"swift core"},{"body":"::: {.important} ::: {.title} Important :::\nIt is a good idea to enable crash dumps, crashreports{.interpreted-text role=\"ref”} :::\nJoystick We have had cases where loading joystick data caused swift to crash. Reason unknown so far. Solution: Try to unplug the joystick and see if it works now\nWindow locations Changes in your UI setup (new graphics card) can cause the stored windows sizes etc. being invalid. Delete those data as described here: resetscreen{.interpreted-text role=\"ref”} .\n","excerpt":"::: {.important} ::: {.title} Important :::\nIt is a good idea to …","ref":"/docs/manual/swiftgeneral/crashafterstartup/","title":"swift crash after startup"},{"body":"see also swiftcmdargs{.interpreted-text role=\"ref”}\nHelp Just use --help to see a help screen. You can use \"help\" with all executables, as launcher, core and client might have different arguments.\nTesting as developer Normally done like this: --dev --bootstrapurl https://datastore.swift-project.org/shared/\n Marking as dev. provides some extra functionality The bootstrap location can also be changed to a test server  Test the dump server: --testcrashpad\nInstallers Installer cmd. line: -i --bootstrapurl https://datastore.swift-project.org/shared/\n bootstrap URL is mandatory use installer mode [-i]{.title-ref} to launch wizard  Testing pilot client with VATSIM live servers ::: {.note} ::: {.title} Note :::\nInstaller versions are automatically enabled for VATSIM productive keys. :::\n Testing interpolation / aircraft parts    Use swift as \"out of the box\" Any productive servers can be used Works with our without simulator attached Voice cannot be tested (no connection allowed)   # Testing swift as we will ship it\n  Set client id and key, cmd will look something like this:   --serverType vatsim --clientIdAndKey 0xFOO:BAR --dev --bootstrapurl https://datastore.swift-project.org/shared/`\n","excerpt":"see also swiftcmdargs{.interpreted-text role=\"ref”}\nHelp Just use …","ref":"/docs/manual/swiftgeneral/swiftdevcmdargs/","title":"swift developer command line arguments"},{"body":"For some people swift only works with session bus on MacOS.\nReason: UNKNOWN, if you figure it out - let us know!\nReported for: Mac OS 10.15.4\nHere it is shown how to switch to session bus:\nIn the launcher:\n","excerpt":"For some people swift only works with session bus on MacOS.\nReason: …","ref":"/docs/troubleshooting/noconnectonmac/","title":"swift does not connect with XPlane on MacOS (session bus, P2P)"},{"body":"swift can be used in a shared cockpit scenario, with one pilot flying as co-pilot\n the primary pilot will fly with the normal callsign in NORMAL mode the secondary pilot needs to add an extra character to the callsign and will use the OBS mode  Explanation:\n the 1st pilot will be shown as normal for everyone. using the OBS prevents the 2nd pilot (co-pilot) to be shown. the callsign hack prevents the primary pilot to be shown in the co-pilot's simulator.  Remark: another way to disable a particular aircraft from being shown in swift is to disable it in the model view (context menu). This should not be required if the callsign is correct.\nPartner callsign You can add a partner callsign to receive text message for your co-/pilot. See advloginscreen{.interpreted-text role=\"ref”} .\nTroubleshooting If you see your \"co-pilot\" following your plane then most likely the 2 callsigns are NOT set as described above.\n","excerpt":"swift can be used in a shared cockpit scenario, with one pilot flying …","ref":"/docs/manual/spc/flightwithswift/sharedcockpit/","title":"swift in a shared cockpit (co-pilot observer OBS mode)"},{"body":"If you want to keep two versions of Prepar3D for online flying, a second swift can be installed so both P3D versions can co-exists and have independent model sets. This has been tested with swiftinstaller-window-64-0.9.4.276 with P3Dv4.5 and swiftinstaller-window-64-0.9.4.366 for P3Dv5 with Hotfix1.\n  Install a second swift by using different installation locations (directories). For example swift-0.9.4-64bit_P4 and swift-0.9.4-64bit_P5.\n  If you want to use the FLAi models for model matching:\n  Copy the folder FLAi with the add-on.xml from Documents-Prepar3Dv4 Add-ons to Documents-Prepar3Dv5 Add-ons. Note: This is using the existing FLAi package on your computer, no new download necessary.     For the new second swift installation for P3Dv5:\n  Start swift Launcher - Mapping Tool and create a new model set and press save P3D Ensure the correct path to the P3D version, this is set in: Settings-\u003e Simulator basics. If necessary set it manually to P3Ddv4 for the first and P3Dv5 for the second one.     To distinguish between the two swift versions, create swiftguist.exe links on the desktop, such as swiftguist.exe Pv4.5 and the other one swiftguist.exe Pv5.\n  ","excerpt":"If you want to keep two versions of Prepar3D for online flying, a …","ref":"/docs/installation/p3d/p3dv5/","title":"swift installation with P3Dv4 and P3Dv5 versions in parallel"},{"body":"CFlightPlan directly { \"aircraftIcao\": { \"combinedType\": \"L2J\", \"dbKey\": 5631, \"designator\": \"F22\", ... }, \"route\": \"\", \"takeoffTimeActual\": \"\", \"takeoffTimePlanned\": \"Di Nov 13 23:47:00 2018 GMT\", \"timestampMSecsSinceEpoch\": -1 } [CVariant]{.title-ref} format { \"type\": \"BlackMisc::Aviation::CFlightPlan\", \"value\": { \"aircraftIcao\": { \"combinedType\": \"L2J\", \"voiceCapabilities\": { \"voiceCapabilities\": 2 } }, \"route\": \"\", \"takeoffTimeActual\": \"\", \"takeoffTimePlanned\": \"Mo Nov 12 23:47:00 2018 GMT\", \"timestampMSecsSinceEpoch\": -1 } } Cache format { \"lastserver\": { \"type\": \"BlackMisc::Network::CServer\", \"value\": { \"address\": \"fsd.swift-project.org\", \"description\": \"Client project testserver\", ... } } } === Container format ===\ntbw.\n","excerpt":"CFlightPlan directly { \"aircraftIcao\": { \"combinedType\": \"L2J\", …","ref":"/docs/knowhow/programming/swiftjsonformats/","title":"swift JSON formats"},{"body":"You can start the configuration wizard from the launcher. Normally the configuration wizard will be launched when the installer finishes. The configuration wizard allows you to set default values for the most important setting values and download the DB data.\nYou can copy data from other swift versions via the launcher -\u003e [wizard]{.title-ref}\nCopy settings copyswiftdata{.interpreted-text role=\"ref”}\n","excerpt":"You can start the configuration wizard from the launcher. Normally the …","ref":"/docs/manual/spc/launcher_wizard/","title":"swift launcher wizard"},{"body":" role meaning\n alpha can access alpha program downloads\nbulk can perform direct uploads from swift mapping tool\nmapping admin can create new liveries, aircraft ICAOs, airline ICAOs ","excerpt":" role meaning\n alpha can access alpha program downloads\nbulk can …","ref":"/docs/manual/datastore/mappingroles/","title":"swift mapping roles"},{"body":"You will find the consolidation context menu on the model set and own models tab. See the screenshots below.\n  See also: whydataconsolidation{.interpreted-text role=\"ref”}\n  Consolidation with DB data means, that the latest DB data on your disk (you can use the launcher to update those files) will be used and merged with your model or model set data. This is useful whenever new DB data are available.\n  Hint : When you start the mapping tool the latest DB data will always be downloaded Another way to obtain the DB data is with the launcher, see launcher{.interpreted-text role=\"ref”} You can keep your mapping tool data up to date while working with the backupdate{.interpreted-text role=\"ref”}     Consolidation with \"own models\" data means that the latest data from your own models installed will be merged with the data in the model set. This is required only when the model data on your disk change.\n  ","excerpt":"You will find the consolidation context menu on the model set and own …","ref":"/docs/manual/smt/consolidation/","title":"swift mapping tool data consolidation"},{"body":" Problem: ASSERT after starting swift  Solution: resetscreen{.interpreted-text role=\"ref”}\n","excerpt":" Problem: ASSERT after starting swift  Solution: …","ref":"/docs/manual/swiftgeneral/notstarting/","title":"swift not starting, ASSERT after start"},{"body":"swift pilot client aircraft views There are two aircraft views. * One named \"aircraft in range\". This is a network (e.g. VATSIM, ..) focused view. It shows aircraft in the airspace, their distance and pilot * The \"models\" view: This view focus on the aircraft models in the simulator, the rendering (if displayed in simulator), the model matching\nswift pilot client \"aircraft in range\" Shows network aircraft, airports in range.\nswift pilot client model view The rendering view contains a lot of information. Therefor the screenshot is split into a left and a right part.\n{F9443}\n e/r shows if the aircraft is enabled (you can disable an aircraft) and if the aircraft is rendered (shown) in the simulator. If an aircraft is not rendered this either means a problem with model in the simulator, or the adding-to-simulator operation is still pending. p means aircraft parts are supported to transfer light, flap, spoiler data. fp means fast position updates are enabled   aircraft shows how the model is matched, an = sign means an exact match, otherwise it is shown what is used instead e.g. B737-\u003eB735 livery shows how the livery is matched  Manually change model You can manually assign a model for a given aircraft. See manualchangemodel{.interpreted-text role=\"ref”}\n","excerpt":"swift pilot client aircraft views There are two aircraft views. * One …","ref":"/docs/manual/spc/flightwithswift/aircraftviews/","title":"swift pilot client aircraft views"},{"body":" dataprovisioning{.interpreted-text role=\"ref”} mm{.interpreted-text role=\"ref”} (fundamentals) matchmsg{.interpreted-text role=\"ref”} matchingresult{.interpreted-text role=\"ref”} modelset{.interpreted-text role=\"ref”} createms{.interpreted-text role=\"ref”} aircraftviews{.interpreted-text role=\"ref”} matchinghints{.interpreted-text role=\"ref”} modelsetinclient{.interpreted-text role=\"ref”}  ","excerpt":" dataprovisioning{.interpreted-text role=\"ref”} mm{.interpreted-text …","ref":"/docs/manual/spc/spcmm/","title":"swift pilot client model matching"},{"body":"Detached message window You can detach the message window (like any other window)\nOverlay messages From the ATC and cockpit view you can use overlay text messages directly in the window\nPrivate message buttons You can use the private message buttons to send private messages to the closest ATC stations\nConfigure text messages  Defining which text messages are relayed to the simulator   Defining which text messages are shown as overlay in the client   Set focus as wanted  Disable overlay messages Disable all checkboxes for overlay messages\nText message views Normally you have text views for each radio channel and/or private text messages. The UNICOM and COM1/2 channels are permanent while the private channels can be closed.\nThat leads us to the role of the ALL view. This is a sortable table view (and no HTML text view as the other ones). It's role is different: It can help you to find a message again if you have already closed the private message tab or you do not know where it was.\nIf you do not know how to resize the columns we recommend the \"UI tips and tricks\" pctutorials{.interpreted-text role=\"ref”}\nHint: You can use the tooltip to see longer messages .. image:: http://img.swift-project.org/longmessage.png\nRelay messages to simulator simmessages{.interpreted-text role=\"ref”}\n","excerpt":"Detached message window You can detach the message window (like any …","ref":"/docs/manual/spc/textmsg/","title":"swift pilot client text message handling (disable overlay messages)"},{"body":"  #td-cover-block-0 { background-image: url(/featured-background_hufe3886a988ff51396d24f1c169407fb0_3656346_960x540_fill_q75_catmullrom_top.jpg); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/featured-background_hufe3886a988ff51396d24f1c169407fb0_3656346_1920x1080_fill_q75_catmullrom_top.jpg); } }  swift project: the multiple simulator and OS pilot client! Download Latest Beta   Other Downloads   Documentation   Tutorials   \n        swift is an open-source pilot client which can allows users to connect their flight simulator to FSD-networks like VATSIM.\nswift is an independent (private/non-commercial) software project creating open source software for flight simulaton.\n      Multiple simulator support! swift supports major flight simulators like X-Plane 11, Prepar3D v1-v5, FSX, FS9 and Flightgear.\nSupport for other simulators can easily be added.\n   Multiple OS support! swift is available for all major operating systems.\n   Open Source! swift is the only pilotclient which is fully open-source under GPLv3. New contributors are always welcome!\nRead more …\n    ","excerpt":"  #td-cover-block-0 { background-image: …","ref":"/","title":"swift project"},{"body":"Windows swift can be run as single window application (with tab bars) or the windows can be detached (double click on its tab or use the context menu).\nDetaching of Windows can be locked. Note that 3 buttons are yellow because the window is either floating or active.\nSave and restore window states See savewindow{.interpreted-text role=\"ref”}\nReset screen size resetscreen{.interpreted-text role=\"ref”}\nUse tooltips In many cases further information can be obtained by using the tooltips. Just place your pointer of a field or label.\nFont size Use CTRL +, CTRL - or CTRL 0 to increase, decrease or reset font size.\nResize views\n Use CTRL R Use the resize features from the context menu, try what works best for you  ","excerpt":"Windows swift can be run as single window application (with tab bars) …","ref":"/docs/manual/swiftgeneral/swiftuiconcepts/","title":"swift UI concepts (multiple windows, floating windows, resize views)"},{"body":"You can find your swift user data in the application data directory, which depends on the OS you are using. On Windows this directory will be AppData/Local/org.swift-project. As you can install multiple swift versions on your system, you might see a directory for each of those installation. Within such a directory you will find sub directories for log, cache, and settings data.\nYou can also access these directories from your swift applications' File menu.\nHint: In the launcher_wizard{.interpreted-text role=\"ref”} you can transfer settings and cache data between different swift installations.\n","excerpt":"You can find your swift user data in the application data directory, …","ref":"/docs/manual/spc/userdata/","title":"swift user data"},{"body":"You can temp disable a model, then remove it (or them) from the set.\nSee modelsetvalidation{.interpreted-text role=\"ref”} for details.\n","excerpt":"You can temp disable a model, then remove it (or them) from the set. …","ref":"/docs/manual/swiftgeneral/faq/tempdisablemodel/","title":"Temp disable a model"},{"body":"You can test a model set in the mapping tool. By entering input data on top you can check what the result would be. You can change your settings (matchingsettings{.interpreted-text role=\"ref”} ) and see the impact.\n","excerpt":"You can test a model set in the mapping tool. By entering input data …","ref":"/docs/manual/swiftgeneral/modelsandmodelset/testmodelset/","title":"Testing a model set - model matcher"},{"body":"The model browser allows you to test AI/CSL/XCSL models.\nTo use the browser * connect with the simulator * but do not connect with the network (VATSIM; ...)\nNow you can place any model in any location and test parts, lights, .…\n","excerpt":"The model browser allows you to test AI/CSL/XCSL models.\nTo use the …","ref":"/docs/manual/swiftgeneral/modelbrowser/","title":"The model browser (testing models offline)"},{"body":" Aircraft models, see here Style sheets (themes) by fsenthusiast  Note Made a couple new themes today, and decided I'd upload them to my google drive to share. If you want to use them, feel free. You can download them at https://drive.google.com/open?id=1G9MWjdTTfRBMWR1g1bEIBzc0iLrjIYxy.  Reference Discord: https://discordapp.com/channels/539048679160676382/568904623151382546/607665314074722326\nSee also Find swift stylesheet files / find qss files\n Alternative sound files by Base, see here  TOOD Add missing link to sound package  Reference Discord: https://discordapp.com/channels/539048679160676382/568904623151382546/607665314074722326\n","excerpt":" Aircraft models, see here Style sheets (themes) by fsenthusiast  Note …","ref":"/docs/installation/thirdparty/","title":"Third party downloads"},{"body":"Third-Party Licenses Used in swift project\n Boost Crashpad libxplanemp Opus Portaudio Qt5 SpeexDSP vatlib Qwt QtWebApp  Boost  Project website\thttp://www.boost.org/ Source code\thttp://www.boost.org/users/history/  Boost Software License - Version 1.0 - August 17th, 2003 Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and accompanying documentation covered by this license (the \"Software\") to use, reproduce, display, distribute, execute, and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the Software is furnished to do so, all subject to the following: The copyright notices in the Software and this entire statement, including the above license grant, this restriction and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all derivative works of the Software, unless such copies or derivative works are solely in the form of machine-executable object code generated by a source language processor. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Crashpad  Project website\thttps://crashpad.chromium.org/index.html Source code\thttps://chromium.googlesource.com/crashpad/crashpad   Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright [yyyy] [name of copyright owner] Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. libxplanemp  Source code (swift git hub repo)\thttps://github.com/swift-project/libxplanemp Copyright (c) 2006, Ben Supnik and Chris Serio.  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Opus  Project website\thttp://opus-codec.org/ Source code\thttp://opus-codec.org/downloads/ Copyright 2001-2011 Xiph.Org, Skype Limited, Octasic, Jean-Marc Valin, Timothy B. Terriberry, CSIRO, Gregory Maxwell, Mark Borgerding, Erik de Castro Lopo  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. - Neither the name of Internet Society, IETF or IETF Trust, nor the names of specific contributors, may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Opus is subject to the royalty-free patent licenses which are specified at: Xiph.Org Foundation: https://datatracker.ietf.org/ipr/1524/ Microsoft Corporation: https://datatracker.ietf.org/ipr/1914/ Broadcom Corporation: https://datatracker.ietf.org/ipr/1526/ Portaudio  Project website\thttp://www.portaudio.com/ Source code\thttp://www.portaudio.com/download.html  PortAudio Portable Real-Time Audio Library PortAudio API Header File Latest version available at: http://www.portaudio.com Copyright (c) 1999-2006 Ross Bencina and Phil Burk Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. The text above constitutes the entire PortAudio license; however, the PortAudio community also makes the following non-binding requests: Any person wishing to distribute modifications to the Software is requested to send the modifications to the original developer so that they can be incorporated into the canonical version. It is also requested that these non-binding requests be included along with the license above. Qt5  Project website\thttps://www.qt.io/ Source code\thttps://code.qt.io GNU LESSER GENERAL PUBLIC LICENSE   The Qt Toolkit is Copyright (C) 2016 The Qt Company Ltd. Contact: http://www.qt.io/licensing/ You may use, distribute and copy the Qt Toolkit under the terms of GNU Lesser General Public License version 3, which is displayed below. This license makes reference to the version 3 of the GNU General Public License, which you can find in the LICENSE.GPLv3 file. ------------------------------------------------------------------------- GNU LESSER GENERAL PUBLIC LICENSE Version 3, 29 June 2007 Copyright © 2007 Free Software Foundation, Inc. http: //fsf.org/ Everyone is permitted to copy and distribute verbatim copies of this licensedocument, but changing it is not allowed. This version of the GNU Lesser General Public License incorporates the terms and conditions of version 3 of the GNU General Public License, supplemented by the additional permissions listed below. 0. Additional Definitions. As used herein, “this License” refers to version 3 of the GNU Lesser General Public License, and the “GNU GPL” refers to version 3 of the GNU General Public License. “The Library” refers to a covered work governed by this License, other than an Application or a Combined Work as defined below. An “Application” is any work that makes use of an interface provided by the Library, but which is not otherwise based on the Library. Defining a subclass of a class defined by the Library is deemed a mode of using an interface provided by the Library. A “Combined Work” is a work produced by combining or linking an Application with the Library. The particular version of the Library with which the Combined Work was made is also called the “Linked Version”. The “Minimal Corresponding Source” for a Combined Work means the Corresponding Source for the Combined Work, excluding any source code for portions of the Combined Work that, considered in isolation, are based on the Application, and not on the Linked Version. The “Corresponding Application Code” for a Combined Work means the object code and/or source code for the Application, including any data and utility programs needed for reproducing the Combined Work from the Application, but excluding the System Libraries of the Combined Work. 1. Exception to Section 3 of the GNU GPL. You may convey a covered work under sections 3 and 4 of this License without being bound by section 3 of the GNU GPL. 2. Conveying Modified Versions. If you modify a copy of the Library, and, in your modifications, a facility refers to a function or data to be supplied by an Application that uses the facility (other than as an argument passed when the facility is invoked), then you may convey a copy of the modified version: a) under this License, provided that you make a good faith effort to ensure that, in the event an Application does not supply the function or data, the facility still operates, and performs whatever part of its purpose remains meaningful, or b) under the GNU GPL, with none of the additional permissions of this License applicable to that copy. 3. Object Code Incorporating Material from Library Header Files. The object code form of an Application may incorporate material from a header file that is part of the Library. You may convey such object code under terms of your choice, provided that, if the incorporated material is not limited to numerical parameters, data structure layouts and accessors, or small macros, inline functions and templates (ten or fewer lines in length), you do both of the following: a) Give prominent notice with each copy of the object code that the Library is used in it and that the Library and its use are covered by this License. b) Accompany the object code with a copy of the GNU GPL and this license document. 4. Combined Works. You may convey a Combined Work under terms of your choice that, taken together, effectively do not restrict modification of the portions of the Library contained in the Combined Work and reverse engineering for debugging such modifications, if you also do each of the following: a) Give prominent notice with each copy of the Combined Work that the Library is used in it and that the Library and its use are covered by this License. b) Accompany the Combined Work with a copy of the GNU GPL and this license document. c) For a Combined Work that displays copyright notices during execution, include the copyright notice for the Library among these notices, as well as a reference directing the user to the copies of the GNU GPL and this license document. d) Do one of the following: 0) Convey the Minimal Corresponding Source under the terms of this License, and the Corresponding Application Code in a form suitable for, and under terms that permit, the user to recombine or relink the Application with a modified version of the Linked Version to produce a modified Combined Work, in the manner specified by section 6 of the GNU GPL for conveying Corresponding Source. 1) Use a suitable shared library mechanism for linking with the Library. A suitable mechanism is one that (a) uses at run time a copy of the Library already present on the user's computer system, and (b) will operate properly with a modified version of the Library that is interface-compatible with the Linked Version. e) Provide Installation Information, but only if you would otherwise be required to provide such information under section 6 of the GNU GPL, and only to the extent that such information is necessary to install and execute a modified version of the Combined Work produced by recombining or relinking the Application with a modified version of the Linked Version. (If you use option 4d0, the Installation Information must accompany the Minimal Corresponding Source and Corresponding Application Code. If you use option 4d1, you must provide the Installation Information in the manner specified by section 6 of the GNU GPL for conveying Corresponding Source.) 5. Combined Libraries. You may place library facilities that are a work based on the Library side by side in a single library together with other library facilities that are not Applications and are not covered by this License, and convey such a combined library under terms of your choice, if you do both of the following: a) Accompany the combined library with a copy of the same work based on the Library, uncombined with any other library facilities, conveyed under the terms of this License. b) Give prominent notice with the combined library that part of it is a work based on the Library, and explaining where to find the accompanying uncombined form of the same work. 6. Revised Versions of the GNU Lesser General Public License. The Free Software Foundation may publish revised and/or new versions of the GNU Lesser General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Library as you received it specifies that a certain numbered version of the GNU Lesser General Public License “or any later version” applies to it, you have the option of following the terms and conditions either of that published version or of any later version published by the Free Software Foundation. If the Library as you received it does not specify a version number of the GNU Lesser General Public License, you may choose any version of the GNU Lesser General Public License ever published by the Free Software Foundation. If the Library as you received it specifies that a proxy can decide whether future versions of the GNU Lesser General Public License shall apply, that proxy's public statement of acceptance of any version is permanent authorization for you to choose that version for the Library. SpeexDSP  Project website\thttp://www.speex.org/ Source code\thttp://www.speex.org/downloads/ Copyright 2002-2008 Xiph.org Foundation Copyright 2002-2008 Jean-Marc Valin Copyright 2005-2007 Analog Devices Inc. Copyright 2005-2008 Commonwealth Scientific and Industrial Research Organisation (CSIRO) Copyright 1993, 2002, 2006 David Rowe Copyright 2003 EpicGames Copyright 1992-1994 Jutta Degener, Carsten Bormann  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. - Neither the name of the Xiph.org Foundation nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. vatlib  Project website\thttps://dev.vatsim.net Source code\thttps://dev.vatsim.net  Creative Commons License This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. Qwt  Project website\thttps://qwt.sourceforge.io/ Source code\thttps://qwt.sourceforge.io/   Qwt License Version 1.0, January 1, 2003 The Qwt library and included programs are provided under the terms of the GNU LESSER GENERAL PUBLIC LICENSE (LGPL) with the following exceptions: 1. Widgets that are subclassed from Qwt widgets do not constitute a derivative work. 2. Static linking of applications and widgets to the Qwt library does not constitute a derivative work and does not require the author to provide source code for the application or widget, use the shared Qwt libraries, or link their applications or widgets against a user-supplied version of Qwt. If you link the application or widget to a modified version of Qwt, then the changes to Qwt must be provided under the terms of the LGPL in sections 1, 2, and 4. 3. You do not have to provide a copy of the Qwt license with programs that are linked to the Qwt library, nor do you have to identify the Qwt license in your program or documentation as required by section 6 of the LGPL. However, programs must still identify their use of Qwt. The following example statement can be included in user documentation to satisfy this requirement: [program/widget] is based in part on the work of the Qwt project (http://qwt.sf.net). QtWebApp  Project website\thttp://stefanfrings.de/qtwebapp/index-en.html Source code\tSee web site License: LGPL 3 as of 2/2019, see website above.  ","excerpt":"Third-Party Licenses Used in swift project\n Boost Crashpad libxplanemp …","ref":"/docs/legal/third_party_licenses/","title":"Third-Party licenses used in the swift project"},{"body":"Using Swift as Tower View with Euroscope ATC Client Using X-Plane 11 (XP11) or Prepar3D v4.x (P3D)):\n  Start Euroscope at the airport of your choice. It is not necessary to start Euroscope's Proxy Server.\n  Connect Euroscope to VATSIM.\n  Start X-Plane 11 or P3D at an airport of your choice\n  For X-Plane 11, use any aircraft (e.g. C172) on a remote stand. Once started, select Tower (shift+5) or Free Camera (c). For P3D, select 'Tower Controller' from the main startup page/Location/Starting Location (bottom of list).     Start the swiftGUI\n  Under Settings =\u003e Servers, create a server for localhost by filling in a suitable name (e.g.) 'Tower View' and a description (e.g. 'Local Tower View'). As address use 'localhost' or the IP-address of the computer that runs Euroscope, set port 6809. Set Eco. to 'VATSIM' and type to 'FSD [VATSIM]'. Fill in anything in the boxes for real name, ID and password (none of them are used for a proxy connection, but the boxes cannot be empty).     Click on the swift Connect widget. On top you will find the Network options, there select the Other Servers tab (do not use VATSIM tab) and then the Tower Server that you just created.\n   The information in the Own aircraft section do not matter, you can fill in any bogus data.   Click on [Connect]{.title-ref}. Live VATSIM aircraft will appear in X-Plane 11/P3D after several seconds, your swift Aircraft and Models pages will be populated, too.  vStars   Open SwiftGUI\n  Select \"Settings\"\n  Select \"Servers\"\n  Fill in, for the server descriptions...\n  Name: Localhost Description: Tower View Eco./type VATSIM then FSD[VATSIM] Addr./port: localhost then 6809 Leave the rest blank     Select \"save\"\n  Run vSTARS and connect\n  Run .startproxy in vSTARS\n  In SwiftGUI, select \"Connect\"\n  Select \"Other servers\"\n  Select \"Localhost: Tower View\" from the dropdown\n  Select \"connect\"\n  Remark: \"The one tricky thing is if your doing it on separate computers you have to put in the computer that owns the proxy as the IP address and start the proxy before connecting\"\nImpressions Tower view impressions (X-Plane 11)\nEuroscope with vSMR plugin\nTraffic situation on the radar as seen in X-Plane 11\n","excerpt":"Using Swift as Tower View with Euroscope ATC Client Using X-Plane 11 …","ref":"/docs/manual/spc/towerview/","title":"Tower view for controllers with EuroScope, vStars"},{"body":"This topic is located here: swiftgeneral{.interpreted-text role=\"ref”} and tracinginterpolation{.interpreted-text role=\"ref”}\n","excerpt":"This topic is located here: swiftgeneral{.interpreted-text role=\"ref”} …","ref":"/docs/knowhow/simandinterpolation/tracing/","title":"Tracing and debugging interpolation / matching"},{"body":"To trace aircraft parts you have multiple options:\n Use the interpolation \"parts\" tab, there you can monitor aircraft parts.   Use the internals page. You can override the values by using the [send]{.title-ref} functions. You can \"fake\" received parts by just setting the GUI values and \"Send GUI\". This generates a packet like it was received from another swift client.   You can also use the interpolationdisplay{.interpreted-text role=\"ref”} or if you just want to test offline modelbrowser{.interpreted-text role=\"ref”} See also interpolationexamples{.interpreted-text role=\"ref”}  ","excerpt":"To trace aircraft parts you have multiple options:\n Use the …","ref":"/docs/manual/swiftgeneral/tracingparts/","title":"Tracing and testing aircraft parts"},{"body":"Change request ::: {.note} ::: {.title} Note :::\nRequires mapping admin role or higher, mappingroles{.interpreted-text role=\"ref”} :::\nEach change request is archived. From the \"changed\" column it is possible to show a popup window displaying the changed attributes.\n{height=\"150px”}\nWork history ::: {.note} ::: {.title} Note :::\nRequires mapping admin role or higher, mappingroles{.interpreted-text role=\"ref”} :::\nEach modification is stored in the work history. From the \"changed\" column it is possible to show a popup window displaying the changed attributes.\n{height=\"150px”}\n","excerpt":"Change request ::: {.note} ::: {.title} Note :::\nRequires mapping …","ref":"/docs/manual/datastore/tracingchanges/","title":"Tracing changes in datastore"},{"body":"See also tracingmatching{.interpreted-text role=\"ref”} and tracingnetwork{.interpreted-text role=\"ref”}\n::: {.important} ::: {.title} Important :::\nUse the \"dot\" command help to see which commands can be used to enable interpolation logging :::\nOverview There are 3 possibilities to get interpolation information:\n in an extra window of swift (since 0.8.4): interpolationdisplay{.interpreted-text role=\"ref”} in the message window of XPlane/FSX/P3D. You can send the current interpolated situation as message to the sim, which is useful if you want so see it in the simulator together with the aircraft or saved into a log file in HTML format which can also be read by spreadsheet programs. (HTML table will be created from that, which also be imported by Excel and similar spreadsheet programs)  HINT: You can enable logging for 1..n aircraft, but only use ONE aircraft if there is no special need\nInterpolation log display The interpolation log. display allows to trace interpolation, checking elevations, inbound parts and situations. It is most likely the easiest was to trace interpolations.\nUse .drv intdisplay to launch the window. See interpolationdisplay{.interpreted-text role=\"ref”} for details.\nFull HTML log  You can enable tracing via the dot command .drv logint CALLSIGN. Alternatively logging can be enabled (or checked if it is enabled) in interpolation setup. You should see an info in the log./status bar   if you want to end the logging, you would type .drv logint write, this should show   the logging is very VERBOSE, so we recommend ONLY to log one callsign at a time do not log for too long, as said, the logs files get huge very quickly you will find the situation and parts logs generated in the log directory (they will be written if you type .drv logint write) If you have no idea how to find the log directory, see findlogfiles{.interpreted-text role=\"ref”}  The complete log can be obtained as HTML from the Internals page\nTesting aircraft parts In interpolation setup (on the 2nd tab) you could check the aircraft parts if needed.\nFor testing parts you can also use the Internals page for sending parts.\n","excerpt":"See also tracingmatching{.interpreted-text role=\"ref”} and …","ref":"/docs/manual/swiftgeneral/tracinginterpolation/","title":"Tracing interpolation"},{"body":"see\n  matchinghints{.interpreted-text role=\"ref”} matchmsg{.interpreted-text role=\"ref”} (understand why you see the model you see) matchingsettings{.interpreted-text role=\"ref”} exportmodelset{.interpreted-text role=\"ref”} in case you need to upload it for debugging   see also:\n tracinginterpolation{.interpreted-text role=\"ref”} tracingnetwork{.interpreted-text role=\"ref”} tracingparts{.interpreted-text role=\"ref”}  ","excerpt":"see\n  matchinghints{.interpreted-text role=\"ref”} …","ref":"/docs/manual/swiftgeneral/matching/tracingmatching/","title":"Tracing model matching"},{"body":"Network packets Network packets (FSD log) can be analyzed from the internals page. See also tracinginterpolation{.interpreted-text role=\"ref”} and tracingmatching{.interpreted-text role=\"ref”} . FSD docu: https://studentweb.uvic.ca/~norrisng/fsd-doc/\nNetwork statistics Network statistics can be enabled from the internals page. Also a log file is written to the log directory if enabled, see findcachefiles{.interpreted-text role=\"ref”}\n","excerpt":"Network packets Network packets (FSD log) can be analyzed from the …","ref":"/docs/manual/swiftgeneral/tracingnetwork/","title":"Tracing network packets (FSD log) and network statistics"},{"body":"If you notice (permanent) problems with FSX/P3D you can enable SimConnect tracing. This will add further details to SimConnect exceptions as it will trace where a certain SimConnect calls originate from.\n","excerpt":"If you notice (permanent) problems with FSX/P3D you can enable …","ref":"/docs/manual/swiftgeneral/tracingsimconnect/","title":"Tracing SimConnect"},{"body":"General  swift has no hot plug and play for all types yet, some sound hardware needs to be plugged in/on before starting swift is the device correctly selected in the settings? swift audio make sure the swift volume ist 100% and voice not muted in swift check your PTT button  Is the PTT button defined, see here Does it work, If you press it, do you see the LED flashing? If it is defined but does NOT work, remove it and add it again!   on MacOSX make sure mic privilege is granted. Linux: We read keyboard and joystick stuff from /dev/input/event* and js*. Those files have to be readable by your user. Typically they are owned by group input or such so if you add your user to that group then it will work. Windows: Microphone not working on Windows Is loopback working? If not, this would mean some issue of swift and your hardware. You would need to have RX2 enabled to hear loopback   Make sure TX/RX (transmit/receive are enabled). If you sync. swift with your aircraft cockpit and your cockpit COM units are disabled, this can be your COM unit is \"disabled\". See here. Check yourself on the AFV map: https://afv-map.vatsim.net/ Is your callsign shown, and your frequencies correct?  Sample rate swift uses the following values for output and tries to find the closest audio setup on your machine. It might help to adjust your sample rates (Google for \"Windows Audio sample rate\").\noutputFormat.setSampleRate(48000); outputFormat.setChannelCount(1); outputFormat.setSampleSize(32); outputFormat.setSampleType(QAudioFormat::Float); outputFormat.setByteOrder(QAudioFormat::LittleEndian); outputFormat.setCodec(\"audio/pcm\"); inputFormat.setSampleRate(m_sampleRate); // normally 48000 inputFormat.setChannelCount(1); inputFormat.setSampleSize(16); inputFormat.setSampleType(QAudioFormat::SignedInt); inputFormat.setByteOrder(QAudioFormat::LittleEndian); inputFormat.setCodec(\"audio/pcm\"); Changing the driver (Windows only, WASAPI) swift for Windows comes with two audio plugins, WASAPI and a Windows plugin. You can remove one of those and try which works better for you. Just move them to another directory (outside swift), so you can copy them back if needed.\n Go into your swift installation bin path (e.g. C:\\Program Files\\swift-0.9.3-64bit\\bin). Change to subfolder audio Since swift 0.9.4.206 we have disabled the WASAPI driver, you can find them here (just copy them in the directory, use the 32 or 64bit version as required by your installation).  To remove:\n Find dlls containing \"wasapi\" or \"windows\" Move them to a backup directory outside swift So as a result, you SHALL have only the \"wasapi\" OR the \"windows\" ones in the audio subdir  ","excerpt":"General  swift has no hot plug and play for all types yet, some sound …","ref":"/docs/troubleshooting/troubleshootvoice/","title":"Troubleshoot voice (no ATC, no MIC, no sound, sample rates, WASAPI)"},{"body":"1) All simulators, OS\nChecklist\nRead this checklist\nSetup / bootstrap file trouble\nSee Bootstrap file.\nswift does not start / connect\n Could be a Virus scanner/Security suite issue, maybe check if swift needs some permission there Firewall, ports open .… if you see something like  \"ASSERT failure in QList \u003cT\u003e::operator \"index out of range\", file C:\\QT\\5.12.0\\msvc2017_64\\include\\ Qtcore/qlist.h,line 552\" your settings could be corrupt, see here   sometimes it can help to uncheck and check again the simulator again (simulator settings)  swift hangs after start\n could be that the screen geometry values are incorrect, see Reset the screen size or even Delete swift registry values (Windows only) also we had people having issues with  malware protection recently some reports with TrueImage Active protection came up (that blocking swift)    Validation errors\nSee Why do I see validation errors during startup?\nNo Mic / cannot talk to controller\n Troubleshoot voice (no ATC, no MIC, no sound, sample rates, WASAPI) MacOS user? See here Windows: Microphone not working on Windows  The Qt WIFI problem\nIf you see messages like No network access point or No network and you are using WIFI then you likely suffer from a Qt bug. In some versions the Qt framework (the library swift uses) is broken. Qt has promised to fix that. However, you can try the following workaround. In your swift installation directory you will see a directory bearer, just remove this directory and try again.\n2) Simulator specific\nP3D/FSX specific\n I only see \"Constellations\". Most likely you have no model set, an improper model set, see createms{.interpreted-text role=\"ref”} If the simulator does NOT connect, see configuresim{.interpreted-text role=\"ref”} make sure you have the correct swift version, 32bitor64bitinstaller{.interpreted-text role=\"ref”} If you cannot connect the simulator and swift: If you run P3D \"as admin\", run swift \"as admin\" make sure you use the correct P3D driver version. If this version does not (yet) exists, selected the version which comes closest.  X-Plane specific    Warn of XSquawkBox/xPilot conflict : - *XSwiftBus* doesn\\'t work properly if xsquawkbox or x-ivap is also installed since only one can have control of X-Plane multiplayer aircraft. *swift* will raise a warning in case another plugin is controlling the multiplayer aircraft. - Remove or disable the conflicting plugin and restart X-Plane. Plugins are still loaded even if they are disabled. Disabled just means that any callbacks registered by the plugin will not be called. Some people have to remove the plugins from the folder, some do not. - Maybe you consider a 3rd party tool like `xorganizer`{.interpreted-text role=\"ref\"}    Bluebell CSL models sunken in ground (vertical offset fix) , see xplanecg{.interpreted-text role=\"ref”}\n  XPlane models in model set, but not rendered. Solution: CSL files need to be inside the XPlane folder. Moving the XPlane models might require to reload your swift model cache, then recreating the model set.\n  swift cannot connect to XPlane simulator side plugin:\n  Check if the settings of the swift side and XPlane side do match, xswiftbussettings{.interpreted-text role=\"ref”} . If the simulator LED is \"on\" the simulator can be connected:   XPlane not connecting with swift on MacOS, see noconnectonmac{.interpreted-text role=\"ref”} .     HINT: Some users did have problems with spaces in their model directory paths\n  Aircraft animation as gear down not working:\n  There are some known conflicts with other XPlane add-ons as those keep common multiplayer animation [datarefs]{.title-ref} (being shared between all pilot clients) locked and the swift dataref registration fails. In order to resolve the problem move the conflicting plugin out of your plugin folder and restart. The conflict is known to cause trouble with gear animations and such. Problems with the following plugins have been reported: all other client plugins like XSB, x-ivap, fscloud, fs2play     FS9 specific\n  FS9 needs two connections: DirectPlay Multiplayer and FSUIPC since DP MP doesn't have all required details\n  DirectPlay is auto connected if swift runs on the same machine and has been properly installed (adding itself as \"lobby-able\" application on windows registry) See fs9mp{.interpreted-text role=\"ref”}     When you run FS9 as admin, then FSUIPC isn't connecting, because swift running as non admin blocks the connection. Run both as admin.\n  Some people have have reported issues with models not from the aircraft folder of FS9\n  some users have problems with the auto-connect to FS9 since Win10 1909 update, see fs9mp{.interpreted-text role=\"ref”}\n  fs9elevation{.interpreted-text role=\"ref”}\n  3) OS specific\nSome issues with Mac OS\n XPlane not connecting with swift on MacOS, see noconnectonmac{.interpreted-text role=\"ref”}. Not validated: Installation in Application failt, but in XPlane directory it works.  ::: {.toctree glob=”” caption=\"Content in this chapter”} ./* :::\n","excerpt":"1) All simulators, OS\nChecklist\nRead this checklist\nSetup / bootstrap …","ref":"/docs/troubleshooting/troubleshootfirststart/","title":"Troubleshooting installation and 1st start"},{"body":"In order to better understand the model coverage you can call the statistics. There you get a general overview, or you can display the model matrix to see the model vs. airlines.\n=== Removing duplicates ===\nIf you want to removed redundant models from the set, see modelsetduplicates{.interpreted-text role=\"ref”}\n","excerpt":"In order to better understand the model coverage you can call the …","ref":"/docs/manual/swiftgeneral/modelsandmodelset/tuningset/","title":"Tuning / tweaking a model set (model matrix)"},{"body":"swift notification sounds can be found under your installation path under sounds: swift-0.8.7-64bit\\share\\sounds. Starting with swift 0.9.1 you can have your own sounds directory and any file found there is used instead of the swift file\n the file names are self-explantory if you place the corresponding file in your directory you will hear the \"new sound\" (restart required) You can test the sounds in the audio settings (if you select a notification sound the sound will be played) to use a new file you need to restart swift  Share your sound files If you have cool sound notification files you can share them with other users.\n the files have to be in .wav format and have to be copyright free so we can publish them here we need your CLA, see Upload your file all uploads without real name will be ignored (legal reasons) you can find shared files under thirdparty{.interpreted-text role=\"ref”}  ","excerpt":"swift notification sounds can be found under your installation path …","ref":"/docs/manual/swiftgeneral/notificationsounds/","title":"Tweaking swift notification sounds"},{"body":" Note Uninstalling swift does not uninstall the settings, you can delete them as shown here:. Or see directory delete below.  You have multiple options to uninstall swift   Via the normal OS features. This is what you should normally do, however it uninstalls the program only, but the data are not deleted. See below on how to delete the data directory.\n  You could also start the uninstaller directly from your swift directory.\n Windows: As the directory itself is being opened in the Explorer in such a case, it can happen some files/sub-directories remain - just delete them manually after uninstaller completes. It can also happen the DBus files are still in used can also cause the share directory NOT to be deleted, again, just delete it manually.    Directory delete: A swift installation consist of 2 directories\n delete the program directory, this removes the swift program only, not the settings delete the data directory. You can delete swift data directories from the \"other versions\" context menu in the wizard, if you still have another version installed. Or just go to the directory a delete it.  You can also just delete the data directory for your version, that looks like a fresh install, see here    Cleaning up the Windows registry If you install with the installer you might want to delete the following entries (example for 0.8.5)\n Computer\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\swift 0.8.5 Computer\\HKEY_LOCAL_MACHINE\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\swift 0.8.5  swift only stores its windows geometry in the registry, You can delete all registry entries from the launcher tools:\n","excerpt":" Note Uninstalling swift does not uninstall the settings, you can …","ref":"/docs/installation/uninstallingswift/","title":"Uninstalling swift"},{"body":"Read also: dataprovisioning{.interpreted-text role=\"ref”}\nWhen new model data (more precisely \"shared data\", a copy of the DB data) are published, you will see an update screen in the pilot client. Those data include airline data, model data, new liveries etc. New data will be published if new mappings (mm{.interpreted-text role=\"ref”} ) are created, data are corrected, new airlines are added. It will NOT update the program, only data.\nThis update will do two things.\n download the latest model data (ICAO codes, models, liveries .…) consolidate the data, see whydataconsolidation{.interpreted-text role=\"ref”} . This means your model set data are updated.  ::: {.note} ::: {.title} Note :::\nThis step can take a while to complete as all the data will be downloaded and merged (consolidated) with your simulator models. Normally you can just run the update without doing anything. :::\nRemark: When you run the mapping tool the latest DB data will be automatically downloaded, so in that case you already have the latest data .\n","excerpt":"Read also: dataprovisioning{.interpreted-text role=\"ref”}\nWhen new …","ref":"/docs/manual/spc/updatemodeldata/","title":"Update model data (for the client)"},{"body":"Updating by \"overwriting\" a current installation (e.g 0.9.1.1234 =\u003e 0.9.1.1235)\n this is the easiest way to install a swift version you just select the same directory as your previous version all swift files will be copied over the \"old\" ones you will NOT override your settings and model set, the same settings/models as before will be used we recommend to override within a 3 digit branch only, so 0.8.9.xxxx by 0.8.9.yyyy. otherwise we recommend to install the new version parallel to the old one. By that you can always fallback to the old version if you need to. we recommend to keep testing versions parallel to your latest stable version (whatever stable means to you) Do NOT forget to copy the new //XSwiftBus// version if applicable. Either in the wizard or manually  Always overriding If you always want to override, just install swift in a directory without version number, or with a 1 digit version number only, (e.g. foodir/swith_0.9). But you need to understand:\n by that your old version is gone when you update your old setup will be used, but if the new version, is broken, there is no way back.  Parallel installation and copy settings/models (e.g 0.9.1 =\u003e 0.9.2)\n If you have a stable version for online flying, keep this until you have tested the new version you would install swift in a new directory, this is literally a new installation then you would copy your models/settings from another swift version via the launcher this is covered in Copy swift data  Important Many people mistakenly start a wrong version with multiple installations, so if you no longer need another version consider uninstalling it  ","excerpt":"Updating by \"overwriting\" a current installation (e.g 0.9.1.1234 =\u003e …","ref":"/docs/installation/updatingswift/","title":"Updating swift"},{"body":"While it seems that just disabling some conflicting plugins like XSB does not solve the issues (still no gear or such problems) xOrganizer seems to work.\n::: {.important} ::: {.title} Important :::\nxOrganizer is a 3rd part software and not related to swift whatsoever. See http://www.4xplane.nl/xorganizer/ :::\nMaybe this tool is an option for you to quickly switch among pilot clients.\n","excerpt":"While it seems that just disabling some conflicting plugins like XSB …","ref":"/docs/installation/xplane/xorganizer/","title":"Use with xOrganizer"},{"body":"Benutzerrechte Löschung der Daten In den meisten swift Anwendungen können Sie Ihr Benuzerprodil selbst editieren. Dort können Sie Ihre Daten ggf. auch selbst löschen. Falls dies nicht möglich ist, kontakieren sie uns bezüglich der Löschung Ihrer Daten. Bezüglich der Daten in den Flugnetzwerken wenden Sie sich direkt an diese Netzwerke.\nExport der Daten In den Profilen der Anwendungen können Sie Ihre Daten auch exportieren.\nUser rights Data deletion Most swift applications allow to edit the user profiles. This allows to edit and delete the user data. In case this is not possible please contact us in order to have your data deleted. For any aspects regarding the data of the flight networks please contact them directly.\nData export Use your profiles to export your data if required.\n","excerpt":"Benutzerrechte Löschung der Daten In den meisten swift Anwendungen …","ref":"/docs/legal/userrights/","title":"User rights"},{"body":"The FSD protocol (which is used by VATSIM and other networks) transfers\n your callsign your aircraft ICAO designator your airline ICAO designator your model string (FsInn extension) your livery string (not standardized for VATSIM, hence pretty useless)  Unlike in real aviation there or some challenges regarding airlines\n there are VAs using the ICAO code of real airlines people fly ceased airlines (not possible in real world) people use wrong airline codes  All that can lead to ambiguous airline codes. Also VATSIM only uses 3 letter ICAO codes. So there is no chance to distinguish a virtual airline from a real airline.\nswift however distinguishes VAs and real airlines. In your database we use a 4 letter airline code for VAs, but this works only from swift to swift.\nExample:\n{height=\"200px”}\n{height=\"200px”}\nIf you want to add your VA to the swift database you can do so, see cr{.interpreted-text role=\"ref”} . These airlines will be recognized by swift clients (icaohints{.interpreted-text role=\"ref”} ). You can also add the airline name in the FP if you use other clients.\nTo create a mapping see createmappings{.interpreted-text role=\"ref”}.\n","excerpt":"The FSD protocol (which is used by VATSIM and other networks) …","ref":"/docs/manual/datastore/va/","title":"VAs (virtual airlines) in swift"},{"body":"Many people claim you always have to switch between your flight simulator and the Swift GUI window. I am now going to show you a way to connect nearly any device as a second display to your PC to place the GUI on it. Therefore, Windows 7 or higher is requiered to be the OS on the Computer whose screen should be extended and all devices have to share the** same network** .\n!Before we start be informed that spacedesk is still under developement and in a Beta state. However, I have never made negative experiences so far!\n Download spacedesk. As it is explained on the website, the SPACEDESK DRIVER SOFTWARE for Windows PRIMARY PC (server) has to be installed (as its name says) on the machine whose screen you want to enlarge. The SPACEDESK VIEWER SOFTWARE for SECONDARY Machine (client) is for any client, on which the screen should be displayed (also available for iOS and Android). Open spacedesk on your primary machine. Klick the three dots and make sure that the switch is set to \"on\", otherwise the primary machine will not be displayed.  The following is not for iOS and Android app\nOpen the spacedesk viewer on your client. If everything is set up correctly, it should be displaying something like this:  If you see the message \"Cannot Detect Primary Machine!\", you have configured spacedesk wrong. Check, if spacedesk is really enabled on the primary machine and if both clients share the same network. It might also be, that a newer version has been released. In this case, download the new versions and try again.\nIf you open Windows screen settings dialogue on the primary machine (this can also be done in spacedesk under Display Settings) you can edit position, orientation, resulution and zoom factor of the screens. Now the second screen is treated as a physically connected screen and can be used as such. Just pull the GUI or any program over to the other screen. OPTIONAL: I configured spacedesk a little further for my personal preferences. All following steps are reffered to the secondary machine spacedesk dialogue. First, I enabled Mouse and Keyboard under the tab Functionality. This enables you to control the primary machine with mouse and keyboard of the secondary machine. Because I use a laptop with touchscreen functionality as secondary device, I also activated Touchscreen (absolute). Under Settings, I set hooks next to \"Full screen upon Connect\" as well as \"Keep Monitor Active\" (should be self explanatory). Last but not least, under Settings - Automatic Connect i entered the name of my primary machine (replaced by in the pictures) so I have nothing more to do than to start the spacedesk application.  I hope this program can help many people with the GUI struggle.\n","excerpt":"Many people claim you always have to switch between your flight …","ref":"/docs/manual/swiftgeneral/spacedesk/","title":"Virtual 2nd screen on another device"},{"body":"::: {.important} ::: {.title} Important :::\nDeactivate swift weather if you want to use own weather engines :::\nThere is no explicit weather setting, but you can change weather simulation from the weather page directly\n Weather is off, you can activate   Weather is on, you can deactivate it  ","excerpt":"::: {.important} ::: {.title} Important :::\nDeactivate swift weather …","ref":"/docs/manual/spc/settings/weathersettings/","title":"Weather settings"},{"body":"What is the model set? The model set is a subset of all aircraft models you have installed / stored. It represents the models you can use to display other users (i.e. other aircraft, the other pilots). The model set is needed for model matching.\n::: {.important} ::: {.title} Important :::\nNo model set, no model matching, no working swift ! :::\nSee also mm{.interpreted-text role=\"ref”}\nWhy is swift using a model set, why is it needed? From user perspective:\n the model set allows to define any combination of models for matching as you like it you can mix models from various distributors you can have multiple model sets suitable for special purposes (without installing/uninstalling models) easy testing: you can easily add or remove models to your set for testing purposes, without having to install/uninstall the physical models.  Technical reasons:\n swift is a multi simulator pilot client. By using a abstract model set (i.e. abstract from the physical models) we can use one matching concept for all simulators swift can be used in distributed mode, distributedswift{.interpreted-text role=\"ref”} . The model set can be use on a remote computer without direct access (shared drive etc.) to your models folder.  More information Find more about model set here: smt{.interpreted-text role=\"ref”}\n","excerpt":"What is the model set? The model set is a subset of all aircraft …","ref":"/docs/manual/swiftgeneral/modelsandmodelset/modelset/","title":"What is this bloody model set and why is it needed?"},{"body":"** Do I have to update my model set if I update my models (like downloaded a new FLAI, BB, or X-IVAP version)? ** Short answer, most likely \"yes\"\nDetails:\n swift uses the models you have specified in the model set, modelset{.interpreted-text role=\"ref”} If an update contains new models and you want to use those, you need to add them to your model set If models have been deleted, you need to delete those from your set It can happen new models are available but those data are not in the swift DB yet. You can help to provide those data or wait until those are available. It is a good idea to use model validation to detect inconsistencies / errors in your model set, modelsetvalidation{.interpreted-text role=\"ref”}  Other reasons when you have to update your model set\n you have moved or deleted a model directory you have manually deleted models from your model directory  See:\ncreatems{.interpreted-text role=\"ref”} addtoms{.interpreted-text role=\"ref”}\n","excerpt":"** Do I have to update my model set if I update my models (like …","ref":"/docs/manual/swiftgeneral/modelsandmodelset/whentoupdatems/","title":"When do I have to update my model set?"},{"body":"::: {.todo} Add missing images. :::\n::: {.important} ::: {.title} Important :::\nYour models for XPlane (and swift) should be below (inside) the XPlane folder. Otherwise XPlane is unable to show these models. :::\nAs example an installation could look like this with [XCSL]{.title-ref} and [BB]{.title-ref} models\n| {F37522} | {F37524} | {F37530} |\nBy default swift will search all models inside the XPlane folder, the XPlane folder is normally found automatically (left screenshot). You could also explicitly set the directories (by that you would eliminate the risk that some models are found which you actually do NOT want to use)\n| {F37532} | {F37534} |\nYou could also create an explicit folder for your swift models and copy them into that folder. By that you make sure that changes by other installers/clients does NOT affect your models\n| {F37536} | {F37540} |\nMake sure:\n that all folders are inside the XPlane folder you do not add models twice (if you have the [BB]{.title-ref} models in two different folders, only select one) if you move or change your installed models you need to update your model set. AGAIN: Just changing the setting does NOT change the model set, you need to update it for the new path.  Example | {F37542} | {F37544} | If I select [BB]{.title-ref} only I see around 1800 models | | {F37550} | {F37554} | [XCSL]{.title-ref} only around 4387 models | | {F37552} | {F37546} | Both together more than 6200 models |\n Do NOT confuse the model set and the model list discussed in this step, see modelsetandsettings{.interpreted-text role=\"ref”} . Hint:: If you use models of multiple providers in your set, we recommend to remove duplicates, see modelsetduplicates{.interpreted-text role=\"ref”} and examplemsbbxcsl{.interpreted-text role=\"ref”} .  ","excerpt":"::: {.todo} Add missing images. :::\n::: {.important} ::: {.title} …","ref":"/docs/manual/swiftgeneral/modelsandmodelset/xpmodeldirectories/","title":"Where should I place my XPlane model directories?"},{"body":"FSD (\"the VATSIM protocol\") uses the aircraft and airline ICAO codes to identify other pilot's aircraft. Unfortunately many use pseudo/fantasy ICAO codes. Our source for ICAO codes is the official ICAO database: icaodb{.interpreted-text role=\"ref”}\nAs an example let's look at the B747, as you can see neither B747 nor B74F are valid codes. That means, by using official ICAO codes there is no way to distinguish a freight B747 from a combi or pax version.\nIt is though possible to use different liveries to distinguish those planes, e.g. by using the passenger and cargo livery for a very plane (if there is any).\nUnfortunately there is no standard at VATSIM of how liveries and ICAO codes are are really to be used. Every client uses its own logic. For instance swift \u003c-\u003e swift communication transfers more details, and XSB has its own livery schema. But there is no standard.\nIf you want to achieve customized results in swift you have the following options:\n remove models you do not want to see from your model set use matching script to write your own logic: ms{.interpreted-text role=\"ref”} remove duplicates from your model set: modelsetduplicates{.interpreted-text role=\"ref”}  ","excerpt":"FSD (\"the VATSIM protocol\") uses the aircraft and airline ICAO codes …","ref":"/docs/manual/swiftgeneral/matching/whyb74f/","title":"Why do I see a B74F instead of the B747 passenger version?"},{"body":"Matching means to find the most suitable model for another pilot in your model set. If the other pilot flies a [DLH B744]{.title-ref} and you have [DLH B744]{.title-ref} in your model set, then the process is straight forward, we just take that one.\nIf NOT, then guessing starts and the opinion of what should happen varies.\n some want to see a neutral (all white) aircraft some want to see a [B744]{.title-ref}, but accept that from another airline some prefer to see a [DLH]{.title-ref} livery but accept another aircraft type  So there is not \"best\" solution, it depends on multiple factors. The result in swift depends on\n# the models you have in your swift model set, mm{.interpreted-text role=\"ref”} # your model matching settings, see matchingsettings{.interpreted-text role=\"ref”} # your own matching script (if you have written any), see ms{.interpreted-text role=\"ref”}\nThis means the result for swift users can be (very) different depending on the mentioned points. If you want to understand your matching result, just create a matching log - [matchmsg{.interpreted-text role=\"ref”} .\nTo improve your matching check matchinghints{.interpreted-text role=\"ref”} . But there are things you can check by yourself.\n Do you use models without swift DB entry? Those might be unreliable because not enough information are available. Check your settings, see matchingsettings{.interpreted-text role=\"ref”} Check the matching log, in many cases this is already self-explanatory If you want to see airline [FOO]{.title-ref}, do you have models for [FOO]{.title-ref}? Check your coverage: tuningset{.interpreted-text role=\"ref”} You could use your own logic, see ms{.interpreted-text role=\"ref”}  ","excerpt":"Matching means to find the most suitable model for another pilot in …","ref":"/docs/manual/swiftgeneral/matching/matchingresult/","title":"Why do I see airline FOO for airline BAR aircraft?"},{"body":"Model validation We recommend to run model validation if a model fails, see modelsetvalidation{.interpreted-text role=\"ref”} and modelsetvalidationexample{.interpreted-text role=\"ref”} . However, sometimes models fail even though there is no validation error.\nDisabled models in client # If a model fails to be added to the simulator it will be marked in red.\n# Normally you will see a corresponding message in the simulator messages\n","excerpt":"Model validation We recommend to run model validation if a model …","ref":"/docs/manual/spc/modelsetvalidation/disabledmodels/","title":"Why do I see disabled models (models in red)"},{"body":"If validation errors are shown during your pilot client startup, this means swift detects that something is wrong with your model set. See also modelsetvalidation{.interpreted-text role=\"ref”} and modelsetvalidation{.interpreted-text role=\"ref”} .\nSingle validation errors (a few models only) This means a single model is \"broken\", maybe malfunctioning: There is no general advice, this needs to be investigated case by case. A simple solution would be to remove the model from the model set.\nYou do NOT have to uninstall the model, removing from the model set is enough (remove and SAVE).\nMultiple validation errors Multiple validation errors mean something is generally wrong. Most likely the file path for the model is not correct. That can mean:\n you have moved your model directory and not updated your model set, solution createms{.interpreted-text role=\"ref”} Is your XPlane model directory within the XPlane directory? For XPlane it might me that you made a mistake during the installation of the vertical offsets and ended up with cascaded directories, see xplanecg{.interpreted-text role=\"ref”} . Fix the offsets, then re-create your model set createms{.interpreted-text role=\"ref”} For FSX/P3D: It can be that there is a mismatch with the Simobjects.cfg, Add-ons.cfg and Add-On-xml files  ::: {.important} ::: {.title} Important :::\nCheck the validation messages, not only the INVALID MODELS - there might be further information. :::\n","excerpt":"If validation errors are shown during your pilot client startup, this …","ref":"/docs/manual/spc/modelsetvalidation/whyvalidationerrors/","title":"Why do I see validation errors during startup?"},{"body":"::: {.note} ::: {.title} Note :::\nConsolidation means your model data from the simulator will be merged with the DB data into a more detailed data set. :::\n  When you start the mapping tool and read the installed models the current DB data will be used\n  This also applies when you create the model set (the current DB data are used)\n  But other users (or yourself) can change the DB data at a later time to:\n  Create new mappings Modify/correct existing mappings     Applying those changes requires consolidating your model data with the latest DB data. There are multiple ways to accomplish this\n  Manually via the context menu: consolidation{.interpreted-text role=\"ref”} Automatically in background: backupdate{.interpreted-text role=\"ref”} During the model update for the client, see updatemodeldata{.interpreted-text role=\"ref”}     ","excerpt":"::: {.note} ::: {.title} Note :::\nConsolidation means your model data …","ref":"/docs/manual/smt/whydataconsolidation/","title":"Why is data consolidation needed?"},{"body":"Clamping only avoids \"underflow into ground\"\ndouble getCorrectYValue(double inX, double inY, double inZ, double inModelYOffset, bool inIsClampingOn) { if (!inIsClampingOn) { return inY; } XPLMProbeInfo_t info; info.structSize = sizeof(XPLMProbeInfo_t); XPLMProbeResult res = XPLMProbeTerrainXYZ(terrainProbe, inX, inY, inZ, \u0026info); if (res != xplm_ProbeHitTerrain) { return inY; } double minY = info.locationY + inModelYOffset; return (inY \u003c minY) ? minY : inY; } ","excerpt":"Clamping only avoids \"underflow into ground\"\ndouble …","ref":"/docs/knowhow/simandinterpolation/xivapclamp/","title":"X-IVAP clamp on ground and ground handling flag"},{"body":"Bluebell Models  Downloaded BB and opened the zip   After extracting this looks like this   Now the offset fix, without that models would appear too low, see here  Important Make sure to install that correctly, sometimes users install that one directory level too low, you must replace the xsb_aicraft.txt files   Normally it will be correct if you need to override the overwriting   You can also check you see the offset in the xsb_aircraft.txt file   Working folder example:   WRONG folder example, cascaded (\"Airbus in Airbus\")   WRONG folder example, offset file folder in BB folder  X-CSL To get the X-CSL model sets you need to use the X-CSL Updater program that you will download from the X-CSL homepage. It is also suggested to create a subfolder for X-CSL inside X-Plane's \"Custom Data\"-folder to help you organize your model sets.\n  download X-CSL Updater from https://csl.x-air.ru/ extract the X-CSL Updater ZIP-file to a directory of your choice create a new folder inside Custom Data where you will store all X-CSL models, for example ..X-Plane 11Custom DataCSLXCSL start the X-CSL Updater    open File-menu =\u003e Set X-Plane location =\u003e browse to your X-Plane directory, select X-Plane.exe open File-menu =\u003e Set custom path =\u003e confirm warning with OK =\u003e browse to your newly created X-CSL folder within X-Plane, for example ..X-Plane11CustomDataCSLXCSL in the X-CSL Updater program click on Index on the bottom right select the model sets from the list that need installation or updating and then click on Update. It may take a while to finish, depending on the number of models    When you are done you can close X-CSL Updater and start swift's Mapping Tool (swiftData), because now you'll need to update your \"Active Model Set\". For this please refer to our respective Tutorials and help pages.\nGliders  https://forums.x-plane.org/index.php?/files/category/180-gliders-and-motor-gliders/ https://store.x-plane.org/Antares-20E_p_346.html https://store.x-plane.org/VSKYLABS-Scheibe-SF-25C-Falke-Project_p_743.html  ","excerpt":"Bluebell Models  Downloaded BB and opened the zip   After extracting …","ref":"/docs/installation/downloadmodels/xplane/","title":"X-Plane models"},{"body":"::: {.important} ::: {.title} Important :::\nWhenever you change your model's folder (means remove it, move it etc) you need to re-create your model set so the paths there reflect the real situation, see createms{.interpreted-text role=\"ref”} . :::\n  Bluebell CSL models sunken in ground/too low (vertical offset fix) -\u003e Solution: Install the BB_IVAO_vert_offsets fix (downloadbluebell{.interpreted-text role=\"ref”} ) (simply copy the files from the BB_IVAO_vert_offsets folder over the original ones) and restart X-Plane. Make sure you install it correctly! Do not end up in a cascaded structure, see next item.\n  If all offsets for the BB models are missing, check you haven't ended up if a cascaded directory structure and updated the offsets in the wrong place. This can easily happen if you click on the [rar]{.title-ref} file and extract to a different place. Make sure you only have one xsb_aircraft.txt per folder.\n   For an example see installbb{.interpreted-text role=\"ref”}\n  Working folder example:\n    WRONG folder example, cascaded (\"Airbus in Airbus\")\n   WRONG folder example, offset file folder in BB folder     If some individual aircraft seem to be too high or low, you can also check the vertical offset in the xsb_aircraft.txt\n  Normal Jets have values around 2-4 meters as value there, if you see values off the grid maybe this value is wrong below you find some examples     OBJ8_AIRCRAFT A320_UAL OBJ8 SOLID YES __Bluebell_Airbus/A320/A320_UAL.obj VERT_OFFSET 3.5 \u003c-- meters AIRLINE A320 UAL lOBJ8_AIRCRAFT B763_DAL OBJ8 SOLID YES __Bluebell_Boeing/B763/B763_DAL.obj VERT_OFFSET 4.44 \u003c-- meters AIRLINE B763 DAL OBJ8_AIRCRAFT A306_UPS OBJ8 SOLID YES __Bluebell_Airbus/A306/A306_UPS.obj VERT_OFFSET 17.5 \u003c-- UPS, extremely high AIRLINE A306 UPS ICAO A30 Checking in the pilot client You should see these values in the model view if everything is correctly setup.\n 0 means a correct zero value null means a value is not existing  Really make sure that you look at the right thing, this is the path where the model comes from. Check the corresponding xsb_aircraft.txt file there if it really contains the value. Many people create their model set from some weird place. If you change your paths, you need to re-create your model set, see createms{.interpreted-text role=\"ref”}\n","excerpt":"::: {.important} ::: {.title} Important :::\nWhenever you change your …","ref":"/docs/installation/xplane/xplanecg/","title":"XPlane aircraft too high or too low (wrong offset/CG)"},{"body":"StringDataRef\u003cxplane::data::sim::aircraft::view::acf_livery_path\u003e m_liveryPath; StringDataRef\u003cxplane::data::sim::aircraft::view::acf_ICAO\u003e m_icao; StringDataRef\u003cxplane::data::sim::aircraft::view::acf_descrip\u003e m_descrip; DataRef\u003cxplane::data::sim::time::paused\u003e m_paused; DataRef\u003cxplane::data::sim::time::use_system_time\u003e m_useSystemTime; DataRef\u003cxplane::data::sim::flightmodel::position::latitude\u003e m_latitude; DataRef\u003cxplane::data::sim::flightmodel::position::longitude\u003e m_longitude; DataRef\u003cxplane::data::sim::flightmodel::position::elevation\u003e m_elevation; DataRef\u003cxplane::data::sim::flightmodel::position::y_agl\u003e m_agl; DataRef\u003cxplane::data::sim::flightmodel::position::groundspeed\u003e m_groundSpeed; DataRef\u003cxplane::data::sim::flightmodel::position::indicated_airspeed2\u003e m_indicatedAirspeed; DataRef\u003cxplane::data::sim::flightmodel::position::true_airspeed\u003e m_trueAirspeed; DataRef\u003cxplane::data::sim::flightmodel::position::theta\u003e m_pitch; DataRef\u003cxplane::data::sim::flightmodel::position::phi\u003e m_roll; DataRef\u003cxplane::data::sim::flightmodel::position::psi\u003e m_heading; DataRef\u003cxplane::data::sim::flightmodel::failures::onground_any\u003e m_onGroundAny; DataRef\u003cxplane::data::sim::flightmodel::failures::onground_all\u003e m_onGroundAll; DataRef\u003cxplane::data::sim::cockpit2::radios::actuators::com1_frequency_hz_833\u003e m_com1Active; DataRef\u003cxplane::data::sim::cockpit2::radios::actuators::com1_standby_frequency_hz_833\u003e m_com1Standby; DataRef\u003cxplane::data::sim::cockpit2::radios::actuators::audio_com_selection\u003e m_comAudioSelection; // 6==COM1, 7==COM2 DataRef\u003cxplane::data::sim::cockpit2::radios::actuators::com1_power\u003e m_com1Power; DataRef\u003cxplane::data::sim::cockpit2::radios::actuators::audio_volume_com1\u003e m_com1Volume; // 0..1 DataRef\u003cxplane::data::sim::cockpit2::radios::actuators::audio_selection_com1\u003e m_com1Listening; DataRef\u003cxplane::data::sim::cockpit2::radios::actuators::com2_frequency_hz_833\u003e m_com2Active; DataRef\u003cxplane::data::sim::cockpit2::radios::actuators::com2_standby_frequency_hz_833\u003e m_com2Standby; DataRef\u003cxplane::data::sim::cockpit2::radios::actuators::com2_power\u003e m_com2Power; DataRef\u003cxplane::data::sim::cockpit2::radios::actuators::audio_volume_com2\u003e m_com2Volume; // 0..1 DataRef\u003cxplane::data::sim::cockpit2::radios::actuators::audio_selection_com2\u003e m_com2Listening; DataRef\u003cxplane::data::sim::cockpit::radios::transponder_code\u003e m_xpdrCode; DataRef\u003cxplane::data::sim::cockpit::radios::transponder_mode\u003e m_xpdrMode; DataRef\u003cxplane::data::sim::cockpit::radios::transponder_id\u003e m_xpdrIdent; DataRef\u003cxplane::data::sim::cockpit::electrical::beacon_lights_on\u003e m_beaconLightsOn; DataRef\u003cxplane::data::sim::cockpit::electrical::landing_lights_on\u003e m_landingLightsOn; DataRef\u003cxplane::data::sim::cockpit::electrical::nav_lights_on\u003e m_navLightsOn; DataRef\u003cxplane::data::sim::cockpit::electrical::strobe_lights_on\u003e m_strobeLightsOn; DataRef\u003cxplane::data::sim::cockpit::electrical::taxi_light_on\u003e m_taxiLightsOn; DataRef\u003cxplane::data::sim::flightmodel2::controls::flap_handle_deploy_ratio\u003e m_flapsReployRatio; ArrayDataRef\u003cxplane::data::sim::flightmodel2::gear::deploy_ratio\u003e m_gearReployRatio; DataRef\u003cxplane::data::sim::aircraft::engine::acf_num_engines\u003e m_numberOfEngines; ArrayDataRef\u003cxplane::data::sim::flightmodel::engine::ENGN_N1_\u003e m_enginesN1Percentage; DataRef\u003cxplane::data::sim::flightmodel2::controls::speedbrake_ratio\u003e m_speedBrakeRatio; DataRef\u003cxplane::data::sim::weather::barometer_sealevel_inhg\u003e m_qnhInhg; ","excerpt":"StringDataRef\u003cxplane::data::sim::aircraft::view::acf_livery_path\u003e …","ref":"/docs/manual/swiftgeneral/xplanedatarefs/","title":"XPlane datarefs used with swift"},{"body":"see als xswiftbussettings{.interpreted-text role=\"ref”}\nDriver settings The driver settings can be found here: Settings --\u003e Simulator --\u003e then click on the 3 dots right next to \"X-Plane\"\nTCAS settings In order to display the other aircraft on TCAS swift uses some technical tricks. Those can affect the stability and the performance of XPlane. Changing requires restarting XPlane.\n","excerpt":"see als xswiftbussettings{.interpreted-text role=\"ref”}\nDriver …","ref":"/docs/manual/spc/settings/xplanedriversettings/","title":"XPlane driver settings"},{"body":"To follow aircraft in X-Plane you can use \"follow aircraft\"\n aircraft can be selected from the XSwiftBus menu or from the Aircraft widget in swiftGUI (select an aircraft from the list ==\u003e right-click ==\u003e Display and render models ==\u003e Follow in simulator) to changeyour point of view (view direction), keep your spacebar pressed and move your mouse to increase/decrease the distance to the plane, use {key arrowdown} / {key arrowup} you can also change the standard distance for flight following. In swiftGUI select the Settings widget ==\u003e Simulator ==\u003e click on the [...] icon next to X-Plane. This will open a new window where you can change the standard distance. The unit is in metres, 1m = 3.28ft. Please note that changes will only take affect after you restart X-Plane.  ","excerpt":"To follow aircraft in X-Plane you can use \"follow aircraft\"\n aircraft …","ref":"/docs/manual/spc/flightwithswift/xplanefollow/","title":"XPlane follow aircraft view"},{"body":" If you see your gear always up, or animations not working (in XPlane), see troubleshooting{.interpreted-text role=\"ref”} (\"animations\") Another reasons is if the other client sends wrong parts, see interpolationexamples{.interpreted-text role=\"ref”}  ","excerpt":" If you see your gear always up, or animations not working (in …","ref":"/docs/manual/swiftgeneral/faq/xpgear/","title":"XPlane gear always up / animations not working"},{"body":"CSL vs. .acf aircraft  Like XSquawkBox, we render CSL models to represent the remote aircraft (other pilots). There is a distinction between CSL and the aircraft that the local user flies (the .acf aircraft). One cannot fly a CSL, and we cannot render a .acf. We need both in the database, but we can not use .acf to render remote aircraft. So [.acf]{.title-ref} aircraft are x excluded, which prevents them being used for rendering. ACF aircraft with X normally do not belong in the model set (do not confuse model set and own models, we talk about the model set here) But we use the .acf in the database so we know which plane the local user is flying, so we can pass that info to the other clients on the network. See also excludedmodels{.interpreted-text role=\"ref”} Do we need mappings for [ACF]{.title-ref} models? Yes, see excludedmodels{.interpreted-text role=\"ref”}  Model directories  One can install CSL models wherever you want. In the mapping tool, simulator settings panel, you direct swift where to search for them, by adding to the list of model directories. All subdirectories of your X-Plane directory are already selected. For your own (non-CSL) models, [ACF] and excluded should be automatically added by default when the mapping tool discovers the models.  Vertical offset fix  Install the vertical offset fix for BlueBell models if needed, see troubleshooting{.interpreted-text role=\"ref”}  ","excerpt":"CSL vs. .acf aircraft  Like XSquawkBox, we render CSL models to …","ref":"/docs/manual/smt/xplanemapping/","title":"XPlane specific information"},{"body":"X-Plane users need to download and install XSwiftBus : XSwiftBus is an X-Plane plugin that allows X-Plane and swift to communicate with each other. If you want to use swift with X-Plane you will need to install XSwiftBus.\n see swift and XSB troubleshooting{.interpreted-text role=\"ref”} this can be done from the launcher or update checker   or using the wizard (started from the launcher)   Manual installation (testers): Download the XSwiftBus version and unpack it to your XPlane plugins directory For developers: buildxswiftbus{.interpreted-text role=\"ref”}  ","excerpt":"X-Plane users need to download and install XSwiftBus : XSwiftBus is an …","ref":"/docs/installation/xplane/xswiftbusinstallation/","title":"XSwiftBus installation"},{"body":"see also xplanedriversettings{.interpreted-text role=\"ref”}\nWhen changing the connection details between swift and XSwiftBus, the modification needs to be applied in sync on both sides. Otherwise connection issues can occur.\nOn the swift side Open swift settings/Simulator and click 3 dots (…) opposite X-Plane swift side:\nOn the XPlane plugin side Modify xswiftbus.conf configuration file inside the XSwiftBus plugin folder. It should look like this:\n# DBus Mode - Options: p2p, session dbusMode = p2p # DBus server address - relevant for P2P mode only dbusAddress = 127.0.0.1 # DBus server port - relevant for P2P mode only dbusPort = 45001 Make sure to apply the same settings as on swift side. Any modification of this file will require a restart of XSwiftBus (either by a restart of X-Plane or disabling/enabling XSwiftBus from the Plugin Manager).\n","excerpt":"see also xplanedriversettings{.interpreted-text role=\"ref”}\nWhen …","ref":"/docs/manual/spc/settings/xswiftbussettings/","title":"XSwiftBus settings"},{"body":"swift XPlane via P2P 127.0.0.1:45001\n setting   traffic not connected to network between XPlane/XSwiftBus   you can see that swift sends and XPlane receives and vice versa that is about 20kByte traffic in idle mode swift/XPlane talk via the loopback adaptor  swift XPlane via session bus  this starts the DBus daemon As you can see swift now talks to the Daemon and the daemon talks to XPlane actually doubling the loopback traffic (no network)   with VATSIM connected I can see something around 40kByte/s   again all loopback traffic  SimConnect via TCP/IP  swift connecting to P3D via remote TCP/IP simConnect traffic during connecting phase of 20 aircraft, ending up with around 1.1 Mbit/s  ","excerpt":"swift XPlane via P2P 127.0.0.1:45001\n setting   traffic not connected …","ref":"/docs/knowhow/simandinterpolation/xswiftbustraffic/","title":"XSwiftBus/SimConnect traffic analyzed"}]